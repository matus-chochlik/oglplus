/*
 *  .file oglplus/detail/enum_shorteners_doc.ipp
 *
 *  Automatically generated header file. DO NOT modify manually,
 *  edit 'source/enums/oglplus/.*.txt' instead.
 *
 *  Copyright 2010-2014 Matus Chochlik. Distributed under the Boost
 *  Software License, Version 1.0. (See accompanying file
 *  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 */

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c _0 value.
/**
 *  @see @ref oglplus::FramebufferColorAttachment "FramebufferColorAttachment"
 *
 *  @glsymbols
 *  @gldefref{COLOR_ATTACHMENT0}
 *
 *  @ingroup smart_enums
 */
struct _0 {

/// Conversion to any @p Enum type having the _0 value.
/** Instances of the @ref oglplus::smart_enums::_0 "_0"
 *  type are convertible to instances of any enumeration type having
 *  the @c _0 value.
 */
template <typename Enum, Enum = Enum::_0> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the _0 value.
/** Instances of the @c smart_enums::_0 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c _0 value.
 */
template <typename Enum> friend bool operator==(Enum value, _0);

/// Non-equality comparison with any @p Enum type having the _0 value.
/** Instances of the @c smart_enums::_0 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c _0 value.
 */
template <typename Enum> friend bool operator!=(Enum value, _0);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c _1 value.
/**
 *  @see @ref oglplus::FramebufferColorAttachment "FramebufferColorAttachment"
 *
 *  @glsymbols
 *  @gldefref{COLOR_ATTACHMENT1}
 *
 *  @ingroup smart_enums
 */
struct _1 {

/// Conversion to any @p Enum type having the _1 value.
/** Instances of the @ref oglplus::smart_enums::_1 "_1"
 *  type are convertible to instances of any enumeration type having
 *  the @c _1 value.
 */
template <typename Enum, Enum = Enum::_1> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the _1 value.
/** Instances of the @c smart_enums::_1 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c _1 value.
 */
template <typename Enum> friend bool operator==(Enum value, _1);

/// Non-equality comparison with any @p Enum type having the _1 value.
/** Instances of the @c smart_enums::_1 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c _1 value.
 */
template <typename Enum> friend bool operator!=(Enum value, _1);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c _10 value.
/**
 *  @see @ref oglplus::FramebufferColorAttachment "FramebufferColorAttachment"
 *
 *  @glsymbols
 *  @gldefref{COLOR_ATTACHMENT10}
 *
 *  @ingroup smart_enums
 */
struct _10 {

/// Conversion to any @p Enum type having the _10 value.
/** Instances of the @ref oglplus::smart_enums::_10 "_10"
 *  type are convertible to instances of any enumeration type having
 *  the @c _10 value.
 */
template <typename Enum, Enum = Enum::_10> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the _10 value.
/** Instances of the @c smart_enums::_10 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c _10 value.
 */
template <typename Enum> friend bool operator==(Enum value, _10);

/// Non-equality comparison with any @p Enum type having the _10 value.
/** Instances of the @c smart_enums::_10 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c _10 value.
 */
template <typename Enum> friend bool operator!=(Enum value, _10);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c _11 value.
/**
 *  @see @ref oglplus::FramebufferColorAttachment "FramebufferColorAttachment"
 *
 *  @glsymbols
 *  @gldefref{COLOR_ATTACHMENT11}
 *
 *  @ingroup smart_enums
 */
struct _11 {

/// Conversion to any @p Enum type having the _11 value.
/** Instances of the @ref oglplus::smart_enums::_11 "_11"
 *  type are convertible to instances of any enumeration type having
 *  the @c _11 value.
 */
template <typename Enum, Enum = Enum::_11> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the _11 value.
/** Instances of the @c smart_enums::_11 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c _11 value.
 */
template <typename Enum> friend bool operator==(Enum value, _11);

/// Non-equality comparison with any @p Enum type having the _11 value.
/** Instances of the @c smart_enums::_11 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c _11 value.
 */
template <typename Enum> friend bool operator!=(Enum value, _11);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c _12 value.
/**
 *  @see @ref oglplus::FramebufferColorAttachment "FramebufferColorAttachment"
 *
 *  @glsymbols
 *  @gldefref{COLOR_ATTACHMENT12}
 *
 *  @ingroup smart_enums
 */
struct _12 {

/// Conversion to any @p Enum type having the _12 value.
/** Instances of the @ref oglplus::smart_enums::_12 "_12"
 *  type are convertible to instances of any enumeration type having
 *  the @c _12 value.
 */
template <typename Enum, Enum = Enum::_12> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the _12 value.
/** Instances of the @c smart_enums::_12 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c _12 value.
 */
template <typename Enum> friend bool operator==(Enum value, _12);

/// Non-equality comparison with any @p Enum type having the _12 value.
/** Instances of the @c smart_enums::_12 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c _12 value.
 */
template <typename Enum> friend bool operator!=(Enum value, _12);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c _13 value.
/**
 *  @see @ref oglplus::FramebufferColorAttachment "FramebufferColorAttachment"
 *
 *  @glsymbols
 *  @gldefref{COLOR_ATTACHMENT13}
 *
 *  @ingroup smart_enums
 */
struct _13 {

/// Conversion to any @p Enum type having the _13 value.
/** Instances of the @ref oglplus::smart_enums::_13 "_13"
 *  type are convertible to instances of any enumeration type having
 *  the @c _13 value.
 */
template <typename Enum, Enum = Enum::_13> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the _13 value.
/** Instances of the @c smart_enums::_13 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c _13 value.
 */
template <typename Enum> friend bool operator==(Enum value, _13);

/// Non-equality comparison with any @p Enum type having the _13 value.
/** Instances of the @c smart_enums::_13 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c _13 value.
 */
template <typename Enum> friend bool operator!=(Enum value, _13);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c _14 value.
/**
 *  @see @ref oglplus::FramebufferColorAttachment "FramebufferColorAttachment"
 *
 *  @glsymbols
 *  @gldefref{COLOR_ATTACHMENT14}
 *
 *  @ingroup smart_enums
 */
struct _14 {

/// Conversion to any @p Enum type having the _14 value.
/** Instances of the @ref oglplus::smart_enums::_14 "_14"
 *  type are convertible to instances of any enumeration type having
 *  the @c _14 value.
 */
template <typename Enum, Enum = Enum::_14> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the _14 value.
/** Instances of the @c smart_enums::_14 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c _14 value.
 */
template <typename Enum> friend bool operator==(Enum value, _14);

/// Non-equality comparison with any @p Enum type having the _14 value.
/** Instances of the @c smart_enums::_14 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c _14 value.
 */
template <typename Enum> friend bool operator!=(Enum value, _14);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c _15 value.
/**
 *  @see @ref oglplus::FramebufferColorAttachment "FramebufferColorAttachment"
 *
 *  @glsymbols
 *  @gldefref{COLOR_ATTACHMENT15}
 *
 *  @ingroup smart_enums
 */
struct _15 {

/// Conversion to any @p Enum type having the _15 value.
/** Instances of the @ref oglplus::smart_enums::_15 "_15"
 *  type are convertible to instances of any enumeration type having
 *  the @c _15 value.
 */
template <typename Enum, Enum = Enum::_15> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the _15 value.
/** Instances of the @c smart_enums::_15 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c _15 value.
 */
template <typename Enum> friend bool operator==(Enum value, _15);

/// Non-equality comparison with any @p Enum type having the _15 value.
/** Instances of the @c smart_enums::_15 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c _15 value.
 */
template <typename Enum> friend bool operator!=(Enum value, _15);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c _1D value.
/**
 *  @see @ref oglplus::TextureTarget "TextureTarget"
 *
 *  @glsymbols
 *  @gldefref{TEXTURE_1D}
 *
 *  @ingroup smart_enums
 */
struct _1D {

/// Conversion to any @p Enum type having the _1D value.
/** Instances of the @ref oglplus::smart_enums::_1D "_1D"
 *  type are convertible to instances of any enumeration type having
 *  the @c _1D value.
 */
template <typename Enum, Enum = Enum::_1D> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the _1D value.
/** Instances of the @c smart_enums::_1D type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c _1D value.
 */
template <typename Enum> friend bool operator==(Enum value, _1D);

/// Non-equality comparison with any @p Enum type having the _1D value.
/** Instances of the @c smart_enums::_1D type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c _1D value.
 */
template <typename Enum> friend bool operator!=(Enum value, _1D);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c _1DArray value.
/**
 *  @see @ref oglplus::TextureTarget "TextureTarget"
 *
 *  @glsymbols
 *  @gldefref{TEXTURE_1D_ARRAY}
 *
 *  @ingroup smart_enums
 */
struct _1DArray {

/// Conversion to any @p Enum type having the _1DArray value.
/** Instances of the @ref oglplus::smart_enums::_1DArray "_1DArray"
 *  type are convertible to instances of any enumeration type having
 *  the @c _1DArray value.
 */
template <typename Enum, Enum = Enum::_1DArray> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the _1DArray value.
/** Instances of the @c smart_enums::_1DArray type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c _1DArray value.
 */
template <typename Enum> friend bool operator==(Enum value, _1DArray);

/// Non-equality comparison with any @p Enum type having the _1DArray value.
/** Instances of the @c smart_enums::_1DArray type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c _1DArray value.
 */
template <typename Enum> friend bool operator!=(Enum value, _1DArray);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c _2 value.
/**
 *  @see @ref oglplus::FramebufferColorAttachment "FramebufferColorAttachment"
 *
 *  @glsymbols
 *  @gldefref{COLOR_ATTACHMENT2}
 *
 *  @ingroup smart_enums
 */
struct _2 {

/// Conversion to any @p Enum type having the _2 value.
/** Instances of the @ref oglplus::smart_enums::_2 "_2"
 *  type are convertible to instances of any enumeration type having
 *  the @c _2 value.
 */
template <typename Enum, Enum = Enum::_2> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the _2 value.
/** Instances of the @c smart_enums::_2 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c _2 value.
 */
template <typename Enum> friend bool operator==(Enum value, _2);

/// Non-equality comparison with any @p Enum type having the _2 value.
/** Instances of the @c smart_enums::_2 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c _2 value.
 */
template <typename Enum> friend bool operator!=(Enum value, _2);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c _2D value.
/**
 *  @see @ref oglplus::TextureTarget "TextureTarget"
 *
 *  @glsymbols
 *  @gldefref{TEXTURE_2D}
 *
 *  @ingroup smart_enums
 */
struct _2D {

/// Conversion to any @p Enum type having the _2D value.
/** Instances of the @ref oglplus::smart_enums::_2D "_2D"
 *  type are convertible to instances of any enumeration type having
 *  the @c _2D value.
 */
template <typename Enum, Enum = Enum::_2D> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the _2D value.
/** Instances of the @c smart_enums::_2D type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c _2D value.
 */
template <typename Enum> friend bool operator==(Enum value, _2D);

/// Non-equality comparison with any @p Enum type having the _2D value.
/** Instances of the @c smart_enums::_2D type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c _2D value.
 */
template <typename Enum> friend bool operator!=(Enum value, _2D);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c _2DArray value.
/**
 *  @see @ref oglplus::TextureTarget "TextureTarget"
 *
 *  @glsymbols
 *  @gldefref{TEXTURE_2D_ARRAY}
 *
 *  @ingroup smart_enums
 */
struct _2DArray {

/// Conversion to any @p Enum type having the _2DArray value.
/** Instances of the @ref oglplus::smart_enums::_2DArray "_2DArray"
 *  type are convertible to instances of any enumeration type having
 *  the @c _2DArray value.
 */
template <typename Enum, Enum = Enum::_2DArray> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the _2DArray value.
/** Instances of the @c smart_enums::_2DArray type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c _2DArray value.
 */
template <typename Enum> friend bool operator==(Enum value, _2DArray);

/// Non-equality comparison with any @p Enum type having the _2DArray value.
/** Instances of the @c smart_enums::_2DArray type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c _2DArray value.
 */
template <typename Enum> friend bool operator!=(Enum value, _2DArray);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c _2DMultisample value.
/**
 *  @see @ref oglplus::TextureTarget "TextureTarget"
 *
 *  @glsymbols
 *  @gldefref{TEXTURE_2D_MULTISAMPLE}
 *
 *  @ingroup smart_enums
 */
struct _2DMultisample {

/// Conversion to any @p Enum type having the _2DMultisample value.
/** Instances of the @ref oglplus::smart_enums::_2DMultisample "_2DMultisample"
 *  type are convertible to instances of any enumeration type having
 *  the @c _2DMultisample value.
 */
template <typename Enum, Enum = Enum::_2DMultisample> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the _2DMultisample value.
/** Instances of the @c smart_enums::_2DMultisample type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c _2DMultisample value.
 */
template <typename Enum> friend bool operator==(Enum value, _2DMultisample);

/// Non-equality comparison with any @p Enum type having the _2DMultisample value.
/** Instances of the @c smart_enums::_2DMultisample type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c _2DMultisample value.
 */
template <typename Enum> friend bool operator!=(Enum value, _2DMultisample);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c _2DMultisampleArray value.
/**
 *  @see @ref oglplus::TextureTarget "TextureTarget"
 *
 *  @glsymbols
 *  @gldefref{TEXTURE_2D_MULTISAMPLE_ARRAY}
 *
 *  @ingroup smart_enums
 */
struct _2DMultisampleArray {

/// Conversion to any @p Enum type having the _2DMultisampleArray value.
/** Instances of the @ref oglplus::smart_enums::_2DMultisampleArray "_2DMultisampleArray"
 *  type are convertible to instances of any enumeration type having
 *  the @c _2DMultisampleArray value.
 */
template <typename Enum, Enum = Enum::_2DMultisampleArray> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the _2DMultisampleArray value.
/** Instances of the @c smart_enums::_2DMultisampleArray type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c _2DMultisampleArray value.
 */
template <typename Enum> friend bool operator==(Enum value, _2DMultisampleArray);

/// Non-equality comparison with any @p Enum type having the _2DMultisampleArray value.
/** Instances of the @c smart_enums::_2DMultisampleArray type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c _2DMultisampleArray value.
 */
template <typename Enum> friend bool operator!=(Enum value, _2DMultisampleArray);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c _3 value.
/**
 *  @see @ref oglplus::FramebufferColorAttachment "FramebufferColorAttachment"
 *
 *  @glsymbols
 *  @gldefref{COLOR_ATTACHMENT3}
 *
 *  @ingroup smart_enums
 */
struct _3 {

/// Conversion to any @p Enum type having the _3 value.
/** Instances of the @ref oglplus::smart_enums::_3 "_3"
 *  type are convertible to instances of any enumeration type having
 *  the @c _3 value.
 */
template <typename Enum, Enum = Enum::_3> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the _3 value.
/** Instances of the @c smart_enums::_3 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c _3 value.
 */
template <typename Enum> friend bool operator==(Enum value, _3);

/// Non-equality comparison with any @p Enum type having the _3 value.
/** Instances of the @c smart_enums::_3 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c _3 value.
 */
template <typename Enum> friend bool operator!=(Enum value, _3);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c _3D value.
/**
 *  @see @ref oglplus::TextureTarget "TextureTarget"
 *
 *  @glsymbols
 *  @gldefref{TEXTURE_3D}
 *
 *  @ingroup smart_enums
 */
struct _3D {

/// Conversion to any @p Enum type having the _3D value.
/** Instances of the @ref oglplus::smart_enums::_3D "_3D"
 *  type are convertible to instances of any enumeration type having
 *  the @c _3D value.
 */
template <typename Enum, Enum = Enum::_3D> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the _3D value.
/** Instances of the @c smart_enums::_3D type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c _3D value.
 */
template <typename Enum> friend bool operator==(Enum value, _3D);

/// Non-equality comparison with any @p Enum type having the _3D value.
/** Instances of the @c smart_enums::_3D type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c _3D value.
 */
template <typename Enum> friend bool operator!=(Enum value, _3D);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c _4 value.
/**
 *  @see @ref oglplus::FramebufferColorAttachment "FramebufferColorAttachment"
 *
 *  @glsymbols
 *  @gldefref{COLOR_ATTACHMENT4}
 *
 *  @ingroup smart_enums
 */
struct _4 {

/// Conversion to any @p Enum type having the _4 value.
/** Instances of the @ref oglplus::smart_enums::_4 "_4"
 *  type are convertible to instances of any enumeration type having
 *  the @c _4 value.
 */
template <typename Enum, Enum = Enum::_4> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the _4 value.
/** Instances of the @c smart_enums::_4 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c _4 value.
 */
template <typename Enum> friend bool operator==(Enum value, _4);

/// Non-equality comparison with any @p Enum type having the _4 value.
/** Instances of the @c smart_enums::_4 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c _4 value.
 */
template <typename Enum> friend bool operator!=(Enum value, _4);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c _5 value.
/**
 *  @see @ref oglplus::FramebufferColorAttachment "FramebufferColorAttachment"
 *
 *  @glsymbols
 *  @gldefref{COLOR_ATTACHMENT5}
 *
 *  @ingroup smart_enums
 */
struct _5 {

/// Conversion to any @p Enum type having the _5 value.
/** Instances of the @ref oglplus::smart_enums::_5 "_5"
 *  type are convertible to instances of any enumeration type having
 *  the @c _5 value.
 */
template <typename Enum, Enum = Enum::_5> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the _5 value.
/** Instances of the @c smart_enums::_5 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c _5 value.
 */
template <typename Enum> friend bool operator==(Enum value, _5);

/// Non-equality comparison with any @p Enum type having the _5 value.
/** Instances of the @c smart_enums::_5 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c _5 value.
 */
template <typename Enum> friend bool operator!=(Enum value, _5);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c _6 value.
/**
 *  @see @ref oglplus::FramebufferColorAttachment "FramebufferColorAttachment"
 *
 *  @glsymbols
 *  @gldefref{COLOR_ATTACHMENT6}
 *
 *  @ingroup smart_enums
 */
struct _6 {

/// Conversion to any @p Enum type having the _6 value.
/** Instances of the @ref oglplus::smart_enums::_6 "_6"
 *  type are convertible to instances of any enumeration type having
 *  the @c _6 value.
 */
template <typename Enum, Enum = Enum::_6> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the _6 value.
/** Instances of the @c smart_enums::_6 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c _6 value.
 */
template <typename Enum> friend bool operator==(Enum value, _6);

/// Non-equality comparison with any @p Enum type having the _6 value.
/** Instances of the @c smart_enums::_6 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c _6 value.
 */
template <typename Enum> friend bool operator!=(Enum value, _6);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c _7 value.
/**
 *  @see @ref oglplus::FramebufferColorAttachment "FramebufferColorAttachment"
 *
 *  @glsymbols
 *  @gldefref{COLOR_ATTACHMENT7}
 *
 *  @ingroup smart_enums
 */
struct _7 {

/// Conversion to any @p Enum type having the _7 value.
/** Instances of the @ref oglplus::smart_enums::_7 "_7"
 *  type are convertible to instances of any enumeration type having
 *  the @c _7 value.
 */
template <typename Enum, Enum = Enum::_7> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the _7 value.
/** Instances of the @c smart_enums::_7 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c _7 value.
 */
template <typename Enum> friend bool operator==(Enum value, _7);

/// Non-equality comparison with any @p Enum type having the _7 value.
/** Instances of the @c smart_enums::_7 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c _7 value.
 */
template <typename Enum> friend bool operator!=(Enum value, _7);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c _8 value.
/**
 *  @see @ref oglplus::FramebufferColorAttachment "FramebufferColorAttachment"
 *
 *  @glsymbols
 *  @gldefref{COLOR_ATTACHMENT8}
 *
 *  @ingroup smart_enums
 */
struct _8 {

/// Conversion to any @p Enum type having the _8 value.
/** Instances of the @ref oglplus::smart_enums::_8 "_8"
 *  type are convertible to instances of any enumeration type having
 *  the @c _8 value.
 */
template <typename Enum, Enum = Enum::_8> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the _8 value.
/** Instances of the @c smart_enums::_8 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c _8 value.
 */
template <typename Enum> friend bool operator==(Enum value, _8);

/// Non-equality comparison with any @p Enum type having the _8 value.
/** Instances of the @c smart_enums::_8 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c _8 value.
 */
template <typename Enum> friend bool operator!=(Enum value, _8);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c _9 value.
/**
 *  @see @ref oglplus::FramebufferColorAttachment "FramebufferColorAttachment"
 *
 *  @glsymbols
 *  @gldefref{COLOR_ATTACHMENT9}
 *
 *  @ingroup smart_enums
 */
struct _9 {

/// Conversion to any @p Enum type having the _9 value.
/** Instances of the @ref oglplus::smart_enums::_9 "_9"
 *  type are convertible to instances of any enumeration type having
 *  the @c _9 value.
 */
template <typename Enum, Enum = Enum::_9> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the _9 value.
/** Instances of the @c smart_enums::_9 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c _9 value.
 */
template <typename Enum> friend bool operator==(Enum value, _9);

/// Non-equality comparison with any @p Enum type having the _9 value.
/** Instances of the @c smart_enums::_9 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c _9 value.
 */
template <typename Enum> friend bool operator!=(Enum value, _9);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c A value.
/**
 *  @see @ref oglplus::TextureSwizzleCoord "TextureSwizzleCoord"
 *
 *  @glsymbols
 *  @gldefref{TEXTURE_SWIZZLE_A}
 *
 *  @ingroup smart_enums
 */
struct A {

/// Conversion to any @p Enum type having the A value.
/** Instances of the @ref oglplus::smart_enums::A "A"
 *  type are convertible to instances of any enumeration type having
 *  the @c A value.
 */
template <typename Enum, Enum = Enum::A> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the A value.
/** Instances of the @c smart_enums::A type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c A value.
 */
template <typename Enum> friend bool operator==(Enum value, A);

/// Non-equality comparison with any @p Enum type having the A value.
/** Instances of the @c smart_enums::A type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c A value.
 */
template <typename Enum> friend bool operator!=(Enum value, A);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c AccumAdjacentPairs value.
/**
 *  @see @ref oglplus::PathNVListMode "PathNVListMode"
 *
 *  @glsymbols
 *  @gldefref{ACCUM_ADJACENT_PAIRS_NV}
 *
 *  @ingroup smart_enums
 */
struct AccumAdjacentPairs {

/// Conversion to any @p Enum type having the AccumAdjacentPairs value.
/** Instances of the @ref oglplus::smart_enums::AccumAdjacentPairs "AccumAdjacentPairs"
 *  type are convertible to instances of any enumeration type having
 *  the @c AccumAdjacentPairs value.
 */
template <typename Enum, Enum = Enum::AccumAdjacentPairs> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the AccumAdjacentPairs value.
/** Instances of the @c smart_enums::AccumAdjacentPairs type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c AccumAdjacentPairs value.
 */
template <typename Enum> friend bool operator==(Enum value, AccumAdjacentPairs);

/// Non-equality comparison with any @p Enum type having the AccumAdjacentPairs value.
/** Instances of the @c smart_enums::AccumAdjacentPairs type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c AccumAdjacentPairs value.
 */
template <typename Enum> friend bool operator!=(Enum value, AccumAdjacentPairs);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c AccumBuffer value.
/**
 *  @see @ref oglplus::CompatibilityAttributeGroup "CompatibilityAttributeGroup"
 *
 *  @glsymbols
 *  @gldefref{ACCUM_BUFFER_BIT}
 *
 *  @ingroup smart_enums
 */
struct AccumBuffer {

/// Conversion to any @p Enum type having the AccumBuffer value.
/** Instances of the @ref oglplus::smart_enums::AccumBuffer "AccumBuffer"
 *  type are convertible to instances of any enumeration type having
 *  the @c AccumBuffer value.
 */
template <typename Enum, Enum = Enum::AccumBuffer> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the AccumBuffer value.
/** Instances of the @c smart_enums::AccumBuffer type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c AccumBuffer value.
 */
template <typename Enum> friend bool operator==(Enum value, AccumBuffer);

/// Non-equality comparison with any @p Enum type having the AccumBuffer value.
/** Instances of the @c smart_enums::AccumBuffer type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c AccumBuffer value.
 */
template <typename Enum> friend bool operator!=(Enum value, AccumBuffer);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ActiveVariables value.
/**
 *  @see @ref oglplus::ProgramResourceProperty "ProgramResourceProperty"
 *
 *  @glsymbols
 *  @gldefref{ACTIVE_VARIABLES}
 *
 *  @ingroup smart_enums
 */
struct ActiveVariables {

/// Conversion to any @p Enum type having the ActiveVariables value.
/** Instances of the @ref oglplus::smart_enums::ActiveVariables "ActiveVariables"
 *  type are convertible to instances of any enumeration type having
 *  the @c ActiveVariables value.
 */
template <typename Enum, Enum = Enum::ActiveVariables> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ActiveVariables value.
/** Instances of the @c smart_enums::ActiveVariables type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ActiveVariables value.
 */
template <typename Enum> friend bool operator==(Enum value, ActiveVariables);

/// Non-equality comparison with any @p Enum type having the ActiveVariables value.
/** Instances of the @c smart_enums::ActiveVariables type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ActiveVariables value.
 */
template <typename Enum> friend bool operator!=(Enum value, ActiveVariables);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Add value.
/**
 *  @see @ref oglplus::BlendEquation "BlendEquation"
 *
 *  @glsymbols
 *  @gldefref{FUNC_ADD}
 *
 *  @ingroup smart_enums
 */
struct Add {

/// Conversion to any @p Enum type having the Add value.
/** Instances of the @ref oglplus::smart_enums::Add "Add"
 *  type are convertible to instances of any enumeration type having
 *  the @c Add value.
 */
template <typename Enum, Enum = Enum::Add> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Add value.
/** Instances of the @c smart_enums::Add type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Add value.
 */
template <typename Enum> friend bool operator==(Enum value, Add);

/// Non-equality comparison with any @p Enum type having the Add value.
/** Instances of the @c smart_enums::Add type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Add value.
 */
template <typename Enum> friend bool operator!=(Enum value, Add);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c AdjacentPairs value.
/**
 *  @see @ref oglplus::PathNVListMode "PathNVListMode"
 *
 *  @glsymbols
 *  @gldefref{ADJACENT_PAIRS_NV}
 *
 *  @ingroup smart_enums
 */
struct AdjacentPairs {

/// Conversion to any @p Enum type having the AdjacentPairs value.
/** Instances of the @ref oglplus::smart_enums::AdjacentPairs "AdjacentPairs"
 *  type are convertible to instances of any enumeration type having
 *  the @c AdjacentPairs value.
 */
template <typename Enum, Enum = Enum::AdjacentPairs> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the AdjacentPairs value.
/** Instances of the @c smart_enums::AdjacentPairs type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c AdjacentPairs value.
 */
template <typename Enum> friend bool operator==(Enum value, AdjacentPairs);

/// Non-equality comparison with any @p Enum type having the AdjacentPairs value.
/** Instances of the @c smart_enums::AdjacentPairs type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c AdjacentPairs value.
 */
template <typename Enum> friend bool operator!=(Enum value, AdjacentPairs);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Affine2D value.
/**
 *  @see @ref oglplus::PathNVTransformType "PathNVTransformType"
 *
 *  @glsymbols
 *  @gldefref{AFFINE_2D_NV}
 *
 *  @ingroup smart_enums
 */
struct Affine2D {

/// Conversion to any @p Enum type having the Affine2D value.
/** Instances of the @ref oglplus::smart_enums::Affine2D "Affine2D"
 *  type are convertible to instances of any enumeration type having
 *  the @c Affine2D value.
 */
template <typename Enum, Enum = Enum::Affine2D> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Affine2D value.
/** Instances of the @c smart_enums::Affine2D type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Affine2D value.
 */
template <typename Enum> friend bool operator==(Enum value, Affine2D);

/// Non-equality comparison with any @p Enum type having the Affine2D value.
/** Instances of the @c smart_enums::Affine2D type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Affine2D value.
 */
template <typename Enum> friend bool operator!=(Enum value, Affine2D);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Affine3D value.
/**
 *  @see @ref oglplus::PathNVTransformType "PathNVTransformType"
 *
 *  @glsymbols
 *  @gldefref{AFFINE_3D_NV}
 *
 *  @ingroup smart_enums
 */
struct Affine3D {

/// Conversion to any @p Enum type having the Affine3D value.
/** Instances of the @ref oglplus::smart_enums::Affine3D "Affine3D"
 *  type are convertible to instances of any enumeration type having
 *  the @c Affine3D value.
 */
template <typename Enum, Enum = Enum::Affine3D> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Affine3D value.
/** Instances of the @c smart_enums::Affine3D type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Affine3D value.
 */
template <typename Enum> friend bool operator==(Enum value, Affine3D);

/// Non-equality comparison with any @p Enum type having the Affine3D value.
/** Instances of the @c smart_enums::Affine3D type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Affine3D value.
 */
template <typename Enum> friend bool operator!=(Enum value, Affine3D);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c All value.
/**
 *  @see @ref oglplus::MemoryBarrierBit "MemoryBarrierBit"
 *
 *  @glsymbols
 *  @gldefref{ALL_BARRIER_BITS}
 *
 *  @ingroup smart_enums
 */
struct All {

/// Conversion to any @p Enum type having the All value.
/** Instances of the @ref oglplus::smart_enums::All "All"
 *  type are convertible to instances of any enumeration type having
 *  the @c All value.
 */
template <typename Enum, Enum = Enum::All> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the All value.
/** Instances of the @c smart_enums::All type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c All value.
 */
template <typename Enum> friend bool operator==(Enum value, All);

/// Non-equality comparison with any @p Enum type having the All value.
/** Instances of the @c smart_enums::All type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c All value.
 */
template <typename Enum> friend bool operator!=(Enum value, All);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c AllAttribs value.
/**
 *  @see @ref oglplus::CompatibilityAttributeGroup "CompatibilityAttributeGroup"
 *  @see @ref oglplus::CompatibilityClientAttributeGroup "CompatibilityClientAttributeGroup"
 *
 *  @glsymbols
 *  @gldefref{ALL_ATTRIB_BITS}
 *  @gldefref{CLIENT_ALL_ATTRIB_BITS}
 *
 *  @ingroup smart_enums
 */
struct AllAttribs {

/// Conversion to any @p Enum type having the AllAttribs value.
/** Instances of the @ref oglplus::smart_enums::AllAttribs "AllAttribs"
 *  type are convertible to instances of any enumeration type having
 *  the @c AllAttribs value.
 */
template <typename Enum, Enum = Enum::AllAttribs> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the AllAttribs value.
/** Instances of the @c smart_enums::AllAttribs type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c AllAttribs value.
 */
template <typename Enum> friend bool operator==(Enum value, AllAttribs);

/// Non-equality comparison with any @p Enum type having the AllAttribs value.
/** Instances of the @c smart_enums::AllAttribs type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c AllAttribs value.
 */
template <typename Enum> friend bool operator!=(Enum value, AllAttribs);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c AllShaders value.
/**
 *  @see @ref oglplus::ProgramPipelineStage "ProgramPipelineStage"
 *
 *  @glsymbols
 *  @gldefref{ALL_SHADER_BITS}
 *
 *  @ingroup smart_enums
 */
struct AllShaders {

/// Conversion to any @p Enum type having the AllShaders value.
/** Instances of the @ref oglplus::smart_enums::AllShaders "AllShaders"
 *  type are convertible to instances of any enumeration type having
 *  the @c AllShaders value.
 */
template <typename Enum, Enum = Enum::AllShaders> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the AllShaders value.
/** Instances of the @c smart_enums::AllShaders type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c AllShaders value.
 */
template <typename Enum> friend bool operator==(Enum value, AllShaders);

/// Non-equality comparison with any @p Enum type having the AllShaders value.
/** Instances of the @c smart_enums::AllShaders type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c AllShaders value.
 */
template <typename Enum> friend bool operator!=(Enum value, AllShaders);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Alpha value.
/**
 *  @see @ref oglplus::PathNVColorFormat "PathNVColorFormat"
 *  @see @ref oglplus::TextureSwizzle "TextureSwizzle"
 *
 *  @glsymbols
 *  @gldefref{ALPHA}
 *
 *  @ingroup smart_enums
 */
struct Alpha {

/// Conversion to any @p Enum type having the Alpha value.
/** Instances of the @ref oglplus::smart_enums::Alpha "Alpha"
 *  type are convertible to instances of any enumeration type having
 *  the @c Alpha value.
 */
template <typename Enum, Enum = Enum::Alpha> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Alpha value.
/** Instances of the @c smart_enums::Alpha type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Alpha value.
 */
template <typename Enum> friend bool operator==(Enum value, Alpha);

/// Non-equality comparison with any @p Enum type having the Alpha value.
/** Instances of the @c smart_enums::Alpha type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Alpha value.
 */
template <typename Enum> friend bool operator!=(Enum value, Alpha);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c AlreadySignaled value.
/**
 *  @see @ref oglplus::SyncWaitResult "SyncWaitResult"
 *
 *  @glsymbols
 *  @gldefref{ALREADY_SIGNALED}
 *
 *  @ingroup smart_enums
 */
struct AlreadySignaled {

/// Conversion to any @p Enum type having the AlreadySignaled value.
/** Instances of the @ref oglplus::smart_enums::AlreadySignaled "AlreadySignaled"
 *  type are convertible to instances of any enumeration type having
 *  the @c AlreadySignaled value.
 */
template <typename Enum, Enum = Enum::AlreadySignaled> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the AlreadySignaled value.
/** Instances of the @c smart_enums::AlreadySignaled type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c AlreadySignaled value.
 */
template <typename Enum> friend bool operator==(Enum value, AlreadySignaled);

/// Non-equality comparison with any @p Enum type having the AlreadySignaled value.
/** Instances of the @c smart_enums::AlreadySignaled type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c AlreadySignaled value.
 */
template <typename Enum> friend bool operator!=(Enum value, AlreadySignaled);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Always value.
/**
 *  @see @ref oglplus::CompareFunction "CompareFunction"
 *
 *  @glsymbols
 *  @gldefref{ALWAYS}
 *
 *  @ingroup smart_enums
 */
struct Always {

/// Conversion to any @p Enum type having the Always value.
/** Instances of the @ref oglplus::smart_enums::Always "Always"
 *  type are convertible to instances of any enumeration type having
 *  the @c Always value.
 */
template <typename Enum, Enum = Enum::Always> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Always value.
/** Instances of the @c smart_enums::Always type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Always value.
 */
template <typename Enum> friend bool operator==(Enum value, Always);

/// Non-equality comparison with any @p Enum type having the Always value.
/** Instances of the @c smart_enums::Always type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Always value.
 */
template <typename Enum> friend bool operator!=(Enum value, Always);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c And value.
/**
 *  @see @ref oglplus::ColorLogicOperation "ColorLogicOperation"
 *
 *  @glsymbols
 *  @gldefref{AND}
 *
 *  @ingroup smart_enums
 */
struct And {

/// Conversion to any @p Enum type having the And value.
/** Instances of the @ref oglplus::smart_enums::And "And"
 *  type are convertible to instances of any enumeration type having
 *  the @c And value.
 */
template <typename Enum, Enum = Enum::And> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the And value.
/** Instances of the @c smart_enums::And type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c And value.
 */
template <typename Enum> friend bool operator==(Enum value, And);

/// Non-equality comparison with any @p Enum type having the And value.
/** Instances of the @c smart_enums::And type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c And value.
 */
template <typename Enum> friend bool operator!=(Enum value, And);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c AndInverted value.
/**
 *  @see @ref oglplus::ColorLogicOperation "ColorLogicOperation"
 *
 *  @glsymbols
 *  @gldefref{AND_INVERTED}
 *
 *  @ingroup smart_enums
 */
struct AndInverted {

/// Conversion to any @p Enum type having the AndInverted value.
/** Instances of the @ref oglplus::smart_enums::AndInverted "AndInverted"
 *  type are convertible to instances of any enumeration type having
 *  the @c AndInverted value.
 */
template <typename Enum, Enum = Enum::AndInverted> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the AndInverted value.
/** Instances of the @c smart_enums::AndInverted type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c AndInverted value.
 */
template <typename Enum> friend bool operator==(Enum value, AndInverted);

/// Non-equality comparison with any @p Enum type having the AndInverted value.
/** Instances of the @c smart_enums::AndInverted type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c AndInverted value.
 */
template <typename Enum> friend bool operator!=(Enum value, AndInverted);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c AndReverse value.
/**
 *  @see @ref oglplus::ColorLogicOperation "ColorLogicOperation"
 *
 *  @glsymbols
 *  @gldefref{AND_REVERSE}
 *
 *  @ingroup smart_enums
 */
struct AndReverse {

/// Conversion to any @p Enum type having the AndReverse value.
/** Instances of the @ref oglplus::smart_enums::AndReverse "AndReverse"
 *  type are convertible to instances of any enumeration type having
 *  the @c AndReverse value.
 */
template <typename Enum, Enum = Enum::AndReverse> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the AndReverse value.
/** Instances of the @c smart_enums::AndReverse type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c AndReverse value.
 */
template <typename Enum> friend bool operator==(Enum value, AndReverse);

/// Non-equality comparison with any @p Enum type having the AndReverse value.
/** Instances of the @c smart_enums::AndReverse type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c AndReverse value.
 */
template <typename Enum> friend bool operator!=(Enum value, AndReverse);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c AnySamplesPassed value.
/**
 *  @see @ref oglplus::QueryTarget "QueryTarget"
 *
 *  @glsymbols
 *  @gldefref{ANY_SAMPLES_PASSED}
 *
 *  @ingroup smart_enums
 */
struct AnySamplesPassed {

/// Conversion to any @p Enum type having the AnySamplesPassed value.
/** Instances of the @ref oglplus::smart_enums::AnySamplesPassed "AnySamplesPassed"
 *  type are convertible to instances of any enumeration type having
 *  the @c AnySamplesPassed value.
 */
template <typename Enum, Enum = Enum::AnySamplesPassed> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the AnySamplesPassed value.
/** Instances of the @c smart_enums::AnySamplesPassed type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c AnySamplesPassed value.
 */
template <typename Enum> friend bool operator==(Enum value, AnySamplesPassed);

/// Non-equality comparison with any @p Enum type having the AnySamplesPassed value.
/** Instances of the @c smart_enums::AnySamplesPassed type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c AnySamplesPassed value.
 */
template <typename Enum> friend bool operator!=(Enum value, AnySamplesPassed);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c API value.
/**
 *  @see @ref oglplus::DebugOutputARBSource "DebugOutputARBSource"
 *  @see @ref oglplus::DebugOutputSource "DebugOutputSource"
 *  @see @ref oglplus::DebugSource "DebugSource"
 *
 *  @glsymbols
 *  @gldefref{DEBUG_SOURCE_API}
 *  @gldefref{DEBUG_SOURCE_API_ARB}
 *
 *  @ingroup smart_enums
 */
struct API {

/// Conversion to any @p Enum type having the API value.
/** Instances of the @ref oglplus::smart_enums::API "API"
 *  type are convertible to instances of any enumeration type having
 *  the @c API value.
 */
template <typename Enum, Enum = Enum::API> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the API value.
/** Instances of the @c smart_enums::API type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c API value.
 */
template <typename Enum> friend bool operator==(Enum value, API);

/// Non-equality comparison with any @p Enum type having the API value.
/** Instances of the @c smart_enums::API type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c API value.
 */
template <typename Enum> friend bool operator!=(Enum value, API);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Application value.
/**
 *  @see @ref oglplus::DebugOutputARBSource "DebugOutputARBSource"
 *  @see @ref oglplus::DebugOutputSource "DebugOutputSource"
 *  @see @ref oglplus::DebugSource "DebugSource"
 *
 *  @glsymbols
 *  @gldefref{DEBUG_SOURCE_APPLICATION}
 *  @gldefref{DEBUG_SOURCE_APPLICATION_ARB}
 *
 *  @ingroup smart_enums
 */
struct Application {

/// Conversion to any @p Enum type having the Application value.
/** Instances of the @ref oglplus::smart_enums::Application "Application"
 *  type are convertible to instances of any enumeration type having
 *  the @c Application value.
 */
template <typename Enum, Enum = Enum::Application> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Application value.
/** Instances of the @c smart_enums::Application type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Application value.
 */
template <typename Enum> friend bool operator==(Enum value, Application);

/// Non-equality comparison with any @p Enum type having the Application value.
/** Instances of the @c smart_enums::Application type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Application value.
 */
template <typename Enum> friend bool operator!=(Enum value, Application);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ArcTo value.
/**
 *  @see @ref oglplus::PathNVCommand "PathNVCommand"
 *
 *  @glsymbols
 *  @gldefref{ARC_TO_NV}
 *
 *  @ingroup smart_enums
 */
struct ArcTo {

/// Conversion to any @p Enum type having the ArcTo value.
/** Instances of the @ref oglplus::smart_enums::ArcTo "ArcTo"
 *  type are convertible to instances of any enumeration type having
 *  the @c ArcTo value.
 */
template <typename Enum, Enum = Enum::ArcTo> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ArcTo value.
/** Instances of the @c smart_enums::ArcTo type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ArcTo value.
 */
template <typename Enum> friend bool operator==(Enum value, ArcTo);

/// Non-equality comparison with any @p Enum type having the ArcTo value.
/** Instances of the @c smart_enums::ArcTo type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ArcTo value.
 */
template <typename Enum> friend bool operator!=(Enum value, ArcTo);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Array value.
/**
 *  @see @ref oglplus::BufferTarget "BufferTarget"
 *
 *  @glsymbols
 *  @gldefref{ARRAY_BUFFER}
 *
 *  @ingroup smart_enums
 */
struct Array {

/// Conversion to any @p Enum type having the Array value.
/** Instances of the @ref oglplus::smart_enums::Array "Array"
 *  type are convertible to instances of any enumeration type having
 *  the @c Array value.
 */
template <typename Enum, Enum = Enum::Array> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Array value.
/** Instances of the @c smart_enums::Array type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Array value.
 */
template <typename Enum> friend bool operator==(Enum value, Array);

/// Non-equality comparison with any @p Enum type having the Array value.
/** Instances of the @c smart_enums::Array type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Array value.
 */
template <typename Enum> friend bool operator!=(Enum value, Array);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ArraySize value.
/**
 *  @see @ref oglplus::ProgramResourceProperty "ProgramResourceProperty"
 *
 *  @glsymbols
 *  @gldefref{ARRAY_SIZE}
 *
 *  @ingroup smart_enums
 */
struct ArraySize {

/// Conversion to any @p Enum type having the ArraySize value.
/** Instances of the @ref oglplus::smart_enums::ArraySize "ArraySize"
 *  type are convertible to instances of any enumeration type having
 *  the @c ArraySize value.
 */
template <typename Enum, Enum = Enum::ArraySize> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ArraySize value.
/** Instances of the @c smart_enums::ArraySize type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ArraySize value.
 */
template <typename Enum> friend bool operator==(Enum value, ArraySize);

/// Non-equality comparison with any @p Enum type having the ArraySize value.
/** Instances of the @c smart_enums::ArraySize type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ArraySize value.
 */
template <typename Enum> friend bool operator!=(Enum value, ArraySize);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ArrayStride value.
/**
 *  @see @ref oglplus::ProgramResourceProperty "ProgramResourceProperty"
 *
 *  @glsymbols
 *  @gldefref{ARRAY_STRIDE}
 *
 *  @ingroup smart_enums
 */
struct ArrayStride {

/// Conversion to any @p Enum type having the ArrayStride value.
/** Instances of the @ref oglplus::smart_enums::ArrayStride "ArrayStride"
 *  type are convertible to instances of any enumeration type having
 *  the @c ArrayStride value.
 */
template <typename Enum, Enum = Enum::ArrayStride> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ArrayStride value.
/** Instances of the @c smart_enums::ArrayStride type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ArrayStride value.
 */
template <typename Enum> friend bool operator==(Enum value, ArrayStride);

/// Non-equality comparison with any @p Enum type having the ArrayStride value.
/** Instances of the @c smart_enums::ArrayStride type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ArrayStride value.
 */
template <typename Enum> friend bool operator!=(Enum value, ArrayStride);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c AtomicCounter value.
/**
 *  @see @ref oglplus::BufferIndexedTarget "BufferIndexedTarget"
 *  @see @ref oglplus::BufferTarget "BufferTarget"
 *  @see @ref oglplus::MemoryBarrierBit "MemoryBarrierBit"
 *
 *  @glsymbols
 *  @gldefref{ATOMIC_COUNTER_BARRIER_BIT}
 *  @gldefref{ATOMIC_COUNTER_BUFFER}
 *
 *  @ingroup smart_enums
 */
struct AtomicCounter {

/// Conversion to any @p Enum type having the AtomicCounter value.
/** Instances of the @ref oglplus::smart_enums::AtomicCounter "AtomicCounter"
 *  type are convertible to instances of any enumeration type having
 *  the @c AtomicCounter value.
 */
template <typename Enum, Enum = Enum::AtomicCounter> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the AtomicCounter value.
/** Instances of the @c smart_enums::AtomicCounter type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c AtomicCounter value.
 */
template <typename Enum> friend bool operator==(Enum value, AtomicCounter);

/// Non-equality comparison with any @p Enum type having the AtomicCounter value.
/** Instances of the @c smart_enums::AtomicCounter type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c AtomicCounter value.
 */
template <typename Enum> friend bool operator!=(Enum value, AtomicCounter);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c AtomicCounterBuffer value.
/**
 *  @see @ref oglplus::ProgramInterface "ProgramInterface"
 *
 *  @glsymbols
 *  @gldefref{ATOMIC_COUNTER_BUFFER}
 *
 *  @ingroup smart_enums
 */
struct AtomicCounterBuffer {

/// Conversion to any @p Enum type having the AtomicCounterBuffer value.
/** Instances of the @ref oglplus::smart_enums::AtomicCounterBuffer "AtomicCounterBuffer"
 *  type are convertible to instances of any enumeration type having
 *  the @c AtomicCounterBuffer value.
 */
template <typename Enum, Enum = Enum::AtomicCounterBuffer> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the AtomicCounterBuffer value.
/** Instances of the @c smart_enums::AtomicCounterBuffer type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c AtomicCounterBuffer value.
 */
template <typename Enum> friend bool operator==(Enum value, AtomicCounterBuffer);

/// Non-equality comparison with any @p Enum type having the AtomicCounterBuffer value.
/** Instances of the @c smart_enums::AtomicCounterBuffer type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c AtomicCounterBuffer value.
 */
template <typename Enum> friend bool operator!=(Enum value, AtomicCounterBuffer);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c AtomicCounterBufferIndex value.
/**
 *  @see @ref oglplus::ProgramResourceProperty "ProgramResourceProperty"
 *
 *  @glsymbols
 *  @gldefref{ATOMIC_COUNTER_BUFFER_INDEX}
 *
 *  @ingroup smart_enums
 */
struct AtomicCounterBufferIndex {

/// Conversion to any @p Enum type having the AtomicCounterBufferIndex value.
/** Instances of the @ref oglplus::smart_enums::AtomicCounterBufferIndex "AtomicCounterBufferIndex"
 *  type are convertible to instances of any enumeration type having
 *  the @c AtomicCounterBufferIndex value.
 */
template <typename Enum, Enum = Enum::AtomicCounterBufferIndex> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the AtomicCounterBufferIndex value.
/** Instances of the @c smart_enums::AtomicCounterBufferIndex type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c AtomicCounterBufferIndex value.
 */
template <typename Enum> friend bool operator==(Enum value, AtomicCounterBufferIndex);

/// Non-equality comparison with any @p Enum type having the AtomicCounterBufferIndex value.
/** Instances of the @c smart_enums::AtomicCounterBufferIndex type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c AtomicCounterBufferIndex value.
 */
template <typename Enum> friend bool operator!=(Enum value, AtomicCounterBufferIndex);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c B value.
/**
 *  @see @ref oglplus::TextureSwizzleCoord "TextureSwizzleCoord"
 *
 *  @glsymbols
 *  @gldefref{TEXTURE_SWIZZLE_B}
 *
 *  @ingroup smart_enums
 */
struct B {

/// Conversion to any @p Enum type having the B value.
/** Instances of the @ref oglplus::smart_enums::B "B"
 *  type are convertible to instances of any enumeration type having
 *  the @c B value.
 */
template <typename Enum, Enum = Enum::B> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the B value.
/** Instances of the @c smart_enums::B type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c B value.
 */
template <typename Enum> friend bool operator==(Enum value, B);

/// Non-equality comparison with any @p Enum type having the B value.
/** Instances of the @c smart_enums::B type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c B value.
 */
template <typename Enum> friend bool operator!=(Enum value, B);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Back value.
/**
 *  @see @ref oglplus::ColorBuffer "ColorBuffer"
 *  @see @ref oglplus::Face "Face"
 *
 *  @glsymbols
 *  @gldefref{BACK}
 *
 *  @ingroup smart_enums
 */
struct Back {

/// Conversion to any @p Enum type having the Back value.
/** Instances of the @ref oglplus::smart_enums::Back "Back"
 *  type are convertible to instances of any enumeration type having
 *  the @c Back value.
 */
template <typename Enum, Enum = Enum::Back> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Back value.
/** Instances of the @c smart_enums::Back type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Back value.
 */
template <typename Enum> friend bool operator==(Enum value, Back);

/// Non-equality comparison with any @p Enum type having the Back value.
/** Instances of the @c smart_enums::Back type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Back value.
 */
template <typename Enum> friend bool operator!=(Enum value, Back);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c BackLeft value.
/**
 *  @see @ref oglplus::ColorBuffer "ColorBuffer"
 *
 *  @glsymbols
 *  @gldefref{BACK_LEFT}
 *
 *  @ingroup smart_enums
 */
struct BackLeft {

/// Conversion to any @p Enum type having the BackLeft value.
/** Instances of the @ref oglplus::smart_enums::BackLeft "BackLeft"
 *  type are convertible to instances of any enumeration type having
 *  the @c BackLeft value.
 */
template <typename Enum, Enum = Enum::BackLeft> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the BackLeft value.
/** Instances of the @c smart_enums::BackLeft type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c BackLeft value.
 */
template <typename Enum> friend bool operator==(Enum value, BackLeft);

/// Non-equality comparison with any @p Enum type having the BackLeft value.
/** Instances of the @c smart_enums::BackLeft type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c BackLeft value.
 */
template <typename Enum> friend bool operator!=(Enum value, BackLeft);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c BackRight value.
/**
 *  @see @ref oglplus::ColorBuffer "ColorBuffer"
 *
 *  @glsymbols
 *  @gldefref{BACK_RIGHT}
 *
 *  @ingroup smart_enums
 */
struct BackRight {

/// Conversion to any @p Enum type having the BackRight value.
/** Instances of the @ref oglplus::smart_enums::BackRight "BackRight"
 *  type are convertible to instances of any enumeration type having
 *  the @c BackRight value.
 */
template <typename Enum, Enum = Enum::BackRight> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the BackRight value.
/** Instances of the @c smart_enums::BackRight type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c BackRight value.
 */
template <typename Enum> friend bool operator==(Enum value, BackRight);

/// Non-equality comparison with any @p Enum type having the BackRight value.
/** Instances of the @c smart_enums::BackRight type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c BackRight value.
 */
template <typename Enum> friend bool operator!=(Enum value, BackRight);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Bevel value.
/**
 *  @see @ref oglplus::PathNVJoinStyle "PathNVJoinStyle"
 *
 *  @glsymbols
 *  @gldefref{BEVEL_NV}
 *
 *  @ingroup smart_enums
 */
struct Bevel {

/// Conversion to any @p Enum type having the Bevel value.
/** Instances of the @ref oglplus::smart_enums::Bevel "Bevel"
 *  type are convertible to instances of any enumeration type having
 *  the @c Bevel value.
 */
template <typename Enum, Enum = Enum::Bevel> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Bevel value.
/** Instances of the @c smart_enums::Bevel type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Bevel value.
 */
template <typename Enum> friend bool operator==(Enum value, Bevel);

/// Non-equality comparison with any @p Enum type having the Bevel value.
/** Instances of the @c smart_enums::Bevel type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Bevel value.
 */
template <typename Enum> friend bool operator!=(Enum value, Bevel);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c BGR value.
/**
 *  @see @ref oglplus::PixelDataFormat "PixelDataFormat"
 *
 *  @glsymbols
 *  @gldefref{BGR}
 *
 *  @ingroup smart_enums
 */
struct BGR {

/// Conversion to any @p Enum type having the BGR value.
/** Instances of the @ref oglplus::smart_enums::BGR "BGR"
 *  type are convertible to instances of any enumeration type having
 *  the @c BGR value.
 */
template <typename Enum, Enum = Enum::BGR> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the BGR value.
/** Instances of the @c smart_enums::BGR type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c BGR value.
 */
template <typename Enum> friend bool operator==(Enum value, BGR);

/// Non-equality comparison with any @p Enum type having the BGR value.
/** Instances of the @c smart_enums::BGR type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c BGR value.
 */
template <typename Enum> friend bool operator!=(Enum value, BGR);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c BGRA value.
/**
 *  @see @ref oglplus::PixelDataFormat "PixelDataFormat"
 *
 *  @glsymbols
 *  @gldefref{BGRA}
 *
 *  @ingroup smart_enums
 */
struct BGRA {

/// Conversion to any @p Enum type having the BGRA value.
/** Instances of the @ref oglplus::smart_enums::BGRA "BGRA"
 *  type are convertible to instances of any enumeration type having
 *  the @c BGRA value.
 */
template <typename Enum, Enum = Enum::BGRA> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the BGRA value.
/** Instances of the @c smart_enums::BGRA type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c BGRA value.
 */
template <typename Enum> friend bool operator==(Enum value, BGRA);

/// Non-equality comparison with any @p Enum type having the BGRA value.
/** Instances of the @c smart_enums::BGRA type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c BGRA value.
 */
template <typename Enum> friend bool operator!=(Enum value, BGRA);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c BGRAInteger value.
/**
 *  @see @ref oglplus::PixelDataFormat "PixelDataFormat"
 *
 *  @glsymbols
 *  @gldefref{BGRA_INTEGER}
 *
 *  @ingroup smart_enums
 */
struct BGRAInteger {

/// Conversion to any @p Enum type having the BGRAInteger value.
/** Instances of the @ref oglplus::smart_enums::BGRAInteger "BGRAInteger"
 *  type are convertible to instances of any enumeration type having
 *  the @c BGRAInteger value.
 */
template <typename Enum, Enum = Enum::BGRAInteger> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the BGRAInteger value.
/** Instances of the @c smart_enums::BGRAInteger type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c BGRAInteger value.
 */
template <typename Enum> friend bool operator==(Enum value, BGRAInteger);

/// Non-equality comparison with any @p Enum type having the BGRAInteger value.
/** Instances of the @c smart_enums::BGRAInteger type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c BGRAInteger value.
 */
template <typename Enum> friend bool operator!=(Enum value, BGRAInteger);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c BGRInteger value.
/**
 *  @see @ref oglplus::PixelDataFormat "PixelDataFormat"
 *
 *  @glsymbols
 *  @gldefref{BGR_INTEGER}
 *
 *  @ingroup smart_enums
 */
struct BGRInteger {

/// Conversion to any @p Enum type having the BGRInteger value.
/** Instances of the @ref oglplus::smart_enums::BGRInteger "BGRInteger"
 *  type are convertible to instances of any enumeration type having
 *  the @c BGRInteger value.
 */
template <typename Enum, Enum = Enum::BGRInteger> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the BGRInteger value.
/** Instances of the @c smart_enums::BGRInteger type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c BGRInteger value.
 */
template <typename Enum> friend bool operator==(Enum value, BGRInteger);

/// Non-equality comparison with any @p Enum type having the BGRInteger value.
/** Instances of the @c smart_enums::BGRInteger type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c BGRInteger value.
 */
template <typename Enum> friend bool operator!=(Enum value, BGRInteger);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Blend value.
/**
 *  @see @ref oglplus::Capability "Capability"
 *
 *  @glsymbols
 *  @gldefref{BLEND}
 *
 *  @ingroup smart_enums
 */
struct Blend {

/// Conversion to any @p Enum type having the Blend value.
/** Instances of the @ref oglplus::smart_enums::Blend "Blend"
 *  type are convertible to instances of any enumeration type having
 *  the @c Blend value.
 */
template <typename Enum, Enum = Enum::Blend> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Blend value.
/** Instances of the @c smart_enums::Blend type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Blend value.
 */
template <typename Enum> friend bool operator==(Enum value, Blend);

/// Non-equality comparison with any @p Enum type having the Blend value.
/** Instances of the @c smart_enums::Blend type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Blend value.
 */
template <typename Enum> friend bool operator!=(Enum value, Blend);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c BlockIndex value.
/**
 *  @see @ref oglplus::ProgramResourceProperty "ProgramResourceProperty"
 *
 *  @glsymbols
 *  @gldefref{BLOCK_INDEX}
 *
 *  @ingroup smart_enums
 */
struct BlockIndex {

/// Conversion to any @p Enum type having the BlockIndex value.
/** Instances of the @ref oglplus::smart_enums::BlockIndex "BlockIndex"
 *  type are convertible to instances of any enumeration type having
 *  the @c BlockIndex value.
 */
template <typename Enum, Enum = Enum::BlockIndex> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the BlockIndex value.
/** Instances of the @c smart_enums::BlockIndex type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c BlockIndex value.
 */
template <typename Enum> friend bool operator==(Enum value, BlockIndex);

/// Non-equality comparison with any @p Enum type having the BlockIndex value.
/** Instances of the @c smart_enums::BlockIndex type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c BlockIndex value.
 */
template <typename Enum> friend bool operator!=(Enum value, BlockIndex);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Blue value.
/**
 *  @see @ref oglplus::PixelDataFormat "PixelDataFormat"
 *  @see @ref oglplus::TextureSwizzle "TextureSwizzle"
 *
 *  @glsymbols
 *  @gldefref{BLUE}
 *
 *  @ingroup smart_enums
 */
struct Blue {

/// Conversion to any @p Enum type having the Blue value.
/** Instances of the @ref oglplus::smart_enums::Blue "Blue"
 *  type are convertible to instances of any enumeration type having
 *  the @c Blue value.
 */
template <typename Enum, Enum = Enum::Blue> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Blue value.
/** Instances of the @c smart_enums::Blue type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Blue value.
 */
template <typename Enum> friend bool operator==(Enum value, Blue);

/// Non-equality comparison with any @p Enum type having the Blue value.
/** Instances of the @c smart_enums::Blue type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Blue value.
 */
template <typename Enum> friend bool operator!=(Enum value, Blue);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c BlueInteger value.
/**
 *  @see @ref oglplus::PixelDataFormat "PixelDataFormat"
 *
 *  @glsymbols
 *  @gldefref{BLUE_INTEGER}
 *
 *  @ingroup smart_enums
 */
struct BlueInteger {

/// Conversion to any @p Enum type having the BlueInteger value.
/** Instances of the @ref oglplus::smart_enums::BlueInteger "BlueInteger"
 *  type are convertible to instances of any enumeration type having
 *  the @c BlueInteger value.
 */
template <typename Enum, Enum = Enum::BlueInteger> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the BlueInteger value.
/** Instances of the @c smart_enums::BlueInteger type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c BlueInteger value.
 */
template <typename Enum> friend bool operator==(Enum value, BlueInteger);

/// Non-equality comparison with any @p Enum type having the BlueInteger value.
/** Instances of the @c smart_enums::BlueInteger type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c BlueInteger value.
 */
template <typename Enum> friend bool operator!=(Enum value, BlueInteger);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Bold value.
/**
 *  @see @ref oglplus::PathNVFontStyle "PathNVFontStyle"
 *
 *  @glsymbols
 *  @gldefref{BOLD_BIT_NV}
 *
 *  @ingroup smart_enums
 */
struct Bold {

/// Conversion to any @p Enum type having the Bold value.
/** Instances of the @ref oglplus::smart_enums::Bold "Bold"
 *  type are convertible to instances of any enumeration type having
 *  the @c Bold value.
 */
template <typename Enum, Enum = Enum::Bold> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Bold value.
/** Instances of the @c smart_enums::Bold type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Bold value.
 */
template <typename Enum> friend bool operator==(Enum value, Bold);

/// Non-equality comparison with any @p Enum type having the Bold value.
/** Instances of the @c smart_enums::Bold type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Bold value.
 */
template <typename Enum> friend bool operator!=(Enum value, Bold);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Bool value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{BOOL}
 *
 *  @ingroup smart_enums
 */
struct Bool {

/// Conversion to any @p Enum type having the Bool value.
/** Instances of the @ref oglplus::smart_enums::Bool "Bool"
 *  type are convertible to instances of any enumeration type having
 *  the @c Bool value.
 */
template <typename Enum, Enum = Enum::Bool> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Bool value.
/** Instances of the @c smart_enums::Bool type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Bool value.
 */
template <typename Enum> friend bool operator==(Enum value, Bool);

/// Non-equality comparison with any @p Enum type having the Bool value.
/** Instances of the @c smart_enums::Bool type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Bool value.
 */
template <typename Enum> friend bool operator!=(Enum value, Bool);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c BoolVec2 value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{BOOL_VEC2}
 *
 *  @ingroup smart_enums
 */
struct BoolVec2 {

/// Conversion to any @p Enum type having the BoolVec2 value.
/** Instances of the @ref oglplus::smart_enums::BoolVec2 "BoolVec2"
 *  type are convertible to instances of any enumeration type having
 *  the @c BoolVec2 value.
 */
template <typename Enum, Enum = Enum::BoolVec2> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the BoolVec2 value.
/** Instances of the @c smart_enums::BoolVec2 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c BoolVec2 value.
 */
template <typename Enum> friend bool operator==(Enum value, BoolVec2);

/// Non-equality comparison with any @p Enum type having the BoolVec2 value.
/** Instances of the @c smart_enums::BoolVec2 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c BoolVec2 value.
 */
template <typename Enum> friend bool operator!=(Enum value, BoolVec2);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c BoolVec3 value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{BOOL_VEC3}
 *
 *  @ingroup smart_enums
 */
struct BoolVec3 {

/// Conversion to any @p Enum type having the BoolVec3 value.
/** Instances of the @ref oglplus::smart_enums::BoolVec3 "BoolVec3"
 *  type are convertible to instances of any enumeration type having
 *  the @c BoolVec3 value.
 */
template <typename Enum, Enum = Enum::BoolVec3> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the BoolVec3 value.
/** Instances of the @c smart_enums::BoolVec3 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c BoolVec3 value.
 */
template <typename Enum> friend bool operator==(Enum value, BoolVec3);

/// Non-equality comparison with any @p Enum type having the BoolVec3 value.
/** Instances of the @c smart_enums::BoolVec3 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c BoolVec3 value.
 */
template <typename Enum> friend bool operator!=(Enum value, BoolVec3);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c BoolVec4 value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{BOOL_VEC4}
 *
 *  @ingroup smart_enums
 */
struct BoolVec4 {

/// Conversion to any @p Enum type having the BoolVec4 value.
/** Instances of the @ref oglplus::smart_enums::BoolVec4 "BoolVec4"
 *  type are convertible to instances of any enumeration type having
 *  the @c BoolVec4 value.
 */
template <typename Enum, Enum = Enum::BoolVec4> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the BoolVec4 value.
/** Instances of the @c smart_enums::BoolVec4 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c BoolVec4 value.
 */
template <typename Enum> friend bool operator==(Enum value, BoolVec4);

/// Non-equality comparison with any @p Enum type having the BoolVec4 value.
/** Instances of the @c smart_enums::BoolVec4 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c BoolVec4 value.
 */
template <typename Enum> friend bool operator!=(Enum value, BoolVec4);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c BoundingBox value.
/**
 *  @see @ref oglplus::PathNVFillCoverMode "PathNVFillCoverMode"
 *  @see @ref oglplus::PathNVStrokeCoverMode "PathNVStrokeCoverMode"
 *
 *  @glsymbols
 *  @gldefref{BOUNDING_BOX_NV}
 *
 *  @ingroup smart_enums
 */
struct BoundingBox {

/// Conversion to any @p Enum type having the BoundingBox value.
/** Instances of the @ref oglplus::smart_enums::BoundingBox "BoundingBox"
 *  type are convertible to instances of any enumeration type having
 *  the @c BoundingBox value.
 */
template <typename Enum, Enum = Enum::BoundingBox> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the BoundingBox value.
/** Instances of the @c smart_enums::BoundingBox type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c BoundingBox value.
 */
template <typename Enum> friend bool operator==(Enum value, BoundingBox);

/// Non-equality comparison with any @p Enum type having the BoundingBox value.
/** Instances of the @c smart_enums::BoundingBox type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c BoundingBox value.
 */
template <typename Enum> friend bool operator!=(Enum value, BoundingBox);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c BoundingBoxOfBoundingBoxes value.
/**
 *  @see @ref oglplus::PathNVFillCoverMode "PathNVFillCoverMode"
 *  @see @ref oglplus::PathNVStrokeCoverMode "PathNVStrokeCoverMode"
 *
 *  @glsymbols
 *  @gldefref{BOUNDING_BOX_OF_BOUNDING_BOXES_NV}
 *
 *  @ingroup smart_enums
 */
struct BoundingBoxOfBoundingBoxes {

/// Conversion to any @p Enum type having the BoundingBoxOfBoundingBoxes value.
/** Instances of the @ref oglplus::smart_enums::BoundingBoxOfBoundingBoxes "BoundingBoxOfBoundingBoxes"
 *  type are convertible to instances of any enumeration type having
 *  the @c BoundingBoxOfBoundingBoxes value.
 */
template <typename Enum, Enum = Enum::BoundingBoxOfBoundingBoxes> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the BoundingBoxOfBoundingBoxes value.
/** Instances of the @c smart_enums::BoundingBoxOfBoundingBoxes type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c BoundingBoxOfBoundingBoxes value.
 */
template <typename Enum> friend bool operator==(Enum value, BoundingBoxOfBoundingBoxes);

/// Non-equality comparison with any @p Enum type having the BoundingBoxOfBoundingBoxes value.
/** Instances of the @c smart_enums::BoundingBoxOfBoundingBoxes type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c BoundingBoxOfBoundingBoxes value.
 */
template <typename Enum> friend bool operator!=(Enum value, BoundingBoxOfBoundingBoxes);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Buffer value.
/**
 *  @see @ref oglplus::ObjectType "ObjectType"
 *  @see @ref oglplus::TextureTarget "TextureTarget"
 *
 *  @glsymbols
 *  @gldefref{BUFFER}
 *  @gldefref{TEXTURE_BUFFER}
 *
 *  @ingroup smart_enums
 */
struct Buffer {

/// Conversion to any @p Enum type having the Buffer value.
/** Instances of the @ref oglplus::smart_enums::Buffer "Buffer"
 *  type are convertible to instances of any enumeration type having
 *  the @c Buffer value.
 */
template <typename Enum, Enum = Enum::Buffer> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Buffer value.
/** Instances of the @c smart_enums::Buffer type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Buffer value.
 */
template <typename Enum> friend bool operator==(Enum value, Buffer);

/// Non-equality comparison with any @p Enum type having the Buffer value.
/** Instances of the @c smart_enums::Buffer type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Buffer value.
 */
template <typename Enum> friend bool operator!=(Enum value, Buffer);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c BufferBinding value.
/**
 *  @see @ref oglplus::ProgramResourceProperty "ProgramResourceProperty"
 *
 *  @glsymbols
 *  @gldefref{BUFFER_BINDING}
 *
 *  @ingroup smart_enums
 */
struct BufferBinding {

/// Conversion to any @p Enum type having the BufferBinding value.
/** Instances of the @ref oglplus::smart_enums::BufferBinding "BufferBinding"
 *  type are convertible to instances of any enumeration type having
 *  the @c BufferBinding value.
 */
template <typename Enum, Enum = Enum::BufferBinding> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the BufferBinding value.
/** Instances of the @c smart_enums::BufferBinding type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c BufferBinding value.
 */
template <typename Enum> friend bool operator==(Enum value, BufferBinding);

/// Non-equality comparison with any @p Enum type having the BufferBinding value.
/** Instances of the @c smart_enums::BufferBinding type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c BufferBinding value.
 */
template <typename Enum> friend bool operator!=(Enum value, BufferBinding);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c BufferDataSize value.
/**
 *  @see @ref oglplus::ProgramResourceProperty "ProgramResourceProperty"
 *
 *  @glsymbols
 *  @gldefref{BUFFER_DATA_SIZE}
 *
 *  @ingroup smart_enums
 */
struct BufferDataSize {

/// Conversion to any @p Enum type having the BufferDataSize value.
/** Instances of the @ref oglplus::smart_enums::BufferDataSize "BufferDataSize"
 *  type are convertible to instances of any enumeration type having
 *  the @c BufferDataSize value.
 */
template <typename Enum, Enum = Enum::BufferDataSize> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the BufferDataSize value.
/** Instances of the @c smart_enums::BufferDataSize type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c BufferDataSize value.
 */
template <typename Enum> friend bool operator==(Enum value, BufferDataSize);

/// Non-equality comparison with any @p Enum type having the BufferDataSize value.
/** Instances of the @c smart_enums::BufferDataSize type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c BufferDataSize value.
 */
template <typename Enum> friend bool operator!=(Enum value, BufferDataSize);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c BufferUpdate value.
/**
 *  @see @ref oglplus::MemoryBarrierBit "MemoryBarrierBit"
 *
 *  @glsymbols
 *  @gldefref{BUFFER_UPDATE_BARRIER_BIT}
 *
 *  @ingroup smart_enums
 */
struct BufferUpdate {

/// Conversion to any @p Enum type having the BufferUpdate value.
/** Instances of the @ref oglplus::smart_enums::BufferUpdate "BufferUpdate"
 *  type are convertible to instances of any enumeration type having
 *  the @c BufferUpdate value.
 */
template <typename Enum, Enum = Enum::BufferUpdate> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the BufferUpdate value.
/** Instances of the @c smart_enums::BufferUpdate type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c BufferUpdate value.
 */
template <typename Enum> friend bool operator==(Enum value, BufferUpdate);

/// Non-equality comparison with any @p Enum type having the BufferUpdate value.
/** Instances of the @c smart_enums::BufferUpdate type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c BufferUpdate value.
 */
template <typename Enum> friend bool operator!=(Enum value, BufferUpdate);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c BufferVariable value.
/**
 *  @see @ref oglplus::ProgramInterface "ProgramInterface"
 *
 *  @glsymbols
 *  @gldefref{BUFFER_VARIABLE}
 *
 *  @ingroup smart_enums
 */
struct BufferVariable {

/// Conversion to any @p Enum type having the BufferVariable value.
/** Instances of the @ref oglplus::smart_enums::BufferVariable "BufferVariable"
 *  type are convertible to instances of any enumeration type having
 *  the @c BufferVariable value.
 */
template <typename Enum, Enum = Enum::BufferVariable> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the BufferVariable value.
/** Instances of the @c smart_enums::BufferVariable type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c BufferVariable value.
 */
template <typename Enum> friend bool operator==(Enum value, BufferVariable);

/// Non-equality comparison with any @p Enum type having the BufferVariable value.
/** Instances of the @c smart_enums::BufferVariable type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c BufferVariable value.
 */
template <typename Enum> friend bool operator!=(Enum value, BufferVariable);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Byte value.
/**
 *  @see @ref oglplus::DataType "DataType"
 *  @see @ref oglplus::PixelDataType "PixelDataType"
 *
 *  @glsymbols
 *  @gldefref{BYTE}
 *
 *  @ingroup smart_enums
 */
struct Byte {

/// Conversion to any @p Enum type having the Byte value.
/** Instances of the @ref oglplus::smart_enums::Byte "Byte"
 *  type are convertible to instances of any enumeration type having
 *  the @c Byte value.
 */
template <typename Enum, Enum = Enum::Byte> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Byte value.
/** Instances of the @c smart_enums::Byte type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Byte value.
 */
template <typename Enum> friend bool operator==(Enum value, Byte);

/// Non-equality comparison with any @p Enum type having the Byte value.
/** Instances of the @c smart_enums::Byte type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Byte value.
 */
template <typename Enum> friend bool operator!=(Enum value, Byte);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CCW value.
/**
 *  @see @ref oglplus::FaceOrientation "FaceOrientation"
 *
 *  @glsymbols
 *  @gldefref{CCW}
 *
 *  @ingroup smart_enums
 */
struct CCW {

/// Conversion to any @p Enum type having the CCW value.
/** Instances of the @ref oglplus::smart_enums::CCW "CCW"
 *  type are convertible to instances of any enumeration type having
 *  the @c CCW value.
 */
template <typename Enum, Enum = Enum::CCW> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CCW value.
/** Instances of the @c smart_enums::CCW type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CCW value.
 */
template <typename Enum> friend bool operator==(Enum value, CCW);

/// Non-equality comparison with any @p Enum type having the CCW value.
/** Instances of the @c smart_enums::CCW type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CCW value.
 */
template <typename Enum> friend bool operator!=(Enum value, CCW);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CircularCCWArcTo value.
/**
 *  @see @ref oglplus::PathNVCommand "PathNVCommand"
 *
 *  @glsymbols
 *  @gldefref{CIRCULAR_CCW_ARC_TO_NV}
 *
 *  @ingroup smart_enums
 */
struct CircularCCWArcTo {

/// Conversion to any @p Enum type having the CircularCCWArcTo value.
/** Instances of the @ref oglplus::smart_enums::CircularCCWArcTo "CircularCCWArcTo"
 *  type are convertible to instances of any enumeration type having
 *  the @c CircularCCWArcTo value.
 */
template <typename Enum, Enum = Enum::CircularCCWArcTo> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CircularCCWArcTo value.
/** Instances of the @c smart_enums::CircularCCWArcTo type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CircularCCWArcTo value.
 */
template <typename Enum> friend bool operator==(Enum value, CircularCCWArcTo);

/// Non-equality comparison with any @p Enum type having the CircularCCWArcTo value.
/** Instances of the @c smart_enums::CircularCCWArcTo type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CircularCCWArcTo value.
 */
template <typename Enum> friend bool operator!=(Enum value, CircularCCWArcTo);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CircularCWArcTo value.
/**
 *  @see @ref oglplus::PathNVCommand "PathNVCommand"
 *
 *  @glsymbols
 *  @gldefref{CIRCULAR_CW_ARC_TO_NV}
 *
 *  @ingroup smart_enums
 */
struct CircularCWArcTo {

/// Conversion to any @p Enum type having the CircularCWArcTo value.
/** Instances of the @ref oglplus::smart_enums::CircularCWArcTo "CircularCWArcTo"
 *  type are convertible to instances of any enumeration type having
 *  the @c CircularCWArcTo value.
 */
template <typename Enum, Enum = Enum::CircularCWArcTo> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CircularCWArcTo value.
/** Instances of the @c smart_enums::CircularCWArcTo type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CircularCWArcTo value.
 */
template <typename Enum> friend bool operator==(Enum value, CircularCWArcTo);

/// Non-equality comparison with any @p Enum type having the CircularCWArcTo value.
/** Instances of the @c smart_enums::CircularCWArcTo type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CircularCWArcTo value.
 */
template <typename Enum> friend bool operator!=(Enum value, CircularCWArcTo);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CircularTangentArcTo value.
/**
 *  @see @ref oglplus::PathNVCommand "PathNVCommand"
 *
 *  @glsymbols
 *  @gldefref{CIRCULAR_TANGENT_ARC_TO_NV}
 *
 *  @ingroup smart_enums
 */
struct CircularTangentArcTo {

/// Conversion to any @p Enum type having the CircularTangentArcTo value.
/** Instances of the @ref oglplus::smart_enums::CircularTangentArcTo "CircularTangentArcTo"
 *  type are convertible to instances of any enumeration type having
 *  the @c CircularTangentArcTo value.
 */
template <typename Enum, Enum = Enum::CircularTangentArcTo> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CircularTangentArcTo value.
/** Instances of the @c smart_enums::CircularTangentArcTo type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CircularTangentArcTo value.
 */
template <typename Enum> friend bool operator==(Enum value, CircularTangentArcTo);

/// Non-equality comparison with any @p Enum type having the CircularTangentArcTo value.
/** Instances of the @c smart_enums::CircularTangentArcTo type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CircularTangentArcTo value.
 */
template <typename Enum> friend bool operator!=(Enum value, CircularTangentArcTo);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ClampToBorder value.
/**
 *  @see @ref oglplus::TextureWrap "TextureWrap"
 *
 *  @glsymbols
 *  @gldefref{CLAMP_TO_BORDER}
 *
 *  @ingroup smart_enums
 */
struct ClampToBorder {

/// Conversion to any @p Enum type having the ClampToBorder value.
/** Instances of the @ref oglplus::smart_enums::ClampToBorder "ClampToBorder"
 *  type are convertible to instances of any enumeration type having
 *  the @c ClampToBorder value.
 */
template <typename Enum, Enum = Enum::ClampToBorder> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ClampToBorder value.
/** Instances of the @c smart_enums::ClampToBorder type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ClampToBorder value.
 */
template <typename Enum> friend bool operator==(Enum value, ClampToBorder);

/// Non-equality comparison with any @p Enum type having the ClampToBorder value.
/** Instances of the @c smart_enums::ClampToBorder type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ClampToBorder value.
 */
template <typename Enum> friend bool operator!=(Enum value, ClampToBorder);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ClampToEdge value.
/**
 *  @see @ref oglplus::TextureWrap "TextureWrap"
 *
 *  @glsymbols
 *  @gldefref{CLAMP_TO_EDGE}
 *
 *  @ingroup smart_enums
 */
struct ClampToEdge {

/// Conversion to any @p Enum type having the ClampToEdge value.
/** Instances of the @ref oglplus::smart_enums::ClampToEdge "ClampToEdge"
 *  type are convertible to instances of any enumeration type having
 *  the @c ClampToEdge value.
 */
template <typename Enum, Enum = Enum::ClampToEdge> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ClampToEdge value.
/** Instances of the @c smart_enums::ClampToEdge type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ClampToEdge value.
 */
template <typename Enum> friend bool operator==(Enum value, ClampToEdge);

/// Non-equality comparison with any @p Enum type having the ClampToEdge value.
/** Instances of the @c smart_enums::ClampToEdge type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ClampToEdge value.
 */
template <typename Enum> friend bool operator!=(Enum value, ClampToEdge);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Clear value.
/**
 *  @see @ref oglplus::ColorLogicOperation "ColorLogicOperation"
 *
 *  @glsymbols
 *  @gldefref{CLEAR}
 *
 *  @ingroup smart_enums
 */
struct Clear {

/// Conversion to any @p Enum type having the Clear value.
/** Instances of the @ref oglplus::smart_enums::Clear "Clear"
 *  type are convertible to instances of any enumeration type having
 *  the @c Clear value.
 */
template <typename Enum, Enum = Enum::Clear> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Clear value.
/** Instances of the @c smart_enums::Clear type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Clear value.
 */
template <typename Enum> friend bool operator==(Enum value, Clear);

/// Non-equality comparison with any @p Enum type having the Clear value.
/** Instances of the @c smart_enums::Clear type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Clear value.
 */
template <typename Enum> friend bool operator!=(Enum value, Clear);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ClientMappedBuffer value.
/**
 *  @see @ref oglplus::MemoryBarrierBit "MemoryBarrierBit"
 *
 *  @glsymbols
 *  @gldefref{CLIENT_MAPPED_BUFFER_BARRIER_BIT}
 *
 *  @ingroup smart_enums
 */
struct ClientMappedBuffer {

/// Conversion to any @p Enum type having the ClientMappedBuffer value.
/** Instances of the @ref oglplus::smart_enums::ClientMappedBuffer "ClientMappedBuffer"
 *  type are convertible to instances of any enumeration type having
 *  the @c ClientMappedBuffer value.
 */
template <typename Enum, Enum = Enum::ClientMappedBuffer> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ClientMappedBuffer value.
/** Instances of the @c smart_enums::ClientMappedBuffer type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ClientMappedBuffer value.
 */
template <typename Enum> friend bool operator==(Enum value, ClientMappedBuffer);

/// Non-equality comparison with any @p Enum type having the ClientMappedBuffer value.
/** Instances of the @c smart_enums::ClientMappedBuffer type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ClientMappedBuffer value.
 */
template <typename Enum> friend bool operator!=(Enum value, ClientMappedBuffer);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ClientStorage value.
/**
 *  @see @ref oglplus::BufferStorageBit "BufferStorageBit"
 *
 *  @glsymbols
 *  @gldefref{CLIENT_STORAGE_BIT}
 *
 *  @ingroup smart_enums
 */
struct ClientStorage {

/// Conversion to any @p Enum type having the ClientStorage value.
/** Instances of the @ref oglplus::smart_enums::ClientStorage "ClientStorage"
 *  type are convertible to instances of any enumeration type having
 *  the @c ClientStorage value.
 */
template <typename Enum, Enum = Enum::ClientStorage> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ClientStorage value.
/** Instances of the @c smart_enums::ClientStorage type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ClientStorage value.
 */
template <typename Enum> friend bool operator==(Enum value, ClientStorage);

/// Non-equality comparison with any @p Enum type having the ClientStorage value.
/** Instances of the @c smart_enums::ClientStorage type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ClientStorage value.
 */
template <typename Enum> friend bool operator!=(Enum value, ClientStorage);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ClipDistance value.
/**
 *  @see @ref oglplus::Functionality "Functionality"
 *
 *  @glsymbols
 *  @gldefref{CLIP_DISTANCE0}
 *
 *  @ingroup smart_enums
 */
struct ClipDistance {

/// Conversion to any @p Enum type having the ClipDistance value.
/** Instances of the @ref oglplus::smart_enums::ClipDistance "ClipDistance"
 *  type are convertible to instances of any enumeration type having
 *  the @c ClipDistance value.
 */
template <typename Enum, Enum = Enum::ClipDistance> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ClipDistance value.
/** Instances of the @c smart_enums::ClipDistance type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ClipDistance value.
 */
template <typename Enum> friend bool operator==(Enum value, ClipDistance);

/// Non-equality comparison with any @p Enum type having the ClipDistance value.
/** Instances of the @c smart_enums::ClipDistance type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ClipDistance value.
 */
template <typename Enum> friend bool operator!=(Enum value, ClipDistance);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Close value.
/**
 *  @see @ref oglplus::PathNVCommand "PathNVCommand"
 *
 *  @glsymbols
 *  @gldefref{CLOSE_PATH_NV}
 *
 *  @ingroup smart_enums
 */
struct Close {

/// Conversion to any @p Enum type having the Close value.
/** Instances of the @ref oglplus::smart_enums::Close "Close"
 *  type are convertible to instances of any enumeration type having
 *  the @c Close value.
 */
template <typename Enum, Enum = Enum::Close> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Close value.
/** Instances of the @c smart_enums::Close type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Close value.
 */
template <typename Enum> friend bool operator==(Enum value, Close);

/// Non-equality comparison with any @p Enum type having the Close value.
/** Instances of the @c smart_enums::Close type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Close value.
 */
template <typename Enum> friend bool operator!=(Enum value, Close);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Coherent value.
/**
 *  @see @ref oglplus::BufferMapAccess "BufferMapAccess"
 *
 *  @glsymbols
 *  @gldefref{MAP_COHERENT_BIT}
 *
 *  @ingroup smart_enums
 */
struct Coherent {

/// Conversion to any @p Enum type having the Coherent value.
/** Instances of the @ref oglplus::smart_enums::Coherent "Coherent"
 *  type are convertible to instances of any enumeration type having
 *  the @c Coherent value.
 */
template <typename Enum, Enum = Enum::Coherent> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Coherent value.
/** Instances of the @c smart_enums::Coherent type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Coherent value.
 */
template <typename Enum> friend bool operator==(Enum value, Coherent);

/// Non-equality comparison with any @p Enum type having the Coherent value.
/** Instances of the @c smart_enums::Coherent type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Coherent value.
 */
template <typename Enum> friend bool operator!=(Enum value, Coherent);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Color value.
/**
 *  @see @ref oglplus::CompatibilityMatrixMode "CompatibilityMatrixMode"
 *  @see @ref oglplus::FramebufferAttachment "FramebufferAttachment"
 *  @see @ref oglplus::FramebufferBuffer "FramebufferBuffer"
 *
 *  @glsymbols
 *  @gldefref{COLOR}
 *  @gldefref{COLOR_ATTACHMENT0}
 *
 *  @ingroup smart_enums
 */
struct Color {

/// Conversion to any @p Enum type having the Color value.
/** Instances of the @ref oglplus::smart_enums::Color "Color"
 *  type are convertible to instances of any enumeration type having
 *  the @c Color value.
 */
template <typename Enum, Enum = Enum::Color> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Color value.
/** Instances of the @c smart_enums::Color type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Color value.
 */
template <typename Enum> friend bool operator==(Enum value, Color);

/// Non-equality comparison with any @p Enum type having the Color value.
/** Instances of the @c smart_enums::Color type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Color value.
 */
template <typename Enum> friend bool operator!=(Enum value, Color);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Color1 value.
/**
 *  @see @ref oglplus::FramebufferAttachment "FramebufferAttachment"
 *
 *  @glsymbols
 *  @gldefref{COLOR_ATTACHMENT1}
 *
 *  @ingroup smart_enums
 */
struct Color1 {

/// Conversion to any @p Enum type having the Color1 value.
/** Instances of the @ref oglplus::smart_enums::Color1 "Color1"
 *  type are convertible to instances of any enumeration type having
 *  the @c Color1 value.
 */
template <typename Enum, Enum = Enum::Color1> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Color1 value.
/** Instances of the @c smart_enums::Color1 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Color1 value.
 */
template <typename Enum> friend bool operator==(Enum value, Color1);

/// Non-equality comparison with any @p Enum type having the Color1 value.
/** Instances of the @c smart_enums::Color1 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Color1 value.
 */
template <typename Enum> friend bool operator!=(Enum value, Color1);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Color10 value.
/**
 *  @see @ref oglplus::FramebufferAttachment "FramebufferAttachment"
 *
 *  @glsymbols
 *  @gldefref{COLOR_ATTACHMENT10}
 *
 *  @ingroup smart_enums
 */
struct Color10 {

/// Conversion to any @p Enum type having the Color10 value.
/** Instances of the @ref oglplus::smart_enums::Color10 "Color10"
 *  type are convertible to instances of any enumeration type having
 *  the @c Color10 value.
 */
template <typename Enum, Enum = Enum::Color10> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Color10 value.
/** Instances of the @c smart_enums::Color10 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Color10 value.
 */
template <typename Enum> friend bool operator==(Enum value, Color10);

/// Non-equality comparison with any @p Enum type having the Color10 value.
/** Instances of the @c smart_enums::Color10 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Color10 value.
 */
template <typename Enum> friend bool operator!=(Enum value, Color10);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Color11 value.
/**
 *  @see @ref oglplus::FramebufferAttachment "FramebufferAttachment"
 *
 *  @glsymbols
 *  @gldefref{COLOR_ATTACHMENT11}
 *
 *  @ingroup smart_enums
 */
struct Color11 {

/// Conversion to any @p Enum type having the Color11 value.
/** Instances of the @ref oglplus::smart_enums::Color11 "Color11"
 *  type are convertible to instances of any enumeration type having
 *  the @c Color11 value.
 */
template <typename Enum, Enum = Enum::Color11> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Color11 value.
/** Instances of the @c smart_enums::Color11 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Color11 value.
 */
template <typename Enum> friend bool operator==(Enum value, Color11);

/// Non-equality comparison with any @p Enum type having the Color11 value.
/** Instances of the @c smart_enums::Color11 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Color11 value.
 */
template <typename Enum> friend bool operator!=(Enum value, Color11);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Color12 value.
/**
 *  @see @ref oglplus::FramebufferAttachment "FramebufferAttachment"
 *
 *  @glsymbols
 *  @gldefref{COLOR_ATTACHMENT12}
 *
 *  @ingroup smart_enums
 */
struct Color12 {

/// Conversion to any @p Enum type having the Color12 value.
/** Instances of the @ref oglplus::smart_enums::Color12 "Color12"
 *  type are convertible to instances of any enumeration type having
 *  the @c Color12 value.
 */
template <typename Enum, Enum = Enum::Color12> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Color12 value.
/** Instances of the @c smart_enums::Color12 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Color12 value.
 */
template <typename Enum> friend bool operator==(Enum value, Color12);

/// Non-equality comparison with any @p Enum type having the Color12 value.
/** Instances of the @c smart_enums::Color12 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Color12 value.
 */
template <typename Enum> friend bool operator!=(Enum value, Color12);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Color13 value.
/**
 *  @see @ref oglplus::FramebufferAttachment "FramebufferAttachment"
 *
 *  @glsymbols
 *  @gldefref{COLOR_ATTACHMENT13}
 *
 *  @ingroup smart_enums
 */
struct Color13 {

/// Conversion to any @p Enum type having the Color13 value.
/** Instances of the @ref oglplus::smart_enums::Color13 "Color13"
 *  type are convertible to instances of any enumeration type having
 *  the @c Color13 value.
 */
template <typename Enum, Enum = Enum::Color13> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Color13 value.
/** Instances of the @c smart_enums::Color13 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Color13 value.
 */
template <typename Enum> friend bool operator==(Enum value, Color13);

/// Non-equality comparison with any @p Enum type having the Color13 value.
/** Instances of the @c smart_enums::Color13 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Color13 value.
 */
template <typename Enum> friend bool operator!=(Enum value, Color13);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Color14 value.
/**
 *  @see @ref oglplus::FramebufferAttachment "FramebufferAttachment"
 *
 *  @glsymbols
 *  @gldefref{COLOR_ATTACHMENT14}
 *
 *  @ingroup smart_enums
 */
struct Color14 {

/// Conversion to any @p Enum type having the Color14 value.
/** Instances of the @ref oglplus::smart_enums::Color14 "Color14"
 *  type are convertible to instances of any enumeration type having
 *  the @c Color14 value.
 */
template <typename Enum, Enum = Enum::Color14> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Color14 value.
/** Instances of the @c smart_enums::Color14 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Color14 value.
 */
template <typename Enum> friend bool operator==(Enum value, Color14);

/// Non-equality comparison with any @p Enum type having the Color14 value.
/** Instances of the @c smart_enums::Color14 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Color14 value.
 */
template <typename Enum> friend bool operator!=(Enum value, Color14);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Color15 value.
/**
 *  @see @ref oglplus::FramebufferAttachment "FramebufferAttachment"
 *
 *  @glsymbols
 *  @gldefref{COLOR_ATTACHMENT15}
 *
 *  @ingroup smart_enums
 */
struct Color15 {

/// Conversion to any @p Enum type having the Color15 value.
/** Instances of the @ref oglplus::smart_enums::Color15 "Color15"
 *  type are convertible to instances of any enumeration type having
 *  the @c Color15 value.
 */
template <typename Enum, Enum = Enum::Color15> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Color15 value.
/** Instances of the @c smart_enums::Color15 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Color15 value.
 */
template <typename Enum> friend bool operator==(Enum value, Color15);

/// Non-equality comparison with any @p Enum type having the Color15 value.
/** Instances of the @c smart_enums::Color15 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Color15 value.
 */
template <typename Enum> friend bool operator!=(Enum value, Color15);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Color2 value.
/**
 *  @see @ref oglplus::FramebufferAttachment "FramebufferAttachment"
 *
 *  @glsymbols
 *  @gldefref{COLOR_ATTACHMENT2}
 *
 *  @ingroup smart_enums
 */
struct Color2 {

/// Conversion to any @p Enum type having the Color2 value.
/** Instances of the @ref oglplus::smart_enums::Color2 "Color2"
 *  type are convertible to instances of any enumeration type having
 *  the @c Color2 value.
 */
template <typename Enum, Enum = Enum::Color2> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Color2 value.
/** Instances of the @c smart_enums::Color2 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Color2 value.
 */
template <typename Enum> friend bool operator==(Enum value, Color2);

/// Non-equality comparison with any @p Enum type having the Color2 value.
/** Instances of the @c smart_enums::Color2 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Color2 value.
 */
template <typename Enum> friend bool operator!=(Enum value, Color2);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Color3 value.
/**
 *  @see @ref oglplus::FramebufferAttachment "FramebufferAttachment"
 *
 *  @glsymbols
 *  @gldefref{COLOR_ATTACHMENT3}
 *
 *  @ingroup smart_enums
 */
struct Color3 {

/// Conversion to any @p Enum type having the Color3 value.
/** Instances of the @ref oglplus::smart_enums::Color3 "Color3"
 *  type are convertible to instances of any enumeration type having
 *  the @c Color3 value.
 */
template <typename Enum, Enum = Enum::Color3> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Color3 value.
/** Instances of the @c smart_enums::Color3 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Color3 value.
 */
template <typename Enum> friend bool operator==(Enum value, Color3);

/// Non-equality comparison with any @p Enum type having the Color3 value.
/** Instances of the @c smart_enums::Color3 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Color3 value.
 */
template <typename Enum> friend bool operator!=(Enum value, Color3);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Color4 value.
/**
 *  @see @ref oglplus::FramebufferAttachment "FramebufferAttachment"
 *
 *  @glsymbols
 *  @gldefref{COLOR_ATTACHMENT4}
 *
 *  @ingroup smart_enums
 */
struct Color4 {

/// Conversion to any @p Enum type having the Color4 value.
/** Instances of the @ref oglplus::smart_enums::Color4 "Color4"
 *  type are convertible to instances of any enumeration type having
 *  the @c Color4 value.
 */
template <typename Enum, Enum = Enum::Color4> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Color4 value.
/** Instances of the @c smart_enums::Color4 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Color4 value.
 */
template <typename Enum> friend bool operator==(Enum value, Color4);

/// Non-equality comparison with any @p Enum type having the Color4 value.
/** Instances of the @c smart_enums::Color4 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Color4 value.
 */
template <typename Enum> friend bool operator!=(Enum value, Color4);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Color5 value.
/**
 *  @see @ref oglplus::FramebufferAttachment "FramebufferAttachment"
 *
 *  @glsymbols
 *  @gldefref{COLOR_ATTACHMENT5}
 *
 *  @ingroup smart_enums
 */
struct Color5 {

/// Conversion to any @p Enum type having the Color5 value.
/** Instances of the @ref oglplus::smart_enums::Color5 "Color5"
 *  type are convertible to instances of any enumeration type having
 *  the @c Color5 value.
 */
template <typename Enum, Enum = Enum::Color5> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Color5 value.
/** Instances of the @c smart_enums::Color5 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Color5 value.
 */
template <typename Enum> friend bool operator==(Enum value, Color5);

/// Non-equality comparison with any @p Enum type having the Color5 value.
/** Instances of the @c smart_enums::Color5 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Color5 value.
 */
template <typename Enum> friend bool operator!=(Enum value, Color5);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Color6 value.
/**
 *  @see @ref oglplus::FramebufferAttachment "FramebufferAttachment"
 *
 *  @glsymbols
 *  @gldefref{COLOR_ATTACHMENT6}
 *
 *  @ingroup smart_enums
 */
struct Color6 {

/// Conversion to any @p Enum type having the Color6 value.
/** Instances of the @ref oglplus::smart_enums::Color6 "Color6"
 *  type are convertible to instances of any enumeration type having
 *  the @c Color6 value.
 */
template <typename Enum, Enum = Enum::Color6> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Color6 value.
/** Instances of the @c smart_enums::Color6 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Color6 value.
 */
template <typename Enum> friend bool operator==(Enum value, Color6);

/// Non-equality comparison with any @p Enum type having the Color6 value.
/** Instances of the @c smart_enums::Color6 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Color6 value.
 */
template <typename Enum> friend bool operator!=(Enum value, Color6);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Color7 value.
/**
 *  @see @ref oglplus::FramebufferAttachment "FramebufferAttachment"
 *
 *  @glsymbols
 *  @gldefref{COLOR_ATTACHMENT7}
 *
 *  @ingroup smart_enums
 */
struct Color7 {

/// Conversion to any @p Enum type having the Color7 value.
/** Instances of the @ref oglplus::smart_enums::Color7 "Color7"
 *  type are convertible to instances of any enumeration type having
 *  the @c Color7 value.
 */
template <typename Enum, Enum = Enum::Color7> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Color7 value.
/** Instances of the @c smart_enums::Color7 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Color7 value.
 */
template <typename Enum> friend bool operator==(Enum value, Color7);

/// Non-equality comparison with any @p Enum type having the Color7 value.
/** Instances of the @c smart_enums::Color7 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Color7 value.
 */
template <typename Enum> friend bool operator!=(Enum value, Color7);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Color8 value.
/**
 *  @see @ref oglplus::FramebufferAttachment "FramebufferAttachment"
 *
 *  @glsymbols
 *  @gldefref{COLOR_ATTACHMENT8}
 *
 *  @ingroup smart_enums
 */
struct Color8 {

/// Conversion to any @p Enum type having the Color8 value.
/** Instances of the @ref oglplus::smart_enums::Color8 "Color8"
 *  type are convertible to instances of any enumeration type having
 *  the @c Color8 value.
 */
template <typename Enum, Enum = Enum::Color8> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Color8 value.
/** Instances of the @c smart_enums::Color8 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Color8 value.
 */
template <typename Enum> friend bool operator==(Enum value, Color8);

/// Non-equality comparison with any @p Enum type having the Color8 value.
/** Instances of the @c smart_enums::Color8 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Color8 value.
 */
template <typename Enum> friend bool operator!=(Enum value, Color8);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Color9 value.
/**
 *  @see @ref oglplus::FramebufferAttachment "FramebufferAttachment"
 *
 *  @glsymbols
 *  @gldefref{COLOR_ATTACHMENT9}
 *
 *  @ingroup smart_enums
 */
struct Color9 {

/// Conversion to any @p Enum type having the Color9 value.
/** Instances of the @ref oglplus::smart_enums::Color9 "Color9"
 *  type are convertible to instances of any enumeration type having
 *  the @c Color9 value.
 */
template <typename Enum, Enum = Enum::Color9> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Color9 value.
/** Instances of the @c smart_enums::Color9 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Color9 value.
 */
template <typename Enum> friend bool operator==(Enum value, Color9);

/// Non-equality comparison with any @p Enum type having the Color9 value.
/** Instances of the @c smart_enums::Color9 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Color9 value.
 */
template <typename Enum> friend bool operator!=(Enum value, Color9);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ColorBuffer value.
/**
 *  @see @ref oglplus::BufferSelectBit "BufferSelectBit"
 *  @see @ref oglplus::CompatibilityAttributeGroup "CompatibilityAttributeGroup"
 *
 *  @glsymbols
 *  @gldefref{COLOR_BUFFER_BIT}
 *
 *  @ingroup smart_enums
 */
struct ColorBuffer {

/// Conversion to any @p Enum type having the ColorBuffer value.
/** Instances of the @ref oglplus::smart_enums::ColorBuffer "ColorBuffer"
 *  type are convertible to instances of any enumeration type having
 *  the @c ColorBuffer value.
 */
template <typename Enum, Enum = Enum::ColorBuffer> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ColorBuffer value.
/** Instances of the @c smart_enums::ColorBuffer type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ColorBuffer value.
 */
template <typename Enum> friend bool operator==(Enum value, ColorBuffer);

/// Non-equality comparison with any @p Enum type having the ColorBuffer value.
/** Instances of the @c smart_enums::ColorBuffer type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ColorBuffer value.
 */
template <typename Enum> friend bool operator!=(Enum value, ColorBuffer);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ColorLogicOp value.
/**
 *  @see @ref oglplus::Capability "Capability"
 *
 *  @glsymbols
 *  @gldefref{COLOR_LOGIC_OP}
 *
 *  @ingroup smart_enums
 */
struct ColorLogicOp {

/// Conversion to any @p Enum type having the ColorLogicOp value.
/** Instances of the @ref oglplus::smart_enums::ColorLogicOp "ColorLogicOp"
 *  type are convertible to instances of any enumeration type having
 *  the @c ColorLogicOp value.
 */
template <typename Enum, Enum = Enum::ColorLogicOp> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ColorLogicOp value.
/** Instances of the @c smart_enums::ColorLogicOp type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ColorLogicOp value.
 */
template <typename Enum> friend bool operator==(Enum value, ColorLogicOp);

/// Non-equality comparison with any @p Enum type having the ColorLogicOp value.
/** Instances of the @c smart_enums::ColorLogicOp type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ColorLogicOp value.
 */
template <typename Enum> friend bool operator!=(Enum value, ColorLogicOp);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Command value.
/**
 *  @see @ref oglplus::MemoryBarrierBit "MemoryBarrierBit"
 *
 *  @glsymbols
 *  @gldefref{COMMAND_BARRIER_BIT}
 *
 *  @ingroup smart_enums
 */
struct Command {

/// Conversion to any @p Enum type having the Command value.
/** Instances of the @ref oglplus::smart_enums::Command "Command"
 *  type are convertible to instances of any enumeration type having
 *  the @c Command value.
 */
template <typename Enum, Enum = Enum::Command> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Command value.
/** Instances of the @c smart_enums::Command type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Command value.
 */
template <typename Enum> friend bool operator==(Enum value, Command);

/// Non-equality comparison with any @p Enum type having the Command value.
/** Instances of the @c smart_enums::Command type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Command value.
 */
template <typename Enum> friend bool operator!=(Enum value, Command);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CompareRefToTexture value.
/**
 *  @see @ref oglplus::TextureCompareMode "TextureCompareMode"
 *
 *  @glsymbols
 *  @gldefref{COMPARE_REF_TO_TEXTURE}
 *
 *  @ingroup smart_enums
 */
struct CompareRefToTexture {

/// Conversion to any @p Enum type having the CompareRefToTexture value.
/** Instances of the @ref oglplus::smart_enums::CompareRefToTexture "CompareRefToTexture"
 *  type are convertible to instances of any enumeration type having
 *  the @c CompareRefToTexture value.
 */
template <typename Enum, Enum = Enum::CompareRefToTexture> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CompareRefToTexture value.
/** Instances of the @c smart_enums::CompareRefToTexture type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CompareRefToTexture value.
 */
template <typename Enum> friend bool operator==(Enum value, CompareRefToTexture);

/// Non-equality comparison with any @p Enum type having the CompareRefToTexture value.
/** Instances of the @c smart_enums::CompareRefToTexture type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CompareRefToTexture value.
 */
template <typename Enum> friend bool operator!=(Enum value, CompareRefToTexture);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Compatibility value.
/**
 *  @see @ref oglplus::ContextProfileBit "ContextProfileBit"
 *
 *  @glsymbols
 *  @gldefref{CONTEXT_COMPATIBILITY_PROFILE_BIT}
 *
 *  @ingroup smart_enums
 */
struct Compatibility {

/// Conversion to any @p Enum type having the Compatibility value.
/** Instances of the @ref oglplus::smart_enums::Compatibility "Compatibility"
 *  type are convertible to instances of any enumeration type having
 *  the @c Compatibility value.
 */
template <typename Enum, Enum = Enum::Compatibility> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Compatibility value.
/** Instances of the @c smart_enums::Compatibility type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Compatibility value.
 */
template <typename Enum> friend bool operator==(Enum value, Compatibility);

/// Non-equality comparison with any @p Enum type having the Compatibility value.
/** Instances of the @c smart_enums::Compatibility type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Compatibility value.
 */
template <typename Enum> friend bool operator!=(Enum value, Compatibility);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CompatibleSubroutines value.
/**
 *  @see @ref oglplus::ProgramResourceProperty "ProgramResourceProperty"
 *
 *  @glsymbols
 *  @gldefref{COMPATIBLE_SUBROUTINES}
 *
 *  @ingroup smart_enums
 */
struct CompatibleSubroutines {

/// Conversion to any @p Enum type having the CompatibleSubroutines value.
/** Instances of the @ref oglplus::smart_enums::CompatibleSubroutines "CompatibleSubroutines"
 *  type are convertible to instances of any enumeration type having
 *  the @c CompatibleSubroutines value.
 */
template <typename Enum, Enum = Enum::CompatibleSubroutines> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CompatibleSubroutines value.
/** Instances of the @c smart_enums::CompatibleSubroutines type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CompatibleSubroutines value.
 */
template <typename Enum> friend bool operator==(Enum value, CompatibleSubroutines);

/// Non-equality comparison with any @p Enum type having the CompatibleSubroutines value.
/** Instances of the @c smart_enums::CompatibleSubroutines type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CompatibleSubroutines value.
 */
template <typename Enum> friend bool operator!=(Enum value, CompatibleSubroutines);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Complete value.
/**
 *  @see @ref oglplus::FramebufferStatus "FramebufferStatus"
 *
 *  @glsymbols
 *  @gldefref{FRAMEBUFFER_COMPLETE}
 *
 *  @ingroup smart_enums
 */
struct Complete {

/// Conversion to any @p Enum type having the Complete value.
/** Instances of the @ref oglplus::smart_enums::Complete "Complete"
 *  type are convertible to instances of any enumeration type having
 *  the @c Complete value.
 */
template <typename Enum, Enum = Enum::Complete> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Complete value.
/** Instances of the @c smart_enums::Complete type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Complete value.
 */
template <typename Enum> friend bool operator==(Enum value, Complete);

/// Non-equality comparison with any @p Enum type having the Complete value.
/** Instances of the @c smart_enums::Complete type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Complete value.
 */
template <typename Enum> friend bool operator!=(Enum value, Complete);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CompressedETC2EAC value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{COMPRESSED_RGBA8_ETC2_EAC}
 *
 *  @ingroup smart_enums
 */
struct CompressedETC2EAC {

/// Conversion to any @p Enum type having the CompressedETC2EAC value.
/** Instances of the @ref oglplus::smart_enums::CompressedETC2EAC "CompressedETC2EAC"
 *  type are convertible to instances of any enumeration type having
 *  the @c CompressedETC2EAC value.
 */
template <typename Enum, Enum = Enum::CompressedETC2EAC> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CompressedETC2EAC value.
/** Instances of the @c smart_enums::CompressedETC2EAC type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CompressedETC2EAC value.
 */
template <typename Enum> friend bool operator==(Enum value, CompressedETC2EAC);

/// Non-equality comparison with any @p Enum type having the CompressedETC2EAC value.
/** Instances of the @c smart_enums::CompressedETC2EAC type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CompressedETC2EAC value.
 */
template <typename Enum> friend bool operator!=(Enum value, CompressedETC2EAC);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CompressedR11EAC value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{COMPRESSED_R11_EAC}
 *
 *  @ingroup smart_enums
 */
struct CompressedR11EAC {

/// Conversion to any @p Enum type having the CompressedR11EAC value.
/** Instances of the @ref oglplus::smart_enums::CompressedR11EAC "CompressedR11EAC"
 *  type are convertible to instances of any enumeration type having
 *  the @c CompressedR11EAC value.
 */
template <typename Enum, Enum = Enum::CompressedR11EAC> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CompressedR11EAC value.
/** Instances of the @c smart_enums::CompressedR11EAC type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CompressedR11EAC value.
 */
template <typename Enum> friend bool operator==(Enum value, CompressedR11EAC);

/// Non-equality comparison with any @p Enum type having the CompressedR11EAC value.
/** Instances of the @c smart_enums::CompressedR11EAC type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CompressedR11EAC value.
 */
template <typename Enum> friend bool operator!=(Enum value, CompressedR11EAC);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CompressedRed value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{COMPRESSED_RED}
 *
 *  @ingroup smart_enums
 */
struct CompressedRed {

/// Conversion to any @p Enum type having the CompressedRed value.
/** Instances of the @ref oglplus::smart_enums::CompressedRed "CompressedRed"
 *  type are convertible to instances of any enumeration type having
 *  the @c CompressedRed value.
 */
template <typename Enum, Enum = Enum::CompressedRed> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CompressedRed value.
/** Instances of the @c smart_enums::CompressedRed type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CompressedRed value.
 */
template <typename Enum> friend bool operator==(Enum value, CompressedRed);

/// Non-equality comparison with any @p Enum type having the CompressedRed value.
/** Instances of the @c smart_enums::CompressedRed type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CompressedRed value.
 */
template <typename Enum> friend bool operator!=(Enum value, CompressedRed);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CompressedRedRGTC1 value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{COMPRESSED_RED_RGTC1}
 *
 *  @ingroup smart_enums
 */
struct CompressedRedRGTC1 {

/// Conversion to any @p Enum type having the CompressedRedRGTC1 value.
/** Instances of the @ref oglplus::smart_enums::CompressedRedRGTC1 "CompressedRedRGTC1"
 *  type are convertible to instances of any enumeration type having
 *  the @c CompressedRedRGTC1 value.
 */
template <typename Enum, Enum = Enum::CompressedRedRGTC1> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CompressedRedRGTC1 value.
/** Instances of the @c smart_enums::CompressedRedRGTC1 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CompressedRedRGTC1 value.
 */
template <typename Enum> friend bool operator==(Enum value, CompressedRedRGTC1);

/// Non-equality comparison with any @p Enum type having the CompressedRedRGTC1 value.
/** Instances of the @c smart_enums::CompressedRedRGTC1 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CompressedRedRGTC1 value.
 */
template <typename Enum> friend bool operator!=(Enum value, CompressedRedRGTC1);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CompressedRG value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{COMPRESSED_RG}
 *
 *  @ingroup smart_enums
 */
struct CompressedRG {

/// Conversion to any @p Enum type having the CompressedRG value.
/** Instances of the @ref oglplus::smart_enums::CompressedRG "CompressedRG"
 *  type are convertible to instances of any enumeration type having
 *  the @c CompressedRG value.
 */
template <typename Enum, Enum = Enum::CompressedRG> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CompressedRG value.
/** Instances of the @c smart_enums::CompressedRG type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CompressedRG value.
 */
template <typename Enum> friend bool operator==(Enum value, CompressedRG);

/// Non-equality comparison with any @p Enum type having the CompressedRG value.
/** Instances of the @c smart_enums::CompressedRG type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CompressedRG value.
 */
template <typename Enum> friend bool operator!=(Enum value, CompressedRG);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CompressedRG11EAC value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{COMPRESSED_RG11_EAC}
 *
 *  @ingroup smart_enums
 */
struct CompressedRG11EAC {

/// Conversion to any @p Enum type having the CompressedRG11EAC value.
/** Instances of the @ref oglplus::smart_enums::CompressedRG11EAC "CompressedRG11EAC"
 *  type are convertible to instances of any enumeration type having
 *  the @c CompressedRG11EAC value.
 */
template <typename Enum, Enum = Enum::CompressedRG11EAC> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CompressedRG11EAC value.
/** Instances of the @c smart_enums::CompressedRG11EAC type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CompressedRG11EAC value.
 */
template <typename Enum> friend bool operator==(Enum value, CompressedRG11EAC);

/// Non-equality comparison with any @p Enum type having the CompressedRG11EAC value.
/** Instances of the @c smart_enums::CompressedRG11EAC type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CompressedRG11EAC value.
 */
template <typename Enum> friend bool operator!=(Enum value, CompressedRG11EAC);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CompressedRGB value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{COMPRESSED_RGB}
 *
 *  @ingroup smart_enums
 */
struct CompressedRGB {

/// Conversion to any @p Enum type having the CompressedRGB value.
/** Instances of the @ref oglplus::smart_enums::CompressedRGB "CompressedRGB"
 *  type are convertible to instances of any enumeration type having
 *  the @c CompressedRGB value.
 */
template <typename Enum, Enum = Enum::CompressedRGB> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CompressedRGB value.
/** Instances of the @c smart_enums::CompressedRGB type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CompressedRGB value.
 */
template <typename Enum> friend bool operator==(Enum value, CompressedRGB);

/// Non-equality comparison with any @p Enum type having the CompressedRGB value.
/** Instances of the @c smart_enums::CompressedRGB type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CompressedRGB value.
 */
template <typename Enum> friend bool operator!=(Enum value, CompressedRGB);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CompressedRGB8ETC2 value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{COMPRESSED_RGB8_ETC2}
 *
 *  @ingroup smart_enums
 */
struct CompressedRGB8ETC2 {

/// Conversion to any @p Enum type having the CompressedRGB8ETC2 value.
/** Instances of the @ref oglplus::smart_enums::CompressedRGB8ETC2 "CompressedRGB8ETC2"
 *  type are convertible to instances of any enumeration type having
 *  the @c CompressedRGB8ETC2 value.
 */
template <typename Enum, Enum = Enum::CompressedRGB8ETC2> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CompressedRGB8ETC2 value.
/** Instances of the @c smart_enums::CompressedRGB8ETC2 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CompressedRGB8ETC2 value.
 */
template <typename Enum> friend bool operator==(Enum value, CompressedRGB8ETC2);

/// Non-equality comparison with any @p Enum type having the CompressedRGB8ETC2 value.
/** Instances of the @c smart_enums::CompressedRGB8ETC2 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CompressedRGB8ETC2 value.
 */
template <typename Enum> friend bool operator!=(Enum value, CompressedRGB8ETC2);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CompressedRGB8PunchthroughAlpha1ETC2 value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2}
 *
 *  @ingroup smart_enums
 */
struct CompressedRGB8PunchthroughAlpha1ETC2 {

/// Conversion to any @p Enum type having the CompressedRGB8PunchthroughAlpha1ETC2 value.
/** Instances of the @ref oglplus::smart_enums::CompressedRGB8PunchthroughAlpha1ETC2 "CompressedRGB8PunchthroughAlpha1ETC2"
 *  type are convertible to instances of any enumeration type having
 *  the @c CompressedRGB8PunchthroughAlpha1ETC2 value.
 */
template <typename Enum, Enum = Enum::CompressedRGB8PunchthroughAlpha1ETC2> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CompressedRGB8PunchthroughAlpha1ETC2 value.
/** Instances of the @c smart_enums::CompressedRGB8PunchthroughAlpha1ETC2 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CompressedRGB8PunchthroughAlpha1ETC2 value.
 */
template <typename Enum> friend bool operator==(Enum value, CompressedRGB8PunchthroughAlpha1ETC2);

/// Non-equality comparison with any @p Enum type having the CompressedRGB8PunchthroughAlpha1ETC2 value.
/** Instances of the @c smart_enums::CompressedRGB8PunchthroughAlpha1ETC2 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CompressedRGB8PunchthroughAlpha1ETC2 value.
 */
template <typename Enum> friend bool operator!=(Enum value, CompressedRGB8PunchthroughAlpha1ETC2);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CompressedRGBA value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{COMPRESSED_RGBA}
 *
 *  @ingroup smart_enums
 */
struct CompressedRGBA {

/// Conversion to any @p Enum type having the CompressedRGBA value.
/** Instances of the @ref oglplus::smart_enums::CompressedRGBA "CompressedRGBA"
 *  type are convertible to instances of any enumeration type having
 *  the @c CompressedRGBA value.
 */
template <typename Enum, Enum = Enum::CompressedRGBA> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CompressedRGBA value.
/** Instances of the @c smart_enums::CompressedRGBA type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CompressedRGBA value.
 */
template <typename Enum> friend bool operator==(Enum value, CompressedRGBA);

/// Non-equality comparison with any @p Enum type having the CompressedRGBA value.
/** Instances of the @c smart_enums::CompressedRGBA type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CompressedRGBA value.
 */
template <typename Enum> friend bool operator!=(Enum value, CompressedRGBA);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CompressedRGBABPTCUNorm value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{COMPRESSED_RGBA_BPTC_UNORM}
 *
 *  @ingroup smart_enums
 */
struct CompressedRGBABPTCUNorm {

/// Conversion to any @p Enum type having the CompressedRGBABPTCUNorm value.
/** Instances of the @ref oglplus::smart_enums::CompressedRGBABPTCUNorm "CompressedRGBABPTCUNorm"
 *  type are convertible to instances of any enumeration type having
 *  the @c CompressedRGBABPTCUNorm value.
 */
template <typename Enum, Enum = Enum::CompressedRGBABPTCUNorm> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CompressedRGBABPTCUNorm value.
/** Instances of the @c smart_enums::CompressedRGBABPTCUNorm type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CompressedRGBABPTCUNorm value.
 */
template <typename Enum> friend bool operator==(Enum value, CompressedRGBABPTCUNorm);

/// Non-equality comparison with any @p Enum type having the CompressedRGBABPTCUNorm value.
/** Instances of the @c smart_enums::CompressedRGBABPTCUNorm type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CompressedRGBABPTCUNorm value.
 */
template <typename Enum> friend bool operator!=(Enum value, CompressedRGBABPTCUNorm);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CompressedRGBBPTCSignedFloat value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{COMPRESSED_RGB_BPTC_SIGNED_FLOAT}
 *
 *  @ingroup smart_enums
 */
struct CompressedRGBBPTCSignedFloat {

/// Conversion to any @p Enum type having the CompressedRGBBPTCSignedFloat value.
/** Instances of the @ref oglplus::smart_enums::CompressedRGBBPTCSignedFloat "CompressedRGBBPTCSignedFloat"
 *  type are convertible to instances of any enumeration type having
 *  the @c CompressedRGBBPTCSignedFloat value.
 */
template <typename Enum, Enum = Enum::CompressedRGBBPTCSignedFloat> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CompressedRGBBPTCSignedFloat value.
/** Instances of the @c smart_enums::CompressedRGBBPTCSignedFloat type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CompressedRGBBPTCSignedFloat value.
 */
template <typename Enum> friend bool operator==(Enum value, CompressedRGBBPTCSignedFloat);

/// Non-equality comparison with any @p Enum type having the CompressedRGBBPTCSignedFloat value.
/** Instances of the @c smart_enums::CompressedRGBBPTCSignedFloat type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CompressedRGBBPTCSignedFloat value.
 */
template <typename Enum> friend bool operator!=(Enum value, CompressedRGBBPTCSignedFloat);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CompressedRGBBPTCUnsignedFloat value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT}
 *
 *  @ingroup smart_enums
 */
struct CompressedRGBBPTCUnsignedFloat {

/// Conversion to any @p Enum type having the CompressedRGBBPTCUnsignedFloat value.
/** Instances of the @ref oglplus::smart_enums::CompressedRGBBPTCUnsignedFloat "CompressedRGBBPTCUnsignedFloat"
 *  type are convertible to instances of any enumeration type having
 *  the @c CompressedRGBBPTCUnsignedFloat value.
 */
template <typename Enum, Enum = Enum::CompressedRGBBPTCUnsignedFloat> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CompressedRGBBPTCUnsignedFloat value.
/** Instances of the @c smart_enums::CompressedRGBBPTCUnsignedFloat type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CompressedRGBBPTCUnsignedFloat value.
 */
template <typename Enum> friend bool operator==(Enum value, CompressedRGBBPTCUnsignedFloat);

/// Non-equality comparison with any @p Enum type having the CompressedRGBBPTCUnsignedFloat value.
/** Instances of the @c smart_enums::CompressedRGBBPTCUnsignedFloat type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CompressedRGBBPTCUnsignedFloat value.
 */
template <typename Enum> friend bool operator!=(Enum value, CompressedRGBBPTCUnsignedFloat);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CompressedRGRGTC2 value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{COMPRESSED_RG_RGTC2}
 *
 *  @ingroup smart_enums
 */
struct CompressedRGRGTC2 {

/// Conversion to any @p Enum type having the CompressedRGRGTC2 value.
/** Instances of the @ref oglplus::smart_enums::CompressedRGRGTC2 "CompressedRGRGTC2"
 *  type are convertible to instances of any enumeration type having
 *  the @c CompressedRGRGTC2 value.
 */
template <typename Enum, Enum = Enum::CompressedRGRGTC2> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CompressedRGRGTC2 value.
/** Instances of the @c smart_enums::CompressedRGRGTC2 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CompressedRGRGTC2 value.
 */
template <typename Enum> friend bool operator==(Enum value, CompressedRGRGTC2);

/// Non-equality comparison with any @p Enum type having the CompressedRGRGTC2 value.
/** Instances of the @c smart_enums::CompressedRGRGTC2 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CompressedRGRGTC2 value.
 */
template <typename Enum> friend bool operator!=(Enum value, CompressedRGRGTC2);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CompressedSignedR11EAC value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{COMPRESSED_SIGNED_R11_EAC}
 *
 *  @ingroup smart_enums
 */
struct CompressedSignedR11EAC {

/// Conversion to any @p Enum type having the CompressedSignedR11EAC value.
/** Instances of the @ref oglplus::smart_enums::CompressedSignedR11EAC "CompressedSignedR11EAC"
 *  type are convertible to instances of any enumeration type having
 *  the @c CompressedSignedR11EAC value.
 */
template <typename Enum, Enum = Enum::CompressedSignedR11EAC> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CompressedSignedR11EAC value.
/** Instances of the @c smart_enums::CompressedSignedR11EAC type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CompressedSignedR11EAC value.
 */
template <typename Enum> friend bool operator==(Enum value, CompressedSignedR11EAC);

/// Non-equality comparison with any @p Enum type having the CompressedSignedR11EAC value.
/** Instances of the @c smart_enums::CompressedSignedR11EAC type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CompressedSignedR11EAC value.
 */
template <typename Enum> friend bool operator!=(Enum value, CompressedSignedR11EAC);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CompressedSignedRedRGTC1 value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{COMPRESSED_SIGNED_RED_RGTC1}
 *
 *  @ingroup smart_enums
 */
struct CompressedSignedRedRGTC1 {

/// Conversion to any @p Enum type having the CompressedSignedRedRGTC1 value.
/** Instances of the @ref oglplus::smart_enums::CompressedSignedRedRGTC1 "CompressedSignedRedRGTC1"
 *  type are convertible to instances of any enumeration type having
 *  the @c CompressedSignedRedRGTC1 value.
 */
template <typename Enum, Enum = Enum::CompressedSignedRedRGTC1> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CompressedSignedRedRGTC1 value.
/** Instances of the @c smart_enums::CompressedSignedRedRGTC1 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CompressedSignedRedRGTC1 value.
 */
template <typename Enum> friend bool operator==(Enum value, CompressedSignedRedRGTC1);

/// Non-equality comparison with any @p Enum type having the CompressedSignedRedRGTC1 value.
/** Instances of the @c smart_enums::CompressedSignedRedRGTC1 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CompressedSignedRedRGTC1 value.
 */
template <typename Enum> friend bool operator!=(Enum value, CompressedSignedRedRGTC1);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CompressedSignedRG11EAC value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{COMPRESSED_SIGNED_RG11_EAC}
 *
 *  @ingroup smart_enums
 */
struct CompressedSignedRG11EAC {

/// Conversion to any @p Enum type having the CompressedSignedRG11EAC value.
/** Instances of the @ref oglplus::smart_enums::CompressedSignedRG11EAC "CompressedSignedRG11EAC"
 *  type are convertible to instances of any enumeration type having
 *  the @c CompressedSignedRG11EAC value.
 */
template <typename Enum, Enum = Enum::CompressedSignedRG11EAC> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CompressedSignedRG11EAC value.
/** Instances of the @c smart_enums::CompressedSignedRG11EAC type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CompressedSignedRG11EAC value.
 */
template <typename Enum> friend bool operator==(Enum value, CompressedSignedRG11EAC);

/// Non-equality comparison with any @p Enum type having the CompressedSignedRG11EAC value.
/** Instances of the @c smart_enums::CompressedSignedRG11EAC type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CompressedSignedRG11EAC value.
 */
template <typename Enum> friend bool operator!=(Enum value, CompressedSignedRG11EAC);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CompressedSignedRGRGTC2 value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{COMPRESSED_SIGNED_RG_RGTC2}
 *
 *  @ingroup smart_enums
 */
struct CompressedSignedRGRGTC2 {

/// Conversion to any @p Enum type having the CompressedSignedRGRGTC2 value.
/** Instances of the @ref oglplus::smart_enums::CompressedSignedRGRGTC2 "CompressedSignedRGRGTC2"
 *  type are convertible to instances of any enumeration type having
 *  the @c CompressedSignedRGRGTC2 value.
 */
template <typename Enum, Enum = Enum::CompressedSignedRGRGTC2> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CompressedSignedRGRGTC2 value.
/** Instances of the @c smart_enums::CompressedSignedRGRGTC2 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CompressedSignedRGRGTC2 value.
 */
template <typename Enum> friend bool operator==(Enum value, CompressedSignedRGRGTC2);

/// Non-equality comparison with any @p Enum type having the CompressedSignedRGRGTC2 value.
/** Instances of the @c smart_enums::CompressedSignedRGRGTC2 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CompressedSignedRGRGTC2 value.
 */
template <typename Enum> friend bool operator!=(Enum value, CompressedSignedRGRGTC2);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CompressedSRGB value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{COMPRESSED_SRGB}
 *
 *  @ingroup smart_enums
 */
struct CompressedSRGB {

/// Conversion to any @p Enum type having the CompressedSRGB value.
/** Instances of the @ref oglplus::smart_enums::CompressedSRGB "CompressedSRGB"
 *  type are convertible to instances of any enumeration type having
 *  the @c CompressedSRGB value.
 */
template <typename Enum, Enum = Enum::CompressedSRGB> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CompressedSRGB value.
/** Instances of the @c smart_enums::CompressedSRGB type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CompressedSRGB value.
 */
template <typename Enum> friend bool operator==(Enum value, CompressedSRGB);

/// Non-equality comparison with any @p Enum type having the CompressedSRGB value.
/** Instances of the @c smart_enums::CompressedSRGB type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CompressedSRGB value.
 */
template <typename Enum> friend bool operator!=(Enum value, CompressedSRGB);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CompressedSRGB8Alpha8ETC2EAC value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{COMPRESSED_SRGB8_ALPHA8_ETC2_EAC}
 *
 *  @ingroup smart_enums
 */
struct CompressedSRGB8Alpha8ETC2EAC {

/// Conversion to any @p Enum type having the CompressedSRGB8Alpha8ETC2EAC value.
/** Instances of the @ref oglplus::smart_enums::CompressedSRGB8Alpha8ETC2EAC "CompressedSRGB8Alpha8ETC2EAC"
 *  type are convertible to instances of any enumeration type having
 *  the @c CompressedSRGB8Alpha8ETC2EAC value.
 */
template <typename Enum, Enum = Enum::CompressedSRGB8Alpha8ETC2EAC> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CompressedSRGB8Alpha8ETC2EAC value.
/** Instances of the @c smart_enums::CompressedSRGB8Alpha8ETC2EAC type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CompressedSRGB8Alpha8ETC2EAC value.
 */
template <typename Enum> friend bool operator==(Enum value, CompressedSRGB8Alpha8ETC2EAC);

/// Non-equality comparison with any @p Enum type having the CompressedSRGB8Alpha8ETC2EAC value.
/** Instances of the @c smart_enums::CompressedSRGB8Alpha8ETC2EAC type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CompressedSRGB8Alpha8ETC2EAC value.
 */
template <typename Enum> friend bool operator!=(Enum value, CompressedSRGB8Alpha8ETC2EAC);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CompressedSRGB8ETC2 value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{COMPRESSED_SRGB8_ETC2}
 *
 *  @ingroup smart_enums
 */
struct CompressedSRGB8ETC2 {

/// Conversion to any @p Enum type having the CompressedSRGB8ETC2 value.
/** Instances of the @ref oglplus::smart_enums::CompressedSRGB8ETC2 "CompressedSRGB8ETC2"
 *  type are convertible to instances of any enumeration type having
 *  the @c CompressedSRGB8ETC2 value.
 */
template <typename Enum, Enum = Enum::CompressedSRGB8ETC2> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CompressedSRGB8ETC2 value.
/** Instances of the @c smart_enums::CompressedSRGB8ETC2 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CompressedSRGB8ETC2 value.
 */
template <typename Enum> friend bool operator==(Enum value, CompressedSRGB8ETC2);

/// Non-equality comparison with any @p Enum type having the CompressedSRGB8ETC2 value.
/** Instances of the @c smart_enums::CompressedSRGB8ETC2 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CompressedSRGB8ETC2 value.
 */
template <typename Enum> friend bool operator!=(Enum value, CompressedSRGB8ETC2);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CompressedSRGB8PunchthroughAlpha1ETC2 value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2}
 *
 *  @ingroup smart_enums
 */
struct CompressedSRGB8PunchthroughAlpha1ETC2 {

/// Conversion to any @p Enum type having the CompressedSRGB8PunchthroughAlpha1ETC2 value.
/** Instances of the @ref oglplus::smart_enums::CompressedSRGB8PunchthroughAlpha1ETC2 "CompressedSRGB8PunchthroughAlpha1ETC2"
 *  type are convertible to instances of any enumeration type having
 *  the @c CompressedSRGB8PunchthroughAlpha1ETC2 value.
 */
template <typename Enum, Enum = Enum::CompressedSRGB8PunchthroughAlpha1ETC2> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CompressedSRGB8PunchthroughAlpha1ETC2 value.
/** Instances of the @c smart_enums::CompressedSRGB8PunchthroughAlpha1ETC2 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CompressedSRGB8PunchthroughAlpha1ETC2 value.
 */
template <typename Enum> friend bool operator==(Enum value, CompressedSRGB8PunchthroughAlpha1ETC2);

/// Non-equality comparison with any @p Enum type having the CompressedSRGB8PunchthroughAlpha1ETC2 value.
/** Instances of the @c smart_enums::CompressedSRGB8PunchthroughAlpha1ETC2 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CompressedSRGB8PunchthroughAlpha1ETC2 value.
 */
template <typename Enum> friend bool operator!=(Enum value, CompressedSRGB8PunchthroughAlpha1ETC2);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CompressedSRGBAlpha value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{COMPRESSED_SRGB_ALPHA}
 *
 *  @ingroup smart_enums
 */
struct CompressedSRGBAlpha {

/// Conversion to any @p Enum type having the CompressedSRGBAlpha value.
/** Instances of the @ref oglplus::smart_enums::CompressedSRGBAlpha "CompressedSRGBAlpha"
 *  type are convertible to instances of any enumeration type having
 *  the @c CompressedSRGBAlpha value.
 */
template <typename Enum, Enum = Enum::CompressedSRGBAlpha> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CompressedSRGBAlpha value.
/** Instances of the @c smart_enums::CompressedSRGBAlpha type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CompressedSRGBAlpha value.
 */
template <typename Enum> friend bool operator==(Enum value, CompressedSRGBAlpha);

/// Non-equality comparison with any @p Enum type having the CompressedSRGBAlpha value.
/** Instances of the @c smart_enums::CompressedSRGBAlpha type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CompressedSRGBAlpha value.
 */
template <typename Enum> friend bool operator!=(Enum value, CompressedSRGBAlpha);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CompressedSRGBAlphaBPTCUNorm value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{COMPRESSED_SRGB_ALPHA_BPTC_UNORM}
 *
 *  @ingroup smart_enums
 */
struct CompressedSRGBAlphaBPTCUNorm {

/// Conversion to any @p Enum type having the CompressedSRGBAlphaBPTCUNorm value.
/** Instances of the @ref oglplus::smart_enums::CompressedSRGBAlphaBPTCUNorm "CompressedSRGBAlphaBPTCUNorm"
 *  type are convertible to instances of any enumeration type having
 *  the @c CompressedSRGBAlphaBPTCUNorm value.
 */
template <typename Enum, Enum = Enum::CompressedSRGBAlphaBPTCUNorm> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CompressedSRGBAlphaBPTCUNorm value.
/** Instances of the @c smart_enums::CompressedSRGBAlphaBPTCUNorm type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CompressedSRGBAlphaBPTCUNorm value.
 */
template <typename Enum> friend bool operator==(Enum value, CompressedSRGBAlphaBPTCUNorm);

/// Non-equality comparison with any @p Enum type having the CompressedSRGBAlphaBPTCUNorm value.
/** Instances of the @c smart_enums::CompressedSRGBAlphaBPTCUNorm type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CompressedSRGBAlphaBPTCUNorm value.
 */
template <typename Enum> friend bool operator!=(Enum value, CompressedSRGBAlphaBPTCUNorm);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Compute value.
/**
 *  @see @ref oglplus::ShaderType "ShaderType"
 *
 *  @glsymbols
 *  @gldefref{COMPUTE_SHADER}
 *
 *  @ingroup smart_enums
 */
struct Compute {

/// Conversion to any @p Enum type having the Compute value.
/** Instances of the @ref oglplus::smart_enums::Compute "Compute"
 *  type are convertible to instances of any enumeration type having
 *  the @c Compute value.
 */
template <typename Enum, Enum = Enum::Compute> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Compute value.
/** Instances of the @c smart_enums::Compute type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Compute value.
 */
template <typename Enum> friend bool operator==(Enum value, Compute);

/// Non-equality comparison with any @p Enum type having the Compute value.
/** Instances of the @c smart_enums::Compute type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Compute value.
 */
template <typename Enum> friend bool operator!=(Enum value, Compute);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ComputeShader value.
/**
 *  @see @ref oglplus::ProgramPipelineStage "ProgramPipelineStage"
 *
 *  @glsymbols
 *  @gldefref{COMPUTE_SHADER_BIT}
 *
 *  @ingroup smart_enums
 */
struct ComputeShader {

/// Conversion to any @p Enum type having the ComputeShader value.
/** Instances of the @ref oglplus::smart_enums::ComputeShader "ComputeShader"
 *  type are convertible to instances of any enumeration type having
 *  the @c ComputeShader value.
 */
template <typename Enum, Enum = Enum::ComputeShader> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ComputeShader value.
/** Instances of the @c smart_enums::ComputeShader type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ComputeShader value.
 */
template <typename Enum> friend bool operator==(Enum value, ComputeShader);

/// Non-equality comparison with any @p Enum type having the ComputeShader value.
/** Instances of the @c smart_enums::ComputeShader type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ComputeShader value.
 */
template <typename Enum> friend bool operator!=(Enum value, ComputeShader);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ComputeSubroutine value.
/**
 *  @see @ref oglplus::ProgramInterface "ProgramInterface"
 *
 *  @glsymbols
 *  @gldefref{COMPUTE_SUBROUTINE}
 *
 *  @ingroup smart_enums
 */
struct ComputeSubroutine {

/// Conversion to any @p Enum type having the ComputeSubroutine value.
/** Instances of the @ref oglplus::smart_enums::ComputeSubroutine "ComputeSubroutine"
 *  type are convertible to instances of any enumeration type having
 *  the @c ComputeSubroutine value.
 */
template <typename Enum, Enum = Enum::ComputeSubroutine> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ComputeSubroutine value.
/** Instances of the @c smart_enums::ComputeSubroutine type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ComputeSubroutine value.
 */
template <typename Enum> friend bool operator==(Enum value, ComputeSubroutine);

/// Non-equality comparison with any @p Enum type having the ComputeSubroutine value.
/** Instances of the @c smart_enums::ComputeSubroutine type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ComputeSubroutine value.
 */
template <typename Enum> friend bool operator!=(Enum value, ComputeSubroutine);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ComputeSubroutineUniform value.
/**
 *  @see @ref oglplus::ProgramInterface "ProgramInterface"
 *
 *  @glsymbols
 *  @gldefref{COMPUTE_SUBROUTINE_UNIFORM}
 *
 *  @ingroup smart_enums
 */
struct ComputeSubroutineUniform {

/// Conversion to any @p Enum type having the ComputeSubroutineUniform value.
/** Instances of the @ref oglplus::smart_enums::ComputeSubroutineUniform "ComputeSubroutineUniform"
 *  type are convertible to instances of any enumeration type having
 *  the @c ComputeSubroutineUniform value.
 */
template <typename Enum, Enum = Enum::ComputeSubroutineUniform> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ComputeSubroutineUniform value.
/** Instances of the @c smart_enums::ComputeSubroutineUniform type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ComputeSubroutineUniform value.
 */
template <typename Enum> friend bool operator==(Enum value, ComputeSubroutineUniform);

/// Non-equality comparison with any @p Enum type having the ComputeSubroutineUniform value.
/** Instances of the @c smart_enums::ComputeSubroutineUniform type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ComputeSubroutineUniform value.
 */
template <typename Enum> friend bool operator!=(Enum value, ComputeSubroutineUniform);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ConditionSatisfied value.
/**
 *  @see @ref oglplus::SyncWaitResult "SyncWaitResult"
 *
 *  @glsymbols
 *  @gldefref{CONDITION_SATISFIED}
 *
 *  @ingroup smart_enums
 */
struct ConditionSatisfied {

/// Conversion to any @p Enum type having the ConditionSatisfied value.
/** Instances of the @ref oglplus::smart_enums::ConditionSatisfied "ConditionSatisfied"
 *  type are convertible to instances of any enumeration type having
 *  the @c ConditionSatisfied value.
 */
template <typename Enum, Enum = Enum::ConditionSatisfied> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ConditionSatisfied value.
/** Instances of the @c smart_enums::ConditionSatisfied type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ConditionSatisfied value.
 */
template <typename Enum> friend bool operator==(Enum value, ConditionSatisfied);

/// Non-equality comparison with any @p Enum type having the ConditionSatisfied value.
/** Instances of the @c smart_enums::ConditionSatisfied type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ConditionSatisfied value.
 */
template <typename Enum> friend bool operator!=(Enum value, ConditionSatisfied);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ConstantAlpha value.
/**
 *  @see @ref oglplus::BlendFunction "BlendFunction"
 *
 *  @glsymbols
 *  @gldefref{CONSTANT_ALPHA}
 *
 *  @ingroup smart_enums
 */
struct ConstantAlpha {

/// Conversion to any @p Enum type having the ConstantAlpha value.
/** Instances of the @ref oglplus::smart_enums::ConstantAlpha "ConstantAlpha"
 *  type are convertible to instances of any enumeration type having
 *  the @c ConstantAlpha value.
 */
template <typename Enum, Enum = Enum::ConstantAlpha> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ConstantAlpha value.
/** Instances of the @c smart_enums::ConstantAlpha type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ConstantAlpha value.
 */
template <typename Enum> friend bool operator==(Enum value, ConstantAlpha);

/// Non-equality comparison with any @p Enum type having the ConstantAlpha value.
/** Instances of the @c smart_enums::ConstantAlpha type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ConstantAlpha value.
 */
template <typename Enum> friend bool operator!=(Enum value, ConstantAlpha);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ConstantColor value.
/**
 *  @see @ref oglplus::BlendFunction "BlendFunction"
 *
 *  @glsymbols
 *  @gldefref{CONSTANT_COLOR}
 *
 *  @ingroup smart_enums
 */
struct ConstantColor {

/// Conversion to any @p Enum type having the ConstantColor value.
/** Instances of the @ref oglplus::smart_enums::ConstantColor "ConstantColor"
 *  type are convertible to instances of any enumeration type having
 *  the @c ConstantColor value.
 */
template <typename Enum, Enum = Enum::ConstantColor> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ConstantColor value.
/** Instances of the @c smart_enums::ConstantColor type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ConstantColor value.
 */
template <typename Enum> friend bool operator==(Enum value, ConstantColor);

/// Non-equality comparison with any @p Enum type having the ConstantColor value.
/** Instances of the @c smart_enums::ConstantColor type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ConstantColor value.
 */
template <typename Enum> friend bool operator!=(Enum value, ConstantColor);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ConvexHull value.
/**
 *  @see @ref oglplus::PathNVFillCoverMode "PathNVFillCoverMode"
 *  @see @ref oglplus::PathNVStrokeCoverMode "PathNVStrokeCoverMode"
 *
 *  @glsymbols
 *  @gldefref{CONVEX_HULL_NV}
 *
 *  @ingroup smart_enums
 */
struct ConvexHull {

/// Conversion to any @p Enum type having the ConvexHull value.
/** Instances of the @ref oglplus::smart_enums::ConvexHull "ConvexHull"
 *  type are convertible to instances of any enumeration type having
 *  the @c ConvexHull value.
 */
template <typename Enum, Enum = Enum::ConvexHull> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ConvexHull value.
/** Instances of the @c smart_enums::ConvexHull type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ConvexHull value.
 */
template <typename Enum> friend bool operator==(Enum value, ConvexHull);

/// Non-equality comparison with any @p Enum type having the ConvexHull value.
/** Instances of the @c smart_enums::ConvexHull type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ConvexHull value.
 */
template <typename Enum> friend bool operator!=(Enum value, ConvexHull);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Copy value.
/**
 *  @see @ref oglplus::ColorLogicOperation "ColorLogicOperation"
 *
 *  @glsymbols
 *  @gldefref{COPY}
 *
 *  @ingroup smart_enums
 */
struct Copy {

/// Conversion to any @p Enum type having the Copy value.
/** Instances of the @ref oglplus::smart_enums::Copy "Copy"
 *  type are convertible to instances of any enumeration type having
 *  the @c Copy value.
 */
template <typename Enum, Enum = Enum::Copy> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Copy value.
/** Instances of the @c smart_enums::Copy type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Copy value.
 */
template <typename Enum> friend bool operator==(Enum value, Copy);

/// Non-equality comparison with any @p Enum type having the Copy value.
/** Instances of the @c smart_enums::Copy type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Copy value.
 */
template <typename Enum> friend bool operator!=(Enum value, Copy);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CopyInverted value.
/**
 *  @see @ref oglplus::ColorLogicOperation "ColorLogicOperation"
 *
 *  @glsymbols
 *  @gldefref{COPY_INVERTED}
 *
 *  @ingroup smart_enums
 */
struct CopyInverted {

/// Conversion to any @p Enum type having the CopyInverted value.
/** Instances of the @ref oglplus::smart_enums::CopyInverted "CopyInverted"
 *  type are convertible to instances of any enumeration type having
 *  the @c CopyInverted value.
 */
template <typename Enum, Enum = Enum::CopyInverted> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CopyInverted value.
/** Instances of the @c smart_enums::CopyInverted type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CopyInverted value.
 */
template <typename Enum> friend bool operator==(Enum value, CopyInverted);

/// Non-equality comparison with any @p Enum type having the CopyInverted value.
/** Instances of the @c smart_enums::CopyInverted type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CopyInverted value.
 */
template <typename Enum> friend bool operator!=(Enum value, CopyInverted);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CopyRead value.
/**
 *  @see @ref oglplus::BufferTarget "BufferTarget"
 *
 *  @glsymbols
 *  @gldefref{COPY_READ_BUFFER}
 *
 *  @ingroup smart_enums
 */
struct CopyRead {

/// Conversion to any @p Enum type having the CopyRead value.
/** Instances of the @ref oglplus::smart_enums::CopyRead "CopyRead"
 *  type are convertible to instances of any enumeration type having
 *  the @c CopyRead value.
 */
template <typename Enum, Enum = Enum::CopyRead> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CopyRead value.
/** Instances of the @c smart_enums::CopyRead type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CopyRead value.
 */
template <typename Enum> friend bool operator==(Enum value, CopyRead);

/// Non-equality comparison with any @p Enum type having the CopyRead value.
/** Instances of the @c smart_enums::CopyRead type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CopyRead value.
 */
template <typename Enum> friend bool operator!=(Enum value, CopyRead);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CopyWrite value.
/**
 *  @see @ref oglplus::BufferTarget "BufferTarget"
 *
 *  @glsymbols
 *  @gldefref{COPY_WRITE_BUFFER}
 *
 *  @ingroup smart_enums
 */
struct CopyWrite {

/// Conversion to any @p Enum type having the CopyWrite value.
/** Instances of the @ref oglplus::smart_enums::CopyWrite "CopyWrite"
 *  type are convertible to instances of any enumeration type having
 *  the @c CopyWrite value.
 */
template <typename Enum, Enum = Enum::CopyWrite> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CopyWrite value.
/** Instances of the @c smart_enums::CopyWrite type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CopyWrite value.
 */
template <typename Enum> friend bool operator==(Enum value, CopyWrite);

/// Non-equality comparison with any @p Enum type having the CopyWrite value.
/** Instances of the @c smart_enums::CopyWrite type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CopyWrite value.
 */
template <typename Enum> friend bool operator!=(Enum value, CopyWrite);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Core value.
/**
 *  @see @ref oglplus::ContextProfileBit "ContextProfileBit"
 *
 *  @glsymbols
 *  @gldefref{CONTEXT_CORE_PROFILE_BIT}
 *
 *  @ingroup smart_enums
 */
struct Core {

/// Conversion to any @p Enum type having the Core value.
/** Instances of the @ref oglplus::smart_enums::Core "Core"
 *  type are convertible to instances of any enumeration type having
 *  the @c Core value.
 */
template <typename Enum, Enum = Enum::Core> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Core value.
/** Instances of the @c smart_enums::Core type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Core value.
 */
template <typename Enum> friend bool operator==(Enum value, Core);

/// Non-equality comparison with any @p Enum type having the Core value.
/** Instances of the @c smart_enums::Core type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Core value.
 */
template <typename Enum> friend bool operator!=(Enum value, Core);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CountDown value.
/**
 *  @see @ref oglplus::PathNVFillMode "PathNVFillMode"
 *
 *  @glsymbols
 *  @gldefref{COUNT_DOWN_NV}
 *
 *  @ingroup smart_enums
 */
struct CountDown {

/// Conversion to any @p Enum type having the CountDown value.
/** Instances of the @ref oglplus::smart_enums::CountDown "CountDown"
 *  type are convertible to instances of any enumeration type having
 *  the @c CountDown value.
 */
template <typename Enum, Enum = Enum::CountDown> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CountDown value.
/** Instances of the @c smart_enums::CountDown type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CountDown value.
 */
template <typename Enum> friend bool operator==(Enum value, CountDown);

/// Non-equality comparison with any @p Enum type having the CountDown value.
/** Instances of the @c smart_enums::CountDown type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CountDown value.
 */
template <typename Enum> friend bool operator!=(Enum value, CountDown);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CountUp value.
/**
 *  @see @ref oglplus::PathNVFillMode "PathNVFillMode"
 *
 *  @glsymbols
 *  @gldefref{COUNT_UP_NV}
 *
 *  @ingroup smart_enums
 */
struct CountUp {

/// Conversion to any @p Enum type having the CountUp value.
/** Instances of the @ref oglplus::smart_enums::CountUp "CountUp"
 *  type are convertible to instances of any enumeration type having
 *  the @c CountUp value.
 */
template <typename Enum, Enum = Enum::CountUp> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CountUp value.
/** Instances of the @c smart_enums::CountUp type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CountUp value.
 */
template <typename Enum> friend bool operator==(Enum value, CountUp);

/// Non-equality comparison with any @p Enum type having the CountUp value.
/** Instances of the @c smart_enums::CountUp type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CountUp value.
 */
template <typename Enum> friend bool operator!=(Enum value, CountUp);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CubeMap value.
/**
 *  @see @ref oglplus::TextureTarget "TextureTarget"
 *
 *  @glsymbols
 *  @gldefref{TEXTURE_CUBE_MAP}
 *
 *  @ingroup smart_enums
 */
struct CubeMap {

/// Conversion to any @p Enum type having the CubeMap value.
/** Instances of the @ref oglplus::smart_enums::CubeMap "CubeMap"
 *  type are convertible to instances of any enumeration type having
 *  the @c CubeMap value.
 */
template <typename Enum, Enum = Enum::CubeMap> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CubeMap value.
/** Instances of the @c smart_enums::CubeMap type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CubeMap value.
 */
template <typename Enum> friend bool operator==(Enum value, CubeMap);

/// Non-equality comparison with any @p Enum type having the CubeMap value.
/** Instances of the @c smart_enums::CubeMap type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CubeMap value.
 */
template <typename Enum> friend bool operator!=(Enum value, CubeMap);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CubeMapArray value.
/**
 *  @see @ref oglplus::TextureTarget "TextureTarget"
 *
 *  @glsymbols
 *  @gldefref{TEXTURE_CUBE_MAP_ARRAY}
 *
 *  @ingroup smart_enums
 */
struct CubeMapArray {

/// Conversion to any @p Enum type having the CubeMapArray value.
/** Instances of the @ref oglplus::smart_enums::CubeMapArray "CubeMapArray"
 *  type are convertible to instances of any enumeration type having
 *  the @c CubeMapArray value.
 */
template <typename Enum, Enum = Enum::CubeMapArray> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CubeMapArray value.
/** Instances of the @c smart_enums::CubeMapArray type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CubeMapArray value.
 */
template <typename Enum> friend bool operator==(Enum value, CubeMapArray);

/// Non-equality comparison with any @p Enum type having the CubeMapArray value.
/** Instances of the @c smart_enums::CubeMapArray type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CubeMapArray value.
 */
template <typename Enum> friend bool operator!=(Enum value, CubeMapArray);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CubeMapNegativeX value.
/**
 *  @see @ref oglplus::TextureTarget "TextureTarget"
 *
 *  @glsymbols
 *  @gldefref{TEXTURE_CUBE_MAP_NEGATIVE_X}
 *
 *  @ingroup smart_enums
 */
struct CubeMapNegativeX {

/// Conversion to any @p Enum type having the CubeMapNegativeX value.
/** Instances of the @ref oglplus::smart_enums::CubeMapNegativeX "CubeMapNegativeX"
 *  type are convertible to instances of any enumeration type having
 *  the @c CubeMapNegativeX value.
 */
template <typename Enum, Enum = Enum::CubeMapNegativeX> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CubeMapNegativeX value.
/** Instances of the @c smart_enums::CubeMapNegativeX type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CubeMapNegativeX value.
 */
template <typename Enum> friend bool operator==(Enum value, CubeMapNegativeX);

/// Non-equality comparison with any @p Enum type having the CubeMapNegativeX value.
/** Instances of the @c smart_enums::CubeMapNegativeX type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CubeMapNegativeX value.
 */
template <typename Enum> friend bool operator!=(Enum value, CubeMapNegativeX);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CubeMapNegativeY value.
/**
 *  @see @ref oglplus::TextureTarget "TextureTarget"
 *
 *  @glsymbols
 *  @gldefref{TEXTURE_CUBE_MAP_NEGATIVE_Y}
 *
 *  @ingroup smart_enums
 */
struct CubeMapNegativeY {

/// Conversion to any @p Enum type having the CubeMapNegativeY value.
/** Instances of the @ref oglplus::smart_enums::CubeMapNegativeY "CubeMapNegativeY"
 *  type are convertible to instances of any enumeration type having
 *  the @c CubeMapNegativeY value.
 */
template <typename Enum, Enum = Enum::CubeMapNegativeY> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CubeMapNegativeY value.
/** Instances of the @c smart_enums::CubeMapNegativeY type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CubeMapNegativeY value.
 */
template <typename Enum> friend bool operator==(Enum value, CubeMapNegativeY);

/// Non-equality comparison with any @p Enum type having the CubeMapNegativeY value.
/** Instances of the @c smart_enums::CubeMapNegativeY type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CubeMapNegativeY value.
 */
template <typename Enum> friend bool operator!=(Enum value, CubeMapNegativeY);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CubeMapNegativeZ value.
/**
 *  @see @ref oglplus::TextureTarget "TextureTarget"
 *
 *  @glsymbols
 *  @gldefref{TEXTURE_CUBE_MAP_NEGATIVE_Z}
 *
 *  @ingroup smart_enums
 */
struct CubeMapNegativeZ {

/// Conversion to any @p Enum type having the CubeMapNegativeZ value.
/** Instances of the @ref oglplus::smart_enums::CubeMapNegativeZ "CubeMapNegativeZ"
 *  type are convertible to instances of any enumeration type having
 *  the @c CubeMapNegativeZ value.
 */
template <typename Enum, Enum = Enum::CubeMapNegativeZ> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CubeMapNegativeZ value.
/** Instances of the @c smart_enums::CubeMapNegativeZ type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CubeMapNegativeZ value.
 */
template <typename Enum> friend bool operator==(Enum value, CubeMapNegativeZ);

/// Non-equality comparison with any @p Enum type having the CubeMapNegativeZ value.
/** Instances of the @c smart_enums::CubeMapNegativeZ type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CubeMapNegativeZ value.
 */
template <typename Enum> friend bool operator!=(Enum value, CubeMapNegativeZ);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CubeMapPositiveX value.
/**
 *  @see @ref oglplus::TextureTarget "TextureTarget"
 *
 *  @glsymbols
 *  @gldefref{TEXTURE_CUBE_MAP_POSITIVE_X}
 *
 *  @ingroup smart_enums
 */
struct CubeMapPositiveX {

/// Conversion to any @p Enum type having the CubeMapPositiveX value.
/** Instances of the @ref oglplus::smart_enums::CubeMapPositiveX "CubeMapPositiveX"
 *  type are convertible to instances of any enumeration type having
 *  the @c CubeMapPositiveX value.
 */
template <typename Enum, Enum = Enum::CubeMapPositiveX> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CubeMapPositiveX value.
/** Instances of the @c smart_enums::CubeMapPositiveX type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CubeMapPositiveX value.
 */
template <typename Enum> friend bool operator==(Enum value, CubeMapPositiveX);

/// Non-equality comparison with any @p Enum type having the CubeMapPositiveX value.
/** Instances of the @c smart_enums::CubeMapPositiveX type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CubeMapPositiveX value.
 */
template <typename Enum> friend bool operator!=(Enum value, CubeMapPositiveX);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CubeMapPositiveY value.
/**
 *  @see @ref oglplus::TextureTarget "TextureTarget"
 *
 *  @glsymbols
 *  @gldefref{TEXTURE_CUBE_MAP_POSITIVE_Y}
 *
 *  @ingroup smart_enums
 */
struct CubeMapPositiveY {

/// Conversion to any @p Enum type having the CubeMapPositiveY value.
/** Instances of the @ref oglplus::smart_enums::CubeMapPositiveY "CubeMapPositiveY"
 *  type are convertible to instances of any enumeration type having
 *  the @c CubeMapPositiveY value.
 */
template <typename Enum, Enum = Enum::CubeMapPositiveY> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CubeMapPositiveY value.
/** Instances of the @c smart_enums::CubeMapPositiveY type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CubeMapPositiveY value.
 */
template <typename Enum> friend bool operator==(Enum value, CubeMapPositiveY);

/// Non-equality comparison with any @p Enum type having the CubeMapPositiveY value.
/** Instances of the @c smart_enums::CubeMapPositiveY type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CubeMapPositiveY value.
 */
template <typename Enum> friend bool operator!=(Enum value, CubeMapPositiveY);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CubeMapPositiveZ value.
/**
 *  @see @ref oglplus::TextureTarget "TextureTarget"
 *
 *  @glsymbols
 *  @gldefref{TEXTURE_CUBE_MAP_POSITIVE_Z}
 *
 *  @ingroup smart_enums
 */
struct CubeMapPositiveZ {

/// Conversion to any @p Enum type having the CubeMapPositiveZ value.
/** Instances of the @ref oglplus::smart_enums::CubeMapPositiveZ "CubeMapPositiveZ"
 *  type are convertible to instances of any enumeration type having
 *  the @c CubeMapPositiveZ value.
 */
template <typename Enum, Enum = Enum::CubeMapPositiveZ> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CubeMapPositiveZ value.
/** Instances of the @c smart_enums::CubeMapPositiveZ type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CubeMapPositiveZ value.
 */
template <typename Enum> friend bool operator==(Enum value, CubeMapPositiveZ);

/// Non-equality comparison with any @p Enum type having the CubeMapPositiveZ value.
/** Instances of the @c smart_enums::CubeMapPositiveZ type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CubeMapPositiveZ value.
 */
template <typename Enum> friend bool operator!=(Enum value, CubeMapPositiveZ);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CubicCurveTo value.
/**
 *  @see @ref oglplus::PathNVCommand "PathNVCommand"
 *
 *  @glsymbols
 *  @gldefref{CUBIC_CURVE_TO_NV}
 *
 *  @ingroup smart_enums
 */
struct CubicCurveTo {

/// Conversion to any @p Enum type having the CubicCurveTo value.
/** Instances of the @ref oglplus::smart_enums::CubicCurveTo "CubicCurveTo"
 *  type are convertible to instances of any enumeration type having
 *  the @c CubicCurveTo value.
 */
template <typename Enum, Enum = Enum::CubicCurveTo> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CubicCurveTo value.
/** Instances of the @c smart_enums::CubicCurveTo type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CubicCurveTo value.
 */
template <typename Enum> friend bool operator==(Enum value, CubicCurveTo);

/// Non-equality comparison with any @p Enum type having the CubicCurveTo value.
/** Instances of the @c smart_enums::CubicCurveTo type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CubicCurveTo value.
 */
template <typename Enum> friend bool operator!=(Enum value, CubicCurveTo);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CullFace value.
/**
 *  @see @ref oglplus::Capability "Capability"
 *
 *  @glsymbols
 *  @gldefref{CULL_FACE}
 *
 *  @ingroup smart_enums
 */
struct CullFace {

/// Conversion to any @p Enum type having the CullFace value.
/** Instances of the @ref oglplus::smart_enums::CullFace "CullFace"
 *  type are convertible to instances of any enumeration type having
 *  the @c CullFace value.
 */
template <typename Enum, Enum = Enum::CullFace> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CullFace value.
/** Instances of the @c smart_enums::CullFace type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CullFace value.
 */
template <typename Enum> friend bool operator==(Enum value, CullFace);

/// Non-equality comparison with any @p Enum type having the CullFace value.
/** Instances of the @c smart_enums::CullFace type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CullFace value.
 */
template <typename Enum> friend bool operator!=(Enum value, CullFace);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Current value.
/**
 *  @see @ref oglplus::CompatibilityAttributeGroup "CompatibilityAttributeGroup"
 *
 *  @glsymbols
 *  @gldefref{CURRENT_BIT}
 *
 *  @ingroup smart_enums
 */
struct Current {

/// Conversion to any @p Enum type having the Current value.
/** Instances of the @ref oglplus::smart_enums::Current "Current"
 *  type are convertible to instances of any enumeration type having
 *  the @c Current value.
 */
template <typename Enum, Enum = Enum::Current> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Current value.
/** Instances of the @c smart_enums::Current type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Current value.
 */
template <typename Enum> friend bool operator==(Enum value, Current);

/// Non-equality comparison with any @p Enum type having the Current value.
/** Instances of the @c smart_enums::Current type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Current value.
 */
template <typename Enum> friend bool operator!=(Enum value, Current);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c CW value.
/**
 *  @see @ref oglplus::FaceOrientation "FaceOrientation"
 *
 *  @glsymbols
 *  @gldefref{CW}
 *
 *  @ingroup smart_enums
 */
struct CW {

/// Conversion to any @p Enum type having the CW value.
/** Instances of the @ref oglplus::smart_enums::CW "CW"
 *  type are convertible to instances of any enumeration type having
 *  the @c CW value.
 */
template <typename Enum, Enum = Enum::CW> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the CW value.
/** Instances of the @c smart_enums::CW type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c CW value.
 */
template <typename Enum> friend bool operator==(Enum value, CW);

/// Non-equality comparison with any @p Enum type having the CW value.
/** Instances of the @c smart_enums::CW type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c CW value.
 */
template <typename Enum> friend bool operator!=(Enum value, CW);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Debug value.
/**
 *  @see @ref oglplus::ContextFlagBit "ContextFlagBit"
 *
 *  @glsymbols
 *  @gldefref{CONTEXT_FLAG_DEBUG_BIT}
 *
 *  @ingroup smart_enums
 */
struct Debug {

/// Conversion to any @p Enum type having the Debug value.
/** Instances of the @ref oglplus::smart_enums::Debug "Debug"
 *  type are convertible to instances of any enumeration type having
 *  the @c Debug value.
 */
template <typename Enum, Enum = Enum::Debug> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Debug value.
/** Instances of the @c smart_enums::Debug type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Debug value.
 */
template <typename Enum> friend bool operator==(Enum value, Debug);

/// Non-equality comparison with any @p Enum type having the Debug value.
/** Instances of the @c smart_enums::Debug type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Debug value.
 */
template <typename Enum> friend bool operator!=(Enum value, Debug);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c DebugOutputSynchronous value.
/**
 *  @see @ref oglplus::Capability "Capability"
 *
 *  @glsymbols
 *  @gldefref{DEBUG_OUTPUT_SYNCHRONOUS}
 *
 *  @ingroup smart_enums
 */
struct DebugOutputSynchronous {

/// Conversion to any @p Enum type having the DebugOutputSynchronous value.
/** Instances of the @ref oglplus::smart_enums::DebugOutputSynchronous "DebugOutputSynchronous"
 *  type are convertible to instances of any enumeration type having
 *  the @c DebugOutputSynchronous value.
 */
template <typename Enum, Enum = Enum::DebugOutputSynchronous> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the DebugOutputSynchronous value.
/** Instances of the @c smart_enums::DebugOutputSynchronous type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c DebugOutputSynchronous value.
 */
template <typename Enum> friend bool operator==(Enum value, DebugOutputSynchronous);

/// Non-equality comparison with any @p Enum type having the DebugOutputSynchronous value.
/** Instances of the @c smart_enums::DebugOutputSynchronous type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c DebugOutputSynchronous value.
 */
template <typename Enum> friend bool operator!=(Enum value, DebugOutputSynchronous);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Decr value.
/**
 *  @see @ref oglplus::StencilOperation "StencilOperation"
 *
 *  @glsymbols
 *  @gldefref{DECR}
 *
 *  @ingroup smart_enums
 */
struct Decr {

/// Conversion to any @p Enum type having the Decr value.
/** Instances of the @ref oglplus::smart_enums::Decr "Decr"
 *  type are convertible to instances of any enumeration type having
 *  the @c Decr value.
 */
template <typename Enum, Enum = Enum::Decr> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Decr value.
/** Instances of the @c smart_enums::Decr type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Decr value.
 */
template <typename Enum> friend bool operator==(Enum value, Decr);

/// Non-equality comparison with any @p Enum type having the Decr value.
/** Instances of the @c smart_enums::Decr type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Decr value.
 */
template <typename Enum> friend bool operator!=(Enum value, Decr);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c DecrWrap value.
/**
 *  @see @ref oglplus::StencilOperation "StencilOperation"
 *
 *  @glsymbols
 *  @gldefref{DECR_WRAP}
 *
 *  @ingroup smart_enums
 */
struct DecrWrap {

/// Conversion to any @p Enum type having the DecrWrap value.
/** Instances of the @ref oglplus::smart_enums::DecrWrap "DecrWrap"
 *  type are convertible to instances of any enumeration type having
 *  the @c DecrWrap value.
 */
template <typename Enum, Enum = Enum::DecrWrap> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the DecrWrap value.
/** Instances of the @c smart_enums::DecrWrap type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c DecrWrap value.
 */
template <typename Enum> friend bool operator==(Enum value, DecrWrap);

/// Non-equality comparison with any @p Enum type having the DecrWrap value.
/** Instances of the @c smart_enums::DecrWrap type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c DecrWrap value.
 */
template <typename Enum> friend bool operator!=(Enum value, DecrWrap);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c DeprecatedBehavior value.
/**
 *  @see @ref oglplus::DebugOutputARBType "DebugOutputARBType"
 *  @see @ref oglplus::DebugOutputType "DebugOutputType"
 *  @see @ref oglplus::DebugType "DebugType"
 *
 *  @glsymbols
 *  @gldefref{DEBUG_TYPE_DEPRECATED_BEHAVIOR}
 *  @gldefref{DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB}
 *
 *  @ingroup smart_enums
 */
struct DeprecatedBehavior {

/// Conversion to any @p Enum type having the DeprecatedBehavior value.
/** Instances of the @ref oglplus::smart_enums::DeprecatedBehavior "DeprecatedBehavior"
 *  type are convertible to instances of any enumeration type having
 *  the @c DeprecatedBehavior value.
 */
template <typename Enum, Enum = Enum::DeprecatedBehavior> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the DeprecatedBehavior value.
/** Instances of the @c smart_enums::DeprecatedBehavior type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c DeprecatedBehavior value.
 */
template <typename Enum> friend bool operator==(Enum value, DeprecatedBehavior);

/// Non-equality comparison with any @p Enum type having the DeprecatedBehavior value.
/** Instances of the @c smart_enums::DeprecatedBehavior type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c DeprecatedBehavior value.
 */
template <typename Enum> friend bool operator!=(Enum value, DeprecatedBehavior);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Depth value.
/**
 *  @see @ref oglplus::FramebufferAttachment "FramebufferAttachment"
 *  @see @ref oglplus::FramebufferBuffer "FramebufferBuffer"
 *
 *  @glsymbols
 *  @gldefref{DEPTH}
 *  @gldefref{DEPTH_ATTACHMENT}
 *
 *  @ingroup smart_enums
 */
struct Depth {

/// Conversion to any @p Enum type having the Depth value.
/** Instances of the @ref oglplus::smart_enums::Depth "Depth"
 *  type are convertible to instances of any enumeration type having
 *  the @c Depth value.
 */
template <typename Enum, Enum = Enum::Depth> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Depth value.
/** Instances of the @c smart_enums::Depth type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Depth value.
 */
template <typename Enum> friend bool operator==(Enum value, Depth);

/// Non-equality comparison with any @p Enum type having the Depth value.
/** Instances of the @c smart_enums::Depth type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Depth value.
 */
template <typename Enum> friend bool operator!=(Enum value, Depth);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Depth24Stencil8 value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{DEPTH24_STENCIL8}
 *
 *  @ingroup smart_enums
 */
struct Depth24Stencil8 {

/// Conversion to any @p Enum type having the Depth24Stencil8 value.
/** Instances of the @ref oglplus::smart_enums::Depth24Stencil8 "Depth24Stencil8"
 *  type are convertible to instances of any enumeration type having
 *  the @c Depth24Stencil8 value.
 */
template <typename Enum, Enum = Enum::Depth24Stencil8> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Depth24Stencil8 value.
/** Instances of the @c smart_enums::Depth24Stencil8 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Depth24Stencil8 value.
 */
template <typename Enum> friend bool operator==(Enum value, Depth24Stencil8);

/// Non-equality comparison with any @p Enum type having the Depth24Stencil8 value.
/** Instances of the @c smart_enums::Depth24Stencil8 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Depth24Stencil8 value.
 */
template <typename Enum> friend bool operator!=(Enum value, Depth24Stencil8);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Depth32fStencil8 value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{DEPTH32F_STENCIL8}
 *
 *  @ingroup smart_enums
 */
struct Depth32fStencil8 {

/// Conversion to any @p Enum type having the Depth32fStencil8 value.
/** Instances of the @ref oglplus::smart_enums::Depth32fStencil8 "Depth32fStencil8"
 *  type are convertible to instances of any enumeration type having
 *  the @c Depth32fStencil8 value.
 */
template <typename Enum, Enum = Enum::Depth32fStencil8> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Depth32fStencil8 value.
/** Instances of the @c smart_enums::Depth32fStencil8 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Depth32fStencil8 value.
 */
template <typename Enum> friend bool operator==(Enum value, Depth32fStencil8);

/// Non-equality comparison with any @p Enum type having the Depth32fStencil8 value.
/** Instances of the @c smart_enums::Depth32fStencil8 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Depth32fStencil8 value.
 */
template <typename Enum> friend bool operator!=(Enum value, Depth32fStencil8);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c DepthBuffer value.
/**
 *  @see @ref oglplus::BufferSelectBit "BufferSelectBit"
 *  @see @ref oglplus::CompatibilityAttributeGroup "CompatibilityAttributeGroup"
 *
 *  @glsymbols
 *  @gldefref{DEPTH_BUFFER_BIT}
 *
 *  @ingroup smart_enums
 */
struct DepthBuffer {

/// Conversion to any @p Enum type having the DepthBuffer value.
/** Instances of the @ref oglplus::smart_enums::DepthBuffer "DepthBuffer"
 *  type are convertible to instances of any enumeration type having
 *  the @c DepthBuffer value.
 */
template <typename Enum, Enum = Enum::DepthBuffer> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the DepthBuffer value.
/** Instances of the @c smart_enums::DepthBuffer type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c DepthBuffer value.
 */
template <typename Enum> friend bool operator==(Enum value, DepthBuffer);

/// Non-equality comparison with any @p Enum type having the DepthBuffer value.
/** Instances of the @c smart_enums::DepthBuffer type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c DepthBuffer value.
 */
template <typename Enum> friend bool operator!=(Enum value, DepthBuffer);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c DepthComponent value.
/**
 *  @see @ref oglplus::PixelDataFormat "PixelDataFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{DEPTH_COMPONENT}
 *
 *  @ingroup smart_enums
 */
struct DepthComponent {

/// Conversion to any @p Enum type having the DepthComponent value.
/** Instances of the @ref oglplus::smart_enums::DepthComponent "DepthComponent"
 *  type are convertible to instances of any enumeration type having
 *  the @c DepthComponent value.
 */
template <typename Enum, Enum = Enum::DepthComponent> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the DepthComponent value.
/** Instances of the @c smart_enums::DepthComponent type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c DepthComponent value.
 */
template <typename Enum> friend bool operator==(Enum value, DepthComponent);

/// Non-equality comparison with any @p Enum type having the DepthComponent value.
/** Instances of the @c smart_enums::DepthComponent type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c DepthComponent value.
 */
template <typename Enum> friend bool operator!=(Enum value, DepthComponent);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c DepthComponent16 value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{DEPTH_COMPONENT16}
 *
 *  @ingroup smart_enums
 */
struct DepthComponent16 {

/// Conversion to any @p Enum type having the DepthComponent16 value.
/** Instances of the @ref oglplus::smart_enums::DepthComponent16 "DepthComponent16"
 *  type are convertible to instances of any enumeration type having
 *  the @c DepthComponent16 value.
 */
template <typename Enum, Enum = Enum::DepthComponent16> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the DepthComponent16 value.
/** Instances of the @c smart_enums::DepthComponent16 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c DepthComponent16 value.
 */
template <typename Enum> friend bool operator==(Enum value, DepthComponent16);

/// Non-equality comparison with any @p Enum type having the DepthComponent16 value.
/** Instances of the @c smart_enums::DepthComponent16 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c DepthComponent16 value.
 */
template <typename Enum> friend bool operator!=(Enum value, DepthComponent16);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c DepthComponent24 value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{DEPTH_COMPONENT24}
 *
 *  @ingroup smart_enums
 */
struct DepthComponent24 {

/// Conversion to any @p Enum type having the DepthComponent24 value.
/** Instances of the @ref oglplus::smart_enums::DepthComponent24 "DepthComponent24"
 *  type are convertible to instances of any enumeration type having
 *  the @c DepthComponent24 value.
 */
template <typename Enum, Enum = Enum::DepthComponent24> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the DepthComponent24 value.
/** Instances of the @c smart_enums::DepthComponent24 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c DepthComponent24 value.
 */
template <typename Enum> friend bool operator==(Enum value, DepthComponent24);

/// Non-equality comparison with any @p Enum type having the DepthComponent24 value.
/** Instances of the @c smart_enums::DepthComponent24 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c DepthComponent24 value.
 */
template <typename Enum> friend bool operator!=(Enum value, DepthComponent24);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c DepthComponent32 value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{DEPTH_COMPONENT32}
 *
 *  @ingroup smart_enums
 */
struct DepthComponent32 {

/// Conversion to any @p Enum type having the DepthComponent32 value.
/** Instances of the @ref oglplus::smart_enums::DepthComponent32 "DepthComponent32"
 *  type are convertible to instances of any enumeration type having
 *  the @c DepthComponent32 value.
 */
template <typename Enum, Enum = Enum::DepthComponent32> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the DepthComponent32 value.
/** Instances of the @c smart_enums::DepthComponent32 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c DepthComponent32 value.
 */
template <typename Enum> friend bool operator==(Enum value, DepthComponent32);

/// Non-equality comparison with any @p Enum type having the DepthComponent32 value.
/** Instances of the @c smart_enums::DepthComponent32 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c DepthComponent32 value.
 */
template <typename Enum> friend bool operator!=(Enum value, DepthComponent32);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c DepthComponent32F value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{DEPTH_COMPONENT32F}
 *
 *  @ingroup smart_enums
 */
struct DepthComponent32F {

/// Conversion to any @p Enum type having the DepthComponent32F value.
/** Instances of the @ref oglplus::smart_enums::DepthComponent32F "DepthComponent32F"
 *  type are convertible to instances of any enumeration type having
 *  the @c DepthComponent32F value.
 */
template <typename Enum, Enum = Enum::DepthComponent32F> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the DepthComponent32F value.
/** Instances of the @c smart_enums::DepthComponent32F type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c DepthComponent32F value.
 */
template <typename Enum> friend bool operator==(Enum value, DepthComponent32F);

/// Non-equality comparison with any @p Enum type having the DepthComponent32F value.
/** Instances of the @c smart_enums::DepthComponent32F type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c DepthComponent32F value.
 */
template <typename Enum> friend bool operator!=(Enum value, DepthComponent32F);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c DepthStencil value.
/**
 *  @see @ref oglplus::FramebufferAttachment "FramebufferAttachment"
 *  @see @ref oglplus::FramebufferBuffer "FramebufferBuffer"
 *  @see @ref oglplus::PixelDataFormat "PixelDataFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{DEPTH_STENCIL}
 *  @gldefref{DEPTH_STENCIL_ATTACHMENT}
 *
 *  @ingroup smart_enums
 */
struct DepthStencil {

/// Conversion to any @p Enum type having the DepthStencil value.
/** Instances of the @ref oglplus::smart_enums::DepthStencil "DepthStencil"
 *  type are convertible to instances of any enumeration type having
 *  the @c DepthStencil value.
 */
template <typename Enum, Enum = Enum::DepthStencil> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the DepthStencil value.
/** Instances of the @c smart_enums::DepthStencil type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c DepthStencil value.
 */
template <typename Enum> friend bool operator==(Enum value, DepthStencil);

/// Non-equality comparison with any @p Enum type having the DepthStencil value.
/** Instances of the @c smart_enums::DepthStencil type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c DepthStencil value.
 */
template <typename Enum> friend bool operator!=(Enum value, DepthStencil);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c DepthTest value.
/**
 *  @see @ref oglplus::Capability "Capability"
 *
 *  @glsymbols
 *  @gldefref{DEPTH_TEST}
 *
 *  @ingroup smart_enums
 */
struct DepthTest {

/// Conversion to any @p Enum type having the DepthTest value.
/** Instances of the @ref oglplus::smart_enums::DepthTest "DepthTest"
 *  type are convertible to instances of any enumeration type having
 *  the @c DepthTest value.
 */
template <typename Enum, Enum = Enum::DepthTest> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the DepthTest value.
/** Instances of the @c smart_enums::DepthTest type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c DepthTest value.
 */
template <typename Enum> friend bool operator==(Enum value, DepthTest);

/// Non-equality comparison with any @p Enum type having the DepthTest value.
/** Instances of the @c smart_enums::DepthTest type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c DepthTest value.
 */
template <typename Enum> friend bool operator!=(Enum value, DepthTest);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c DispatchIndirect value.
/**
 *  @see @ref oglplus::BufferTarget "BufferTarget"
 *
 *  @glsymbols
 *  @gldefref{DISPATCH_INDIRECT_BUFFER}
 *
 *  @ingroup smart_enums
 */
struct DispatchIndirect {

/// Conversion to any @p Enum type having the DispatchIndirect value.
/** Instances of the @ref oglplus::smart_enums::DispatchIndirect "DispatchIndirect"
 *  type are convertible to instances of any enumeration type having
 *  the @c DispatchIndirect value.
 */
template <typename Enum, Enum = Enum::DispatchIndirect> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the DispatchIndirect value.
/** Instances of the @c smart_enums::DispatchIndirect type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c DispatchIndirect value.
 */
template <typename Enum> friend bool operator==(Enum value, DispatchIndirect);

/// Non-equality comparison with any @p Enum type having the DispatchIndirect value.
/** Instances of the @c smart_enums::DispatchIndirect type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c DispatchIndirect value.
 */
template <typename Enum> friend bool operator!=(Enum value, DispatchIndirect);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Dither value.
/**
 *  @see @ref oglplus::Capability "Capability"
 *
 *  @glsymbols
 *  @gldefref{DITHER}
 *
 *  @ingroup smart_enums
 */
struct Dither {

/// Conversion to any @p Enum type having the Dither value.
/** Instances of the @ref oglplus::smart_enums::Dither "Dither"
 *  type are convertible to instances of any enumeration type having
 *  the @c Dither value.
 */
template <typename Enum, Enum = Enum::Dither> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Dither value.
/** Instances of the @c smart_enums::Dither type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Dither value.
 */
template <typename Enum> friend bool operator==(Enum value, Dither);

/// Non-equality comparison with any @p Enum type having the Dither value.
/** Instances of the @c smart_enums::Dither type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Dither value.
 */
template <typename Enum> friend bool operator!=(Enum value, Dither);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c DontCare value.
/**
 *  @see @ref oglplus::DebugOutputARBSeverity "DebugOutputARBSeverity"
 *  @see @ref oglplus::DebugOutputARBSource "DebugOutputARBSource"
 *  @see @ref oglplus::DebugOutputARBType "DebugOutputARBType"
 *  @see @ref oglplus::DebugOutputSeverity "DebugOutputSeverity"
 *  @see @ref oglplus::DebugOutputSource "DebugOutputSource"
 *  @see @ref oglplus::DebugOutputType "DebugOutputType"
 *  @see @ref oglplus::DebugSeverity "DebugSeverity"
 *  @see @ref oglplus::DebugSource "DebugSource"
 *  @see @ref oglplus::DebugType "DebugType"
 *  @see @ref oglplus::HintOption "HintOption"
 *
 *  @glsymbols
 *  @gldefref{DONT_CARE}
 *
 *  @ingroup smart_enums
 */
struct DontCare {

/// Conversion to any @p Enum type having the DontCare value.
/** Instances of the @ref oglplus::smart_enums::DontCare "DontCare"
 *  type are convertible to instances of any enumeration type having
 *  the @c DontCare value.
 */
template <typename Enum, Enum = Enum::DontCare> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the DontCare value.
/** Instances of the @c smart_enums::DontCare type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c DontCare value.
 */
template <typename Enum> friend bool operator==(Enum value, DontCare);

/// Non-equality comparison with any @p Enum type having the DontCare value.
/** Instances of the @c smart_enums::DontCare type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c DontCare value.
 */
template <typename Enum> friend bool operator!=(Enum value, DontCare);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Double value.
/**
 *  @see @ref oglplus::DataType "DataType"
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{DOUBLE}
 *
 *  @ingroup smart_enums
 */
struct Double {

/// Conversion to any @p Enum type having the Double value.
/** Instances of the @ref oglplus::smart_enums::Double "Double"
 *  type are convertible to instances of any enumeration type having
 *  the @c Double value.
 */
template <typename Enum, Enum = Enum::Double> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Double value.
/** Instances of the @c smart_enums::Double type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Double value.
 */
template <typename Enum> friend bool operator==(Enum value, Double);

/// Non-equality comparison with any @p Enum type having the Double value.
/** Instances of the @c smart_enums::Double type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Double value.
 */
template <typename Enum> friend bool operator!=(Enum value, Double);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c DoubleMat2 value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{DOUBLE_MAT2}
 *
 *  @ingroup smart_enums
 */
struct DoubleMat2 {

/// Conversion to any @p Enum type having the DoubleMat2 value.
/** Instances of the @ref oglplus::smart_enums::DoubleMat2 "DoubleMat2"
 *  type are convertible to instances of any enumeration type having
 *  the @c DoubleMat2 value.
 */
template <typename Enum, Enum = Enum::DoubleMat2> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the DoubleMat2 value.
/** Instances of the @c smart_enums::DoubleMat2 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c DoubleMat2 value.
 */
template <typename Enum> friend bool operator==(Enum value, DoubleMat2);

/// Non-equality comparison with any @p Enum type having the DoubleMat2 value.
/** Instances of the @c smart_enums::DoubleMat2 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c DoubleMat2 value.
 */
template <typename Enum> friend bool operator!=(Enum value, DoubleMat2);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c DoubleMat2x3 value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{DOUBLE_MAT2x3}
 *
 *  @ingroup smart_enums
 */
struct DoubleMat2x3 {

/// Conversion to any @p Enum type having the DoubleMat2x3 value.
/** Instances of the @ref oglplus::smart_enums::DoubleMat2x3 "DoubleMat2x3"
 *  type are convertible to instances of any enumeration type having
 *  the @c DoubleMat2x3 value.
 */
template <typename Enum, Enum = Enum::DoubleMat2x3> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the DoubleMat2x3 value.
/** Instances of the @c smart_enums::DoubleMat2x3 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c DoubleMat2x3 value.
 */
template <typename Enum> friend bool operator==(Enum value, DoubleMat2x3);

/// Non-equality comparison with any @p Enum type having the DoubleMat2x3 value.
/** Instances of the @c smart_enums::DoubleMat2x3 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c DoubleMat2x3 value.
 */
template <typename Enum> friend bool operator!=(Enum value, DoubleMat2x3);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c DoubleMat2x4 value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{DOUBLE_MAT2x4}
 *
 *  @ingroup smart_enums
 */
struct DoubleMat2x4 {

/// Conversion to any @p Enum type having the DoubleMat2x4 value.
/** Instances of the @ref oglplus::smart_enums::DoubleMat2x4 "DoubleMat2x4"
 *  type are convertible to instances of any enumeration type having
 *  the @c DoubleMat2x4 value.
 */
template <typename Enum, Enum = Enum::DoubleMat2x4> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the DoubleMat2x4 value.
/** Instances of the @c smart_enums::DoubleMat2x4 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c DoubleMat2x4 value.
 */
template <typename Enum> friend bool operator==(Enum value, DoubleMat2x4);

/// Non-equality comparison with any @p Enum type having the DoubleMat2x4 value.
/** Instances of the @c smart_enums::DoubleMat2x4 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c DoubleMat2x4 value.
 */
template <typename Enum> friend bool operator!=(Enum value, DoubleMat2x4);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c DoubleMat3 value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{DOUBLE_MAT3}
 *
 *  @ingroup smart_enums
 */
struct DoubleMat3 {

/// Conversion to any @p Enum type having the DoubleMat3 value.
/** Instances of the @ref oglplus::smart_enums::DoubleMat3 "DoubleMat3"
 *  type are convertible to instances of any enumeration type having
 *  the @c DoubleMat3 value.
 */
template <typename Enum, Enum = Enum::DoubleMat3> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the DoubleMat3 value.
/** Instances of the @c smart_enums::DoubleMat3 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c DoubleMat3 value.
 */
template <typename Enum> friend bool operator==(Enum value, DoubleMat3);

/// Non-equality comparison with any @p Enum type having the DoubleMat3 value.
/** Instances of the @c smart_enums::DoubleMat3 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c DoubleMat3 value.
 */
template <typename Enum> friend bool operator!=(Enum value, DoubleMat3);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c DoubleMat3x2 value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{DOUBLE_MAT3x2}
 *
 *  @ingroup smart_enums
 */
struct DoubleMat3x2 {

/// Conversion to any @p Enum type having the DoubleMat3x2 value.
/** Instances of the @ref oglplus::smart_enums::DoubleMat3x2 "DoubleMat3x2"
 *  type are convertible to instances of any enumeration type having
 *  the @c DoubleMat3x2 value.
 */
template <typename Enum, Enum = Enum::DoubleMat3x2> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the DoubleMat3x2 value.
/** Instances of the @c smart_enums::DoubleMat3x2 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c DoubleMat3x2 value.
 */
template <typename Enum> friend bool operator==(Enum value, DoubleMat3x2);

/// Non-equality comparison with any @p Enum type having the DoubleMat3x2 value.
/** Instances of the @c smart_enums::DoubleMat3x2 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c DoubleMat3x2 value.
 */
template <typename Enum> friend bool operator!=(Enum value, DoubleMat3x2);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c DoubleMat3x4 value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{DOUBLE_MAT3x4}
 *
 *  @ingroup smart_enums
 */
struct DoubleMat3x4 {

/// Conversion to any @p Enum type having the DoubleMat3x4 value.
/** Instances of the @ref oglplus::smart_enums::DoubleMat3x4 "DoubleMat3x4"
 *  type are convertible to instances of any enumeration type having
 *  the @c DoubleMat3x4 value.
 */
template <typename Enum, Enum = Enum::DoubleMat3x4> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the DoubleMat3x4 value.
/** Instances of the @c smart_enums::DoubleMat3x4 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c DoubleMat3x4 value.
 */
template <typename Enum> friend bool operator==(Enum value, DoubleMat3x4);

/// Non-equality comparison with any @p Enum type having the DoubleMat3x4 value.
/** Instances of the @c smart_enums::DoubleMat3x4 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c DoubleMat3x4 value.
 */
template <typename Enum> friend bool operator!=(Enum value, DoubleMat3x4);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c DoubleMat4 value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{DOUBLE_MAT4}
 *
 *  @ingroup smart_enums
 */
struct DoubleMat4 {

/// Conversion to any @p Enum type having the DoubleMat4 value.
/** Instances of the @ref oglplus::smart_enums::DoubleMat4 "DoubleMat4"
 *  type are convertible to instances of any enumeration type having
 *  the @c DoubleMat4 value.
 */
template <typename Enum, Enum = Enum::DoubleMat4> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the DoubleMat4 value.
/** Instances of the @c smart_enums::DoubleMat4 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c DoubleMat4 value.
 */
template <typename Enum> friend bool operator==(Enum value, DoubleMat4);

/// Non-equality comparison with any @p Enum type having the DoubleMat4 value.
/** Instances of the @c smart_enums::DoubleMat4 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c DoubleMat4 value.
 */
template <typename Enum> friend bool operator!=(Enum value, DoubleMat4);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c DoubleMat4x2 value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{DOUBLE_MAT4x2}
 *
 *  @ingroup smart_enums
 */
struct DoubleMat4x2 {

/// Conversion to any @p Enum type having the DoubleMat4x2 value.
/** Instances of the @ref oglplus::smart_enums::DoubleMat4x2 "DoubleMat4x2"
 *  type are convertible to instances of any enumeration type having
 *  the @c DoubleMat4x2 value.
 */
template <typename Enum, Enum = Enum::DoubleMat4x2> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the DoubleMat4x2 value.
/** Instances of the @c smart_enums::DoubleMat4x2 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c DoubleMat4x2 value.
 */
template <typename Enum> friend bool operator==(Enum value, DoubleMat4x2);

/// Non-equality comparison with any @p Enum type having the DoubleMat4x2 value.
/** Instances of the @c smart_enums::DoubleMat4x2 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c DoubleMat4x2 value.
 */
template <typename Enum> friend bool operator!=(Enum value, DoubleMat4x2);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c DoubleMat4x3 value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{DOUBLE_MAT4x3}
 *
 *  @ingroup smart_enums
 */
struct DoubleMat4x3 {

/// Conversion to any @p Enum type having the DoubleMat4x3 value.
/** Instances of the @ref oglplus::smart_enums::DoubleMat4x3 "DoubleMat4x3"
 *  type are convertible to instances of any enumeration type having
 *  the @c DoubleMat4x3 value.
 */
template <typename Enum, Enum = Enum::DoubleMat4x3> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the DoubleMat4x3 value.
/** Instances of the @c smart_enums::DoubleMat4x3 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c DoubleMat4x3 value.
 */
template <typename Enum> friend bool operator==(Enum value, DoubleMat4x3);

/// Non-equality comparison with any @p Enum type having the DoubleMat4x3 value.
/** Instances of the @c smart_enums::DoubleMat4x3 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c DoubleMat4x3 value.
 */
template <typename Enum> friend bool operator!=(Enum value, DoubleMat4x3);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c DoubleVec2 value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{DOUBLE_VEC2}
 *
 *  @ingroup smart_enums
 */
struct DoubleVec2 {

/// Conversion to any @p Enum type having the DoubleVec2 value.
/** Instances of the @ref oglplus::smart_enums::DoubleVec2 "DoubleVec2"
 *  type are convertible to instances of any enumeration type having
 *  the @c DoubleVec2 value.
 */
template <typename Enum, Enum = Enum::DoubleVec2> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the DoubleVec2 value.
/** Instances of the @c smart_enums::DoubleVec2 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c DoubleVec2 value.
 */
template <typename Enum> friend bool operator==(Enum value, DoubleVec2);

/// Non-equality comparison with any @p Enum type having the DoubleVec2 value.
/** Instances of the @c smart_enums::DoubleVec2 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c DoubleVec2 value.
 */
template <typename Enum> friend bool operator!=(Enum value, DoubleVec2);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c DoubleVec3 value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{DOUBLE_VEC3}
 *
 *  @ingroup smart_enums
 */
struct DoubleVec3 {

/// Conversion to any @p Enum type having the DoubleVec3 value.
/** Instances of the @ref oglplus::smart_enums::DoubleVec3 "DoubleVec3"
 *  type are convertible to instances of any enumeration type having
 *  the @c DoubleVec3 value.
 */
template <typename Enum, Enum = Enum::DoubleVec3> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the DoubleVec3 value.
/** Instances of the @c smart_enums::DoubleVec3 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c DoubleVec3 value.
 */
template <typename Enum> friend bool operator==(Enum value, DoubleVec3);

/// Non-equality comparison with any @p Enum type having the DoubleVec3 value.
/** Instances of the @c smart_enums::DoubleVec3 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c DoubleVec3 value.
 */
template <typename Enum> friend bool operator!=(Enum value, DoubleVec3);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c DoubleVec4 value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{DOUBLE_VEC4}
 *
 *  @ingroup smart_enums
 */
struct DoubleVec4 {

/// Conversion to any @p Enum type having the DoubleVec4 value.
/** Instances of the @ref oglplus::smart_enums::DoubleVec4 "DoubleVec4"
 *  type are convertible to instances of any enumeration type having
 *  the @c DoubleVec4 value.
 */
template <typename Enum, Enum = Enum::DoubleVec4> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the DoubleVec4 value.
/** Instances of the @c smart_enums::DoubleVec4 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c DoubleVec4 value.
 */
template <typename Enum> friend bool operator==(Enum value, DoubleVec4);

/// Non-equality comparison with any @p Enum type having the DoubleVec4 value.
/** Instances of the @c smart_enums::DoubleVec4 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c DoubleVec4 value.
 */
template <typename Enum> friend bool operator!=(Enum value, DoubleVec4);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Draw value.
/**
 *  @see @ref oglplus::FramebufferTarget "FramebufferTarget"
 *
 *  @glsymbols
 *  @gldefref{DRAW_FRAMEBUFFER}
 *
 *  @ingroup smart_enums
 */
struct Draw {

/// Conversion to any @p Enum type having the Draw value.
/** Instances of the @ref oglplus::smart_enums::Draw "Draw"
 *  type are convertible to instances of any enumeration type having
 *  the @c Draw value.
 */
template <typename Enum, Enum = Enum::Draw> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Draw value.
/** Instances of the @c smart_enums::Draw type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Draw value.
 */
template <typename Enum> friend bool operator==(Enum value, Draw);

/// Non-equality comparison with any @p Enum type having the Draw value.
/** Instances of the @c smart_enums::Draw type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Draw value.
 */
template <typename Enum> friend bool operator!=(Enum value, Draw);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c DrawIndirect value.
/**
 *  @see @ref oglplus::BufferTarget "BufferTarget"
 *
 *  @glsymbols
 *  @gldefref{DRAW_INDIRECT_BUFFER}
 *
 *  @ingroup smart_enums
 */
struct DrawIndirect {

/// Conversion to any @p Enum type having the DrawIndirect value.
/** Instances of the @ref oglplus::smart_enums::DrawIndirect "DrawIndirect"
 *  type are convertible to instances of any enumeration type having
 *  the @c DrawIndirect value.
 */
template <typename Enum, Enum = Enum::DrawIndirect> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the DrawIndirect value.
/** Instances of the @c smart_enums::DrawIndirect type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c DrawIndirect value.
 */
template <typename Enum> friend bool operator==(Enum value, DrawIndirect);

/// Non-equality comparison with any @p Enum type having the DrawIndirect value.
/** Instances of the @c smart_enums::DrawIndirect type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c DrawIndirect value.
 */
template <typename Enum> friend bool operator!=(Enum value, DrawIndirect);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c DstAlpha value.
/**
 *  @see @ref oglplus::BlendFunction "BlendFunction"
 *
 *  @glsymbols
 *  @gldefref{DST_ALPHA}
 *
 *  @ingroup smart_enums
 */
struct DstAlpha {

/// Conversion to any @p Enum type having the DstAlpha value.
/** Instances of the @ref oglplus::smart_enums::DstAlpha "DstAlpha"
 *  type are convertible to instances of any enumeration type having
 *  the @c DstAlpha value.
 */
template <typename Enum, Enum = Enum::DstAlpha> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the DstAlpha value.
/** Instances of the @c smart_enums::DstAlpha type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c DstAlpha value.
 */
template <typename Enum> friend bool operator==(Enum value, DstAlpha);

/// Non-equality comparison with any @p Enum type having the DstAlpha value.
/** Instances of the @c smart_enums::DstAlpha type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c DstAlpha value.
 */
template <typename Enum> friend bool operator!=(Enum value, DstAlpha);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c DstColor value.
/**
 *  @see @ref oglplus::BlendFunction "BlendFunction"
 *
 *  @glsymbols
 *  @gldefref{DST_COLOR}
 *
 *  @ingroup smart_enums
 */
struct DstColor {

/// Conversion to any @p Enum type having the DstColor value.
/** Instances of the @ref oglplus::smart_enums::DstColor "DstColor"
 *  type are convertible to instances of any enumeration type having
 *  the @c DstColor value.
 */
template <typename Enum, Enum = Enum::DstColor> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the DstColor value.
/** Instances of the @c smart_enums::DstColor type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c DstColor value.
 */
template <typename Enum> friend bool operator==(Enum value, DstColor);

/// Non-equality comparison with any @p Enum type having the DstColor value.
/** Instances of the @c smart_enums::DstColor type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c DstColor value.
 */
template <typename Enum> friend bool operator!=(Enum value, DstColor);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c DupFirstCubicCurveTo value.
/**
 *  @see @ref oglplus::PathNVCommand "PathNVCommand"
 *
 *  @glsymbols
 *  @gldefref{DUP_FIRST_CUBIC_CURVE_TO_NV}
 *
 *  @ingroup smart_enums
 */
struct DupFirstCubicCurveTo {

/// Conversion to any @p Enum type having the DupFirstCubicCurveTo value.
/** Instances of the @ref oglplus::smart_enums::DupFirstCubicCurveTo "DupFirstCubicCurveTo"
 *  type are convertible to instances of any enumeration type having
 *  the @c DupFirstCubicCurveTo value.
 */
template <typename Enum, Enum = Enum::DupFirstCubicCurveTo> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the DupFirstCubicCurveTo value.
/** Instances of the @c smart_enums::DupFirstCubicCurveTo type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c DupFirstCubicCurveTo value.
 */
template <typename Enum> friend bool operator==(Enum value, DupFirstCubicCurveTo);

/// Non-equality comparison with any @p Enum type having the DupFirstCubicCurveTo value.
/** Instances of the @c smart_enums::DupFirstCubicCurveTo type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c DupFirstCubicCurveTo value.
 */
template <typename Enum> friend bool operator!=(Enum value, DupFirstCubicCurveTo);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c DupLastCubicCurveTo value.
/**
 *  @see @ref oglplus::PathNVCommand "PathNVCommand"
 *
 *  @glsymbols
 *  @gldefref{DUP_LAST_CUBIC_CURVE_TO_NV}
 *
 *  @ingroup smart_enums
 */
struct DupLastCubicCurveTo {

/// Conversion to any @p Enum type having the DupLastCubicCurveTo value.
/** Instances of the @ref oglplus::smart_enums::DupLastCubicCurveTo "DupLastCubicCurveTo"
 *  type are convertible to instances of any enumeration type having
 *  the @c DupLastCubicCurveTo value.
 */
template <typename Enum, Enum = Enum::DupLastCubicCurveTo> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the DupLastCubicCurveTo value.
/** Instances of the @c smart_enums::DupLastCubicCurveTo type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c DupLastCubicCurveTo value.
 */
template <typename Enum> friend bool operator==(Enum value, DupLastCubicCurveTo);

/// Non-equality comparison with any @p Enum type having the DupLastCubicCurveTo value.
/** Instances of the @c smart_enums::DupLastCubicCurveTo type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c DupLastCubicCurveTo value.
 */
template <typename Enum> friend bool operator!=(Enum value, DupLastCubicCurveTo);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c DynamicCopy value.
/**
 *  @see @ref oglplus::BufferUsage "BufferUsage"
 *
 *  @glsymbols
 *  @gldefref{DYNAMIC_COPY}
 *
 *  @ingroup smart_enums
 */
struct DynamicCopy {

/// Conversion to any @p Enum type having the DynamicCopy value.
/** Instances of the @ref oglplus::smart_enums::DynamicCopy "DynamicCopy"
 *  type are convertible to instances of any enumeration type having
 *  the @c DynamicCopy value.
 */
template <typename Enum, Enum = Enum::DynamicCopy> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the DynamicCopy value.
/** Instances of the @c smart_enums::DynamicCopy type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c DynamicCopy value.
 */
template <typename Enum> friend bool operator==(Enum value, DynamicCopy);

/// Non-equality comparison with any @p Enum type having the DynamicCopy value.
/** Instances of the @c smart_enums::DynamicCopy type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c DynamicCopy value.
 */
template <typename Enum> friend bool operator!=(Enum value, DynamicCopy);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c DynamicDraw value.
/**
 *  @see @ref oglplus::BufferUsage "BufferUsage"
 *
 *  @glsymbols
 *  @gldefref{DYNAMIC_DRAW}
 *
 *  @ingroup smart_enums
 */
struct DynamicDraw {

/// Conversion to any @p Enum type having the DynamicDraw value.
/** Instances of the @ref oglplus::smart_enums::DynamicDraw "DynamicDraw"
 *  type are convertible to instances of any enumeration type having
 *  the @c DynamicDraw value.
 */
template <typename Enum, Enum = Enum::DynamicDraw> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the DynamicDraw value.
/** Instances of the @c smart_enums::DynamicDraw type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c DynamicDraw value.
 */
template <typename Enum> friend bool operator==(Enum value, DynamicDraw);

/// Non-equality comparison with any @p Enum type having the DynamicDraw value.
/** Instances of the @c smart_enums::DynamicDraw type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c DynamicDraw value.
 */
template <typename Enum> friend bool operator!=(Enum value, DynamicDraw);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c DynamicRead value.
/**
 *  @see @ref oglplus::BufferUsage "BufferUsage"
 *
 *  @glsymbols
 *  @gldefref{DYNAMIC_READ}
 *
 *  @ingroup smart_enums
 */
struct DynamicRead {

/// Conversion to any @p Enum type having the DynamicRead value.
/** Instances of the @ref oglplus::smart_enums::DynamicRead "DynamicRead"
 *  type are convertible to instances of any enumeration type having
 *  the @c DynamicRead value.
 */
template <typename Enum, Enum = Enum::DynamicRead> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the DynamicRead value.
/** Instances of the @c smart_enums::DynamicRead type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c DynamicRead value.
 */
template <typename Enum> friend bool operator==(Enum value, DynamicRead);

/// Non-equality comparison with any @p Enum type having the DynamicRead value.
/** Instances of the @c smart_enums::DynamicRead type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c DynamicRead value.
 */
template <typename Enum> friend bool operator!=(Enum value, DynamicRead);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c DynamicStorage value.
/**
 *  @see @ref oglplus::BufferStorageBit "BufferStorageBit"
 *
 *  @glsymbols
 *  @gldefref{DYNAMIC_STORAGE_BIT}
 *
 *  @ingroup smart_enums
 */
struct DynamicStorage {

/// Conversion to any @p Enum type having the DynamicStorage value.
/** Instances of the @ref oglplus::smart_enums::DynamicStorage "DynamicStorage"
 *  type are convertible to instances of any enumeration type having
 *  the @c DynamicStorage value.
 */
template <typename Enum, Enum = Enum::DynamicStorage> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the DynamicStorage value.
/** Instances of the @c smart_enums::DynamicStorage type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c DynamicStorage value.
 */
template <typename Enum> friend bool operator==(Enum value, DynamicStorage);

/// Non-equality comparison with any @p Enum type having the DynamicStorage value.
/** Instances of the @c smart_enums::DynamicStorage type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c DynamicStorage value.
 */
template <typename Enum> friend bool operator!=(Enum value, DynamicStorage);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ElementArray value.
/**
 *  @see @ref oglplus::BufferTarget "BufferTarget"
 *  @see @ref oglplus::MemoryBarrierBit "MemoryBarrierBit"
 *
 *  @glsymbols
 *  @gldefref{ELEMENT_ARRAY_BARRIER_BIT}
 *  @gldefref{ELEMENT_ARRAY_BUFFER}
 *
 *  @ingroup smart_enums
 */
struct ElementArray {

/// Conversion to any @p Enum type having the ElementArray value.
/** Instances of the @ref oglplus::smart_enums::ElementArray "ElementArray"
 *  type are convertible to instances of any enumeration type having
 *  the @c ElementArray value.
 */
template <typename Enum, Enum = Enum::ElementArray> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ElementArray value.
/** Instances of the @c smart_enums::ElementArray type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ElementArray value.
 */
template <typename Enum> friend bool operator==(Enum value, ElementArray);

/// Non-equality comparison with any @p Enum type having the ElementArray value.
/** Instances of the @c smart_enums::ElementArray type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ElementArray value.
 */
template <typename Enum> friend bool operator!=(Enum value, ElementArray);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Enable value.
/**
 *  @see @ref oglplus::CompatibilityAttributeGroup "CompatibilityAttributeGroup"
 *
 *  @glsymbols
 *  @gldefref{ENABLE_BIT}
 *
 *  @ingroup smart_enums
 */
struct Enable {

/// Conversion to any @p Enum type having the Enable value.
/** Instances of the @ref oglplus::smart_enums::Enable "Enable"
 *  type are convertible to instances of any enumeration type having
 *  the @c Enable value.
 */
template <typename Enum, Enum = Enum::Enable> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Enable value.
/** Instances of the @c smart_enums::Enable type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Enable value.
 */
template <typename Enum> friend bool operator==(Enum value, Enable);

/// Non-equality comparison with any @p Enum type having the Enable value.
/** Instances of the @c smart_enums::Enable type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Enable value.
 */
template <typename Enum> friend bool operator!=(Enum value, Enable);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Equal value.
/**
 *  @see @ref oglplus::CompareFunction "CompareFunction"
 *  @see @ref oglplus::TessGenPrimitiveSpacing "TessGenPrimitiveSpacing"
 *
 *  @glsymbols
 *  @gldefref{EQUAL}
 *
 *  @ingroup smart_enums
 */
struct Equal {

/// Conversion to any @p Enum type having the Equal value.
/** Instances of the @ref oglplus::smart_enums::Equal "Equal"
 *  type are convertible to instances of any enumeration type having
 *  the @c Equal value.
 */
template <typename Enum, Enum = Enum::Equal> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Equal value.
/** Instances of the @c smart_enums::Equal type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Equal value.
 */
template <typename Enum> friend bool operator==(Enum value, Equal);

/// Non-equality comparison with any @p Enum type having the Equal value.
/** Instances of the @c smart_enums::Equal type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Equal value.
 */
template <typename Enum> friend bool operator!=(Enum value, Equal);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Equiv value.
/**
 *  @see @ref oglplus::ColorLogicOperation "ColorLogicOperation"
 *
 *  @glsymbols
 *  @gldefref{EQUIV}
 *
 *  @ingroup smart_enums
 */
struct Equiv {

/// Conversion to any @p Enum type having the Equiv value.
/** Instances of the @ref oglplus::smart_enums::Equiv "Equiv"
 *  type are convertible to instances of any enumeration type having
 *  the @c Equiv value.
 */
template <typename Enum, Enum = Enum::Equiv> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Equiv value.
/** Instances of the @c smart_enums::Equiv type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Equiv value.
 */
template <typename Enum> friend bool operator==(Enum value, Equiv);

/// Non-equality comparison with any @p Enum type having the Equiv value.
/** Instances of the @c smart_enums::Equiv type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Equiv value.
 */
template <typename Enum> friend bool operator!=(Enum value, Equiv);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Error value.
/**
 *  @see @ref oglplus::DebugOutputARBType "DebugOutputARBType"
 *  @see @ref oglplus::DebugOutputType "DebugOutputType"
 *  @see @ref oglplus::DebugType "DebugType"
 *
 *  @glsymbols
 *  @gldefref{DEBUG_TYPE_ERROR}
 *  @gldefref{DEBUG_TYPE_ERROR_ARB}
 *
 *  @ingroup smart_enums
 */
struct Error {

/// Conversion to any @p Enum type having the Error value.
/** Instances of the @ref oglplus::smart_enums::Error "Error"
 *  type are convertible to instances of any enumeration type having
 *  the @c Error value.
 */
template <typename Enum, Enum = Enum::Error> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Error value.
/** Instances of the @c smart_enums::Error type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Error value.
 */
template <typename Enum> friend bool operator==(Enum value, Error);

/// Non-equality comparison with any @p Enum type having the Error value.
/** Instances of the @c smart_enums::Error type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Error value.
 */
template <typename Enum> friend bool operator!=(Enum value, Error);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Eval value.
/**
 *  @see @ref oglplus::CompatibilityAttributeGroup "CompatibilityAttributeGroup"
 *
 *  @glsymbols
 *  @gldefref{EVAL_BIT}
 *
 *  @ingroup smart_enums
 */
struct Eval {

/// Conversion to any @p Enum type having the Eval value.
/** Instances of the @ref oglplus::smart_enums::Eval "Eval"
 *  type are convertible to instances of any enumeration type having
 *  the @c Eval value.
 */
template <typename Enum, Enum = Enum::Eval> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Eval value.
/** Instances of the @c smart_enums::Eval type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Eval value.
 */
template <typename Enum> friend bool operator==(Enum value, Eval);

/// Non-equality comparison with any @p Enum type having the Eval value.
/** Instances of the @c smart_enums::Eval type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Eval value.
 */
template <typename Enum> friend bool operator!=(Enum value, Eval);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ExternalVirtualMemory value.
/**
 *  @see @ref oglplus::BufferTarget "BufferTarget"
 *
 *  @glsymbols
 *  @gldefref{EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD}
 *
 *  @ingroup smart_enums
 */
struct ExternalVirtualMemory {

/// Conversion to any @p Enum type having the ExternalVirtualMemory value.
/** Instances of the @ref oglplus::smart_enums::ExternalVirtualMemory "ExternalVirtualMemory"
 *  type are convertible to instances of any enumeration type having
 *  the @c ExternalVirtualMemory value.
 */
template <typename Enum, Enum = Enum::ExternalVirtualMemory> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ExternalVirtualMemory value.
/** Instances of the @c smart_enums::ExternalVirtualMemory type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ExternalVirtualMemory value.
 */
template <typename Enum> friend bool operator==(Enum value, ExternalVirtualMemory);

/// Non-equality comparison with any @p Enum type having the ExternalVirtualMemory value.
/** Instances of the @c smart_enums::ExternalVirtualMemory type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ExternalVirtualMemory value.
 */
template <typename Enum> friend bool operator!=(Enum value, ExternalVirtualMemory);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c EyeLinear value.
/**
 *  @see @ref oglplus::PathNVGenMode "PathNVGenMode"
 *
 *  @glsymbols
 *  @gldefref{EYE_LINEAR}
 *
 *  @ingroup smart_enums
 */
struct EyeLinear {

/// Conversion to any @p Enum type having the EyeLinear value.
/** Instances of the @ref oglplus::smart_enums::EyeLinear "EyeLinear"
 *  type are convertible to instances of any enumeration type having
 *  the @c EyeLinear value.
 */
template <typename Enum, Enum = Enum::EyeLinear> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the EyeLinear value.
/** Instances of the @c smart_enums::EyeLinear type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c EyeLinear value.
 */
template <typename Enum> friend bool operator==(Enum value, EyeLinear);

/// Non-equality comparison with any @p Enum type having the EyeLinear value.
/** Instances of the @c smart_enums::EyeLinear type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c EyeLinear value.
 */
template <typename Enum> friend bool operator!=(Enum value, EyeLinear);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Fastest value.
/**
 *  @see @ref oglplus::HintOption "HintOption"
 *
 *  @glsymbols
 *  @gldefref{FASTEST}
 *
 *  @ingroup smart_enums
 */
struct Fastest {

/// Conversion to any @p Enum type having the Fastest value.
/** Instances of the @ref oglplus::smart_enums::Fastest "Fastest"
 *  type are convertible to instances of any enumeration type having
 *  the @c Fastest value.
 */
template <typename Enum, Enum = Enum::Fastest> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Fastest value.
/** Instances of the @c smart_enums::Fastest type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Fastest value.
 */
template <typename Enum> friend bool operator==(Enum value, Fastest);

/// Non-equality comparison with any @p Enum type having the Fastest value.
/** Instances of the @c smart_enums::Fastest type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Fastest value.
 */
template <typename Enum> friend bool operator!=(Enum value, Fastest);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Fence value.
/**
 *  @see @ref oglplus::SyncType "SyncType"
 *
 *  @glsymbols
 *  @gldefref{SYNC_FENCE}
 *
 *  @ingroup smart_enums
 */
struct Fence {

/// Conversion to any @p Enum type having the Fence value.
/** Instances of the @ref oglplus::smart_enums::Fence "Fence"
 *  type are convertible to instances of any enumeration type having
 *  the @c Fence value.
 */
template <typename Enum, Enum = Enum::Fence> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Fence value.
/** Instances of the @c smart_enums::Fence type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Fence value.
 */
template <typename Enum> friend bool operator==(Enum value, Fence);

/// Non-equality comparison with any @p Enum type having the Fence value.
/** Instances of the @c smart_enums::Fence type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Fence value.
 */
template <typename Enum> friend bool operator!=(Enum value, Fence);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FileName value.
/**
 *  @see @ref oglplus::PathNVFontTarget "PathNVFontTarget"
 *
 *  @glsymbols
 *  @gldefref{FILE_NAME_NV}
 *
 *  @ingroup smart_enums
 */
struct FileName {

/// Conversion to any @p Enum type having the FileName value.
/** Instances of the @ref oglplus::smart_enums::FileName "FileName"
 *  type are convertible to instances of any enumeration type having
 *  the @c FileName value.
 */
template <typename Enum, Enum = Enum::FileName> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FileName value.
/** Instances of the @c smart_enums::FileName type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FileName value.
 */
template <typename Enum> friend bool operator==(Enum value, FileName);

/// Non-equality comparison with any @p Enum type having the FileName value.
/** Instances of the @c smart_enums::FileName type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FileName value.
 */
template <typename Enum> friend bool operator!=(Enum value, FileName);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Fill value.
/**
 *  @see @ref oglplus::PolygonMode "PolygonMode"
 *
 *  @glsymbols
 *  @gldefref{FILL}
 *
 *  @ingroup smart_enums
 */
struct Fill {

/// Conversion to any @p Enum type having the Fill value.
/** Instances of the @ref oglplus::smart_enums::Fill "Fill"
 *  type are convertible to instances of any enumeration type having
 *  the @c Fill value.
 */
template <typename Enum, Enum = Enum::Fill> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Fill value.
/** Instances of the @c smart_enums::Fill type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Fill value.
 */
template <typename Enum> friend bool operator==(Enum value, Fill);

/// Non-equality comparison with any @p Enum type having the Fill value.
/** Instances of the @c smart_enums::Fill type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Fill value.
 */
template <typename Enum> friend bool operator!=(Enum value, Fill);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FillCover value.
/**
 *  @see @ref oglplus::PathNVFillCoverMode "PathNVFillCoverMode"
 *
 *  @glsymbols
 *  @gldefref{PATH_FILL_COVER_MODE_NV}
 *
 *  @ingroup smart_enums
 */
struct FillCover {

/// Conversion to any @p Enum type having the FillCover value.
/** Instances of the @ref oglplus::smart_enums::FillCover "FillCover"
 *  type are convertible to instances of any enumeration type having
 *  the @c FillCover value.
 */
template <typename Enum, Enum = Enum::FillCover> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FillCover value.
/** Instances of the @c smart_enums::FillCover type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FillCover value.
 */
template <typename Enum> friend bool operator==(Enum value, FillCover);

/// Non-equality comparison with any @p Enum type having the FillCover value.
/** Instances of the @c smart_enums::FillCover type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FillCover value.
 */
template <typename Enum> friend bool operator!=(Enum value, FillCover);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FillMode value.
/**
 *  @see @ref oglplus::PathNVFillMode "PathNVFillMode"
 *
 *  @glsymbols
 *  @gldefref{PATH_FILL_MODE_NV}
 *
 *  @ingroup smart_enums
 */
struct FillMode {

/// Conversion to any @p Enum type having the FillMode value.
/** Instances of the @ref oglplus::smart_enums::FillMode "FillMode"
 *  type are convertible to instances of any enumeration type having
 *  the @c FillMode value.
 */
template <typename Enum, Enum = Enum::FillMode> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FillMode value.
/** Instances of the @c smart_enums::FillMode type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FillMode value.
 */
template <typename Enum> friend bool operator==(Enum value, FillMode);

/// Non-equality comparison with any @p Enum type having the FillMode value.
/** Instances of the @c smart_enums::FillMode type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FillMode value.
 */
template <typename Enum> friend bool operator!=(Enum value, FillMode);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FirstToRest value.
/**
 *  @see @ref oglplus::PathNVListMode "PathNVListMode"
 *
 *  @glsymbols
 *  @gldefref{FIRST_TO_REST_NV}
 *
 *  @ingroup smart_enums
 */
struct FirstToRest {

/// Conversion to any @p Enum type having the FirstToRest value.
/** Instances of the @ref oglplus::smart_enums::FirstToRest "FirstToRest"
 *  type are convertible to instances of any enumeration type having
 *  the @c FirstToRest value.
 */
template <typename Enum, Enum = Enum::FirstToRest> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FirstToRest value.
/** Instances of the @c smart_enums::FirstToRest type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FirstToRest value.
 */
template <typename Enum> friend bool operator==(Enum value, FirstToRest);

/// Non-equality comparison with any @p Enum type having the FirstToRest value.
/** Instances of the @c smart_enums::FirstToRest type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FirstToRest value.
 */
template <typename Enum> friend bool operator!=(Enum value, FirstToRest);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FirstVertexConvention value.
/**
 *  @see @ref oglplus::ProvokeMode "ProvokeMode"
 *
 *  @glsymbols
 *  @gldefref{FIRST_VERTEX_CONVENTION}
 *
 *  @ingroup smart_enums
 */
struct FirstVertexConvention {

/// Conversion to any @p Enum type having the FirstVertexConvention value.
/** Instances of the @ref oglplus::smart_enums::FirstVertexConvention "FirstVertexConvention"
 *  type are convertible to instances of any enumeration type having
 *  the @c FirstVertexConvention value.
 */
template <typename Enum, Enum = Enum::FirstVertexConvention> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FirstVertexConvention value.
/** Instances of the @c smart_enums::FirstVertexConvention type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FirstVertexConvention value.
 */
template <typename Enum> friend bool operator==(Enum value, FirstVertexConvention);

/// Non-equality comparison with any @p Enum type having the FirstVertexConvention value.
/** Instances of the @c smart_enums::FirstVertexConvention type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FirstVertexConvention value.
 */
template <typename Enum> friend bool operator!=(Enum value, FirstVertexConvention);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Fixed value.
/**
 *  @see @ref oglplus::DataType "DataType"
 *
 *  @glsymbols
 *  @gldefref{FIXED}
 *
 *  @ingroup smart_enums
 */
struct Fixed {

/// Conversion to any @p Enum type having the Fixed value.
/** Instances of the @ref oglplus::smart_enums::Fixed "Fixed"
 *  type are convertible to instances of any enumeration type having
 *  the @c Fixed value.
 */
template <typename Enum, Enum = Enum::Fixed> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Fixed value.
/** Instances of the @c smart_enums::Fixed type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Fixed value.
 */
template <typename Enum> friend bool operator==(Enum value, Fixed);

/// Non-equality comparison with any @p Enum type having the Fixed value.
/** Instances of the @c smart_enums::Fixed type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Fixed value.
 */
template <typename Enum> friend bool operator!=(Enum value, Fixed);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Flat value.
/**
 *  @see @ref oglplus::PathNVCapStyle "PathNVCapStyle"
 *
 *  @glsymbols
 *  @gldefref{FLAT}
 *
 *  @ingroup smart_enums
 */
struct Flat {

/// Conversion to any @p Enum type having the Flat value.
/** Instances of the @ref oglplus::smart_enums::Flat "Flat"
 *  type are convertible to instances of any enumeration type having
 *  the @c Flat value.
 */
template <typename Enum, Enum = Enum::Flat> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Flat value.
/** Instances of the @c smart_enums::Flat type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Flat value.
 */
template <typename Enum> friend bool operator==(Enum value, Flat);

/// Non-equality comparison with any @p Enum type having the Flat value.
/** Instances of the @c smart_enums::Flat type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Flat value.
 */
template <typename Enum> friend bool operator!=(Enum value, Flat);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Float value.
/**
 *  @see @ref oglplus::DataType "DataType"
 *  @see @ref oglplus::PerfMonitorAMDType "PerfMonitorAMDType"
 *  @see @ref oglplus::PixelDataType "PixelDataType"
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{FLOAT}
 *
 *  @ingroup smart_enums
 */
struct Float {

/// Conversion to any @p Enum type having the Float value.
/** Instances of the @ref oglplus::smart_enums::Float "Float"
 *  type are convertible to instances of any enumeration type having
 *  the @c Float value.
 */
template <typename Enum, Enum = Enum::Float> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Float value.
/** Instances of the @c smart_enums::Float type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Float value.
 */
template <typename Enum> friend bool operator==(Enum value, Float);

/// Non-equality comparison with any @p Enum type having the Float value.
/** Instances of the @c smart_enums::Float type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Float value.
 */
template <typename Enum> friend bool operator!=(Enum value, Float);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Float_32UnsignedInt_24_8_Rev value.
/**
 *  @see @ref oglplus::PixelDataType "PixelDataType"
 *
 *  @glsymbols
 *  @gldefref{FLOAT_32_UNSIGNED_INT_24_8_REV}
 *
 *  @ingroup smart_enums
 */
struct Float_32UnsignedInt_24_8_Rev {

/// Conversion to any @p Enum type having the Float_32UnsignedInt_24_8_Rev value.
/** Instances of the @ref oglplus::smart_enums::Float_32UnsignedInt_24_8_Rev "Float_32UnsignedInt_24_8_Rev"
 *  type are convertible to instances of any enumeration type having
 *  the @c Float_32UnsignedInt_24_8_Rev value.
 */
template <typename Enum, Enum = Enum::Float_32UnsignedInt_24_8_Rev> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Float_32UnsignedInt_24_8_Rev value.
/** Instances of the @c smart_enums::Float_32UnsignedInt_24_8_Rev type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Float_32UnsignedInt_24_8_Rev value.
 */
template <typename Enum> friend bool operator==(Enum value, Float_32UnsignedInt_24_8_Rev);

/// Non-equality comparison with any @p Enum type having the Float_32UnsignedInt_24_8_Rev value.
/** Instances of the @c smart_enums::Float_32UnsignedInt_24_8_Rev type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Float_32UnsignedInt_24_8_Rev value.
 */
template <typename Enum> friend bool operator!=(Enum value, Float_32UnsignedInt_24_8_Rev);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FloatMat2 value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{FLOAT_MAT2}
 *
 *  @ingroup smart_enums
 */
struct FloatMat2 {

/// Conversion to any @p Enum type having the FloatMat2 value.
/** Instances of the @ref oglplus::smart_enums::FloatMat2 "FloatMat2"
 *  type are convertible to instances of any enumeration type having
 *  the @c FloatMat2 value.
 */
template <typename Enum, Enum = Enum::FloatMat2> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FloatMat2 value.
/** Instances of the @c smart_enums::FloatMat2 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FloatMat2 value.
 */
template <typename Enum> friend bool operator==(Enum value, FloatMat2);

/// Non-equality comparison with any @p Enum type having the FloatMat2 value.
/** Instances of the @c smart_enums::FloatMat2 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FloatMat2 value.
 */
template <typename Enum> friend bool operator!=(Enum value, FloatMat2);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FloatMat2x3 value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{FLOAT_MAT2x3}
 *
 *  @ingroup smart_enums
 */
struct FloatMat2x3 {

/// Conversion to any @p Enum type having the FloatMat2x3 value.
/** Instances of the @ref oglplus::smart_enums::FloatMat2x3 "FloatMat2x3"
 *  type are convertible to instances of any enumeration type having
 *  the @c FloatMat2x3 value.
 */
template <typename Enum, Enum = Enum::FloatMat2x3> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FloatMat2x3 value.
/** Instances of the @c smart_enums::FloatMat2x3 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FloatMat2x3 value.
 */
template <typename Enum> friend bool operator==(Enum value, FloatMat2x3);

/// Non-equality comparison with any @p Enum type having the FloatMat2x3 value.
/** Instances of the @c smart_enums::FloatMat2x3 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FloatMat2x3 value.
 */
template <typename Enum> friend bool operator!=(Enum value, FloatMat2x3);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FloatMat2x4 value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{FLOAT_MAT2x4}
 *
 *  @ingroup smart_enums
 */
struct FloatMat2x4 {

/// Conversion to any @p Enum type having the FloatMat2x4 value.
/** Instances of the @ref oglplus::smart_enums::FloatMat2x4 "FloatMat2x4"
 *  type are convertible to instances of any enumeration type having
 *  the @c FloatMat2x4 value.
 */
template <typename Enum, Enum = Enum::FloatMat2x4> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FloatMat2x4 value.
/** Instances of the @c smart_enums::FloatMat2x4 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FloatMat2x4 value.
 */
template <typename Enum> friend bool operator==(Enum value, FloatMat2x4);

/// Non-equality comparison with any @p Enum type having the FloatMat2x4 value.
/** Instances of the @c smart_enums::FloatMat2x4 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FloatMat2x4 value.
 */
template <typename Enum> friend bool operator!=(Enum value, FloatMat2x4);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FloatMat3 value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{FLOAT_MAT3}
 *
 *  @ingroup smart_enums
 */
struct FloatMat3 {

/// Conversion to any @p Enum type having the FloatMat3 value.
/** Instances of the @ref oglplus::smart_enums::FloatMat3 "FloatMat3"
 *  type are convertible to instances of any enumeration type having
 *  the @c FloatMat3 value.
 */
template <typename Enum, Enum = Enum::FloatMat3> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FloatMat3 value.
/** Instances of the @c smart_enums::FloatMat3 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FloatMat3 value.
 */
template <typename Enum> friend bool operator==(Enum value, FloatMat3);

/// Non-equality comparison with any @p Enum type having the FloatMat3 value.
/** Instances of the @c smart_enums::FloatMat3 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FloatMat3 value.
 */
template <typename Enum> friend bool operator!=(Enum value, FloatMat3);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FloatMat3x2 value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{FLOAT_MAT3x2}
 *
 *  @ingroup smart_enums
 */
struct FloatMat3x2 {

/// Conversion to any @p Enum type having the FloatMat3x2 value.
/** Instances of the @ref oglplus::smart_enums::FloatMat3x2 "FloatMat3x2"
 *  type are convertible to instances of any enumeration type having
 *  the @c FloatMat3x2 value.
 */
template <typename Enum, Enum = Enum::FloatMat3x2> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FloatMat3x2 value.
/** Instances of the @c smart_enums::FloatMat3x2 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FloatMat3x2 value.
 */
template <typename Enum> friend bool operator==(Enum value, FloatMat3x2);

/// Non-equality comparison with any @p Enum type having the FloatMat3x2 value.
/** Instances of the @c smart_enums::FloatMat3x2 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FloatMat3x2 value.
 */
template <typename Enum> friend bool operator!=(Enum value, FloatMat3x2);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FloatMat3x4 value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{FLOAT_MAT3x4}
 *
 *  @ingroup smart_enums
 */
struct FloatMat3x4 {

/// Conversion to any @p Enum type having the FloatMat3x4 value.
/** Instances of the @ref oglplus::smart_enums::FloatMat3x4 "FloatMat3x4"
 *  type are convertible to instances of any enumeration type having
 *  the @c FloatMat3x4 value.
 */
template <typename Enum, Enum = Enum::FloatMat3x4> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FloatMat3x4 value.
/** Instances of the @c smart_enums::FloatMat3x4 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FloatMat3x4 value.
 */
template <typename Enum> friend bool operator==(Enum value, FloatMat3x4);

/// Non-equality comparison with any @p Enum type having the FloatMat3x4 value.
/** Instances of the @c smart_enums::FloatMat3x4 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FloatMat3x4 value.
 */
template <typename Enum> friend bool operator!=(Enum value, FloatMat3x4);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FloatMat4 value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{FLOAT_MAT4}
 *
 *  @ingroup smart_enums
 */
struct FloatMat4 {

/// Conversion to any @p Enum type having the FloatMat4 value.
/** Instances of the @ref oglplus::smart_enums::FloatMat4 "FloatMat4"
 *  type are convertible to instances of any enumeration type having
 *  the @c FloatMat4 value.
 */
template <typename Enum, Enum = Enum::FloatMat4> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FloatMat4 value.
/** Instances of the @c smart_enums::FloatMat4 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FloatMat4 value.
 */
template <typename Enum> friend bool operator==(Enum value, FloatMat4);

/// Non-equality comparison with any @p Enum type having the FloatMat4 value.
/** Instances of the @c smart_enums::FloatMat4 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FloatMat4 value.
 */
template <typename Enum> friend bool operator!=(Enum value, FloatMat4);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FloatMat4x2 value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{FLOAT_MAT4x2}
 *
 *  @ingroup smart_enums
 */
struct FloatMat4x2 {

/// Conversion to any @p Enum type having the FloatMat4x2 value.
/** Instances of the @ref oglplus::smart_enums::FloatMat4x2 "FloatMat4x2"
 *  type are convertible to instances of any enumeration type having
 *  the @c FloatMat4x2 value.
 */
template <typename Enum, Enum = Enum::FloatMat4x2> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FloatMat4x2 value.
/** Instances of the @c smart_enums::FloatMat4x2 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FloatMat4x2 value.
 */
template <typename Enum> friend bool operator==(Enum value, FloatMat4x2);

/// Non-equality comparison with any @p Enum type having the FloatMat4x2 value.
/** Instances of the @c smart_enums::FloatMat4x2 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FloatMat4x2 value.
 */
template <typename Enum> friend bool operator!=(Enum value, FloatMat4x2);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FloatMat4x3 value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{FLOAT_MAT4x3}
 *
 *  @ingroup smart_enums
 */
struct FloatMat4x3 {

/// Conversion to any @p Enum type having the FloatMat4x3 value.
/** Instances of the @ref oglplus::smart_enums::FloatMat4x3 "FloatMat4x3"
 *  type are convertible to instances of any enumeration type having
 *  the @c FloatMat4x3 value.
 */
template <typename Enum, Enum = Enum::FloatMat4x3> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FloatMat4x3 value.
/** Instances of the @c smart_enums::FloatMat4x3 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FloatMat4x3 value.
 */
template <typename Enum> friend bool operator==(Enum value, FloatMat4x3);

/// Non-equality comparison with any @p Enum type having the FloatMat4x3 value.
/** Instances of the @c smart_enums::FloatMat4x3 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FloatMat4x3 value.
 */
template <typename Enum> friend bool operator!=(Enum value, FloatMat4x3);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FloatVec2 value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{FLOAT_VEC2}
 *
 *  @ingroup smart_enums
 */
struct FloatVec2 {

/// Conversion to any @p Enum type having the FloatVec2 value.
/** Instances of the @ref oglplus::smart_enums::FloatVec2 "FloatVec2"
 *  type are convertible to instances of any enumeration type having
 *  the @c FloatVec2 value.
 */
template <typename Enum, Enum = Enum::FloatVec2> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FloatVec2 value.
/** Instances of the @c smart_enums::FloatVec2 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FloatVec2 value.
 */
template <typename Enum> friend bool operator==(Enum value, FloatVec2);

/// Non-equality comparison with any @p Enum type having the FloatVec2 value.
/** Instances of the @c smart_enums::FloatVec2 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FloatVec2 value.
 */
template <typename Enum> friend bool operator!=(Enum value, FloatVec2);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FloatVec3 value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{FLOAT_VEC3}
 *
 *  @ingroup smart_enums
 */
struct FloatVec3 {

/// Conversion to any @p Enum type having the FloatVec3 value.
/** Instances of the @ref oglplus::smart_enums::FloatVec3 "FloatVec3"
 *  type are convertible to instances of any enumeration type having
 *  the @c FloatVec3 value.
 */
template <typename Enum, Enum = Enum::FloatVec3> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FloatVec3 value.
/** Instances of the @c smart_enums::FloatVec3 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FloatVec3 value.
 */
template <typename Enum> friend bool operator==(Enum value, FloatVec3);

/// Non-equality comparison with any @p Enum type having the FloatVec3 value.
/** Instances of the @c smart_enums::FloatVec3 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FloatVec3 value.
 */
template <typename Enum> friend bool operator!=(Enum value, FloatVec3);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FloatVec4 value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{FLOAT_VEC4}
 *
 *  @ingroup smart_enums
 */
struct FloatVec4 {

/// Conversion to any @p Enum type having the FloatVec4 value.
/** Instances of the @ref oglplus::smart_enums::FloatVec4 "FloatVec4"
 *  type are convertible to instances of any enumeration type having
 *  the @c FloatVec4 value.
 */
template <typename Enum, Enum = Enum::FloatVec4> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FloatVec4 value.
/** Instances of the @c smart_enums::FloatVec4 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FloatVec4 value.
 */
template <typename Enum> friend bool operator==(Enum value, FloatVec4);

/// Non-equality comparison with any @p Enum type having the FloatVec4 value.
/** Instances of the @c smart_enums::FloatVec4 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FloatVec4 value.
 */
template <typename Enum> friend bool operator!=(Enum value, FloatVec4);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FlushExplicit value.
/**
 *  @see @ref oglplus::BufferMapAccess "BufferMapAccess"
 *
 *  @glsymbols
 *  @gldefref{MAP_FLUSH_EXPLICIT_BIT}
 *
 *  @ingroup smart_enums
 */
struct FlushExplicit {

/// Conversion to any @p Enum type having the FlushExplicit value.
/** Instances of the @ref oglplus::smart_enums::FlushExplicit "FlushExplicit"
 *  type are convertible to instances of any enumeration type having
 *  the @c FlushExplicit value.
 */
template <typename Enum, Enum = Enum::FlushExplicit> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FlushExplicit value.
/** Instances of the @c smart_enums::FlushExplicit type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FlushExplicit value.
 */
template <typename Enum> friend bool operator==(Enum value, FlushExplicit);

/// Non-equality comparison with any @p Enum type having the FlushExplicit value.
/** Instances of the @c smart_enums::FlushExplicit type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FlushExplicit value.
 */
template <typename Enum> friend bool operator!=(Enum value, FlushExplicit);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Fog value.
/**
 *  @see @ref oglplus::CompatibilityAttributeGroup "CompatibilityAttributeGroup"
 *
 *  @glsymbols
 *  @gldefref{FOG_BIT}
 *
 *  @ingroup smart_enums
 */
struct Fog {

/// Conversion to any @p Enum type having the Fog value.
/** Instances of the @ref oglplus::smart_enums::Fog "Fog"
 *  type are convertible to instances of any enumeration type having
 *  the @c Fog value.
 */
template <typename Enum, Enum = Enum::Fog> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Fog value.
/** Instances of the @c smart_enums::Fog type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Fog value.
 */
template <typename Enum> friend bool operator==(Enum value, Fog);

/// Non-equality comparison with any @p Enum type having the Fog value.
/** Instances of the @c smart_enums::Fog type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Fog value.
 */
template <typename Enum> friend bool operator!=(Enum value, Fog);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FontAscender value.
/**
 *  @see @ref oglplus::PathNVMetricQuery "PathNVMetricQuery"
 *
 *  @glsymbols
 *  @gldefref{FONT_ASCENDER_BIT_NV}
 *
 *  @ingroup smart_enums
 */
struct FontAscender {

/// Conversion to any @p Enum type having the FontAscender value.
/** Instances of the @ref oglplus::smart_enums::FontAscender "FontAscender"
 *  type are convertible to instances of any enumeration type having
 *  the @c FontAscender value.
 */
template <typename Enum, Enum = Enum::FontAscender> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FontAscender value.
/** Instances of the @c smart_enums::FontAscender type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FontAscender value.
 */
template <typename Enum> friend bool operator==(Enum value, FontAscender);

/// Non-equality comparison with any @p Enum type having the FontAscender value.
/** Instances of the @c smart_enums::FontAscender type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FontAscender value.
 */
template <typename Enum> friend bool operator!=(Enum value, FontAscender);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FontDescender value.
/**
 *  @see @ref oglplus::PathNVMetricQuery "PathNVMetricQuery"
 *
 *  @glsymbols
 *  @gldefref{FONT_DESCENDER_BIT_NV}
 *
 *  @ingroup smart_enums
 */
struct FontDescender {

/// Conversion to any @p Enum type having the FontDescender value.
/** Instances of the @ref oglplus::smart_enums::FontDescender "FontDescender"
 *  type are convertible to instances of any enumeration type having
 *  the @c FontDescender value.
 */
template <typename Enum, Enum = Enum::FontDescender> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FontDescender value.
/** Instances of the @c smart_enums::FontDescender type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FontDescender value.
 */
template <typename Enum> friend bool operator==(Enum value, FontDescender);

/// Non-equality comparison with any @p Enum type having the FontDescender value.
/** Instances of the @c smart_enums::FontDescender type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FontDescender value.
 */
template <typename Enum> friend bool operator!=(Enum value, FontDescender);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FontHasKerning value.
/**
 *  @see @ref oglplus::PathNVMetricQuery "PathNVMetricQuery"
 *
 *  @glsymbols
 *  @gldefref{FONT_HAS_KERNING_BIT_NV}
 *
 *  @ingroup smart_enums
 */
struct FontHasKerning {

/// Conversion to any @p Enum type having the FontHasKerning value.
/** Instances of the @ref oglplus::smart_enums::FontHasKerning "FontHasKerning"
 *  type are convertible to instances of any enumeration type having
 *  the @c FontHasKerning value.
 */
template <typename Enum, Enum = Enum::FontHasKerning> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FontHasKerning value.
/** Instances of the @c smart_enums::FontHasKerning type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FontHasKerning value.
 */
template <typename Enum> friend bool operator==(Enum value, FontHasKerning);

/// Non-equality comparison with any @p Enum type having the FontHasKerning value.
/** Instances of the @c smart_enums::FontHasKerning type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FontHasKerning value.
 */
template <typename Enum> friend bool operator!=(Enum value, FontHasKerning);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FontHeight value.
/**
 *  @see @ref oglplus::PathNVMetricQuery "PathNVMetricQuery"
 *
 *  @glsymbols
 *  @gldefref{FONT_HEIGHT_BIT_NV}
 *
 *  @ingroup smart_enums
 */
struct FontHeight {

/// Conversion to any @p Enum type having the FontHeight value.
/** Instances of the @ref oglplus::smart_enums::FontHeight "FontHeight"
 *  type are convertible to instances of any enumeration type having
 *  the @c FontHeight value.
 */
template <typename Enum, Enum = Enum::FontHeight> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FontHeight value.
/** Instances of the @c smart_enums::FontHeight type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FontHeight value.
 */
template <typename Enum> friend bool operator==(Enum value, FontHeight);

/// Non-equality comparison with any @p Enum type having the FontHeight value.
/** Instances of the @c smart_enums::FontHeight type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FontHeight value.
 */
template <typename Enum> friend bool operator!=(Enum value, FontHeight);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FontMaxAdvanceHeight value.
/**
 *  @see @ref oglplus::PathNVMetricQuery "PathNVMetricQuery"
 *
 *  @glsymbols
 *  @gldefref{FONT_MAX_ADVANCE_HEIGHT_BIT_NV}
 *
 *  @ingroup smart_enums
 */
struct FontMaxAdvanceHeight {

/// Conversion to any @p Enum type having the FontMaxAdvanceHeight value.
/** Instances of the @ref oglplus::smart_enums::FontMaxAdvanceHeight "FontMaxAdvanceHeight"
 *  type are convertible to instances of any enumeration type having
 *  the @c FontMaxAdvanceHeight value.
 */
template <typename Enum, Enum = Enum::FontMaxAdvanceHeight> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FontMaxAdvanceHeight value.
/** Instances of the @c smart_enums::FontMaxAdvanceHeight type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FontMaxAdvanceHeight value.
 */
template <typename Enum> friend bool operator==(Enum value, FontMaxAdvanceHeight);

/// Non-equality comparison with any @p Enum type having the FontMaxAdvanceHeight value.
/** Instances of the @c smart_enums::FontMaxAdvanceHeight type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FontMaxAdvanceHeight value.
 */
template <typename Enum> friend bool operator!=(Enum value, FontMaxAdvanceHeight);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FontMaxAdvanceWidth value.
/**
 *  @see @ref oglplus::PathNVMetricQuery "PathNVMetricQuery"
 *
 *  @glsymbols
 *  @gldefref{FONT_MAX_ADVANCE_WIDTH_BIT_NV}
 *
 *  @ingroup smart_enums
 */
struct FontMaxAdvanceWidth {

/// Conversion to any @p Enum type having the FontMaxAdvanceWidth value.
/** Instances of the @ref oglplus::smart_enums::FontMaxAdvanceWidth "FontMaxAdvanceWidth"
 *  type are convertible to instances of any enumeration type having
 *  the @c FontMaxAdvanceWidth value.
 */
template <typename Enum, Enum = Enum::FontMaxAdvanceWidth> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FontMaxAdvanceWidth value.
/** Instances of the @c smart_enums::FontMaxAdvanceWidth type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FontMaxAdvanceWidth value.
 */
template <typename Enum> friend bool operator==(Enum value, FontMaxAdvanceWidth);

/// Non-equality comparison with any @p Enum type having the FontMaxAdvanceWidth value.
/** Instances of the @c smart_enums::FontMaxAdvanceWidth type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FontMaxAdvanceWidth value.
 */
template <typename Enum> friend bool operator!=(Enum value, FontMaxAdvanceWidth);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FontUnderlinePosition value.
/**
 *  @see @ref oglplus::PathNVMetricQuery "PathNVMetricQuery"
 *
 *  @glsymbols
 *  @gldefref{FONT_UNDERLINE_POSITION_BIT_NV}
 *
 *  @ingroup smart_enums
 */
struct FontUnderlinePosition {

/// Conversion to any @p Enum type having the FontUnderlinePosition value.
/** Instances of the @ref oglplus::smart_enums::FontUnderlinePosition "FontUnderlinePosition"
 *  type are convertible to instances of any enumeration type having
 *  the @c FontUnderlinePosition value.
 */
template <typename Enum, Enum = Enum::FontUnderlinePosition> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FontUnderlinePosition value.
/** Instances of the @c smart_enums::FontUnderlinePosition type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FontUnderlinePosition value.
 */
template <typename Enum> friend bool operator==(Enum value, FontUnderlinePosition);

/// Non-equality comparison with any @p Enum type having the FontUnderlinePosition value.
/** Instances of the @c smart_enums::FontUnderlinePosition type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FontUnderlinePosition value.
 */
template <typename Enum> friend bool operator!=(Enum value, FontUnderlinePosition);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FontUnderlineThickness value.
/**
 *  @see @ref oglplus::PathNVMetricQuery "PathNVMetricQuery"
 *
 *  @glsymbols
 *  @gldefref{FONT_UNDERLINE_THICKNESS_BIT_NV}
 *
 *  @ingroup smart_enums
 */
struct FontUnderlineThickness {

/// Conversion to any @p Enum type having the FontUnderlineThickness value.
/** Instances of the @ref oglplus::smart_enums::FontUnderlineThickness "FontUnderlineThickness"
 *  type are convertible to instances of any enumeration type having
 *  the @c FontUnderlineThickness value.
 */
template <typename Enum, Enum = Enum::FontUnderlineThickness> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FontUnderlineThickness value.
/** Instances of the @c smart_enums::FontUnderlineThickness type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FontUnderlineThickness value.
 */
template <typename Enum> friend bool operator==(Enum value, FontUnderlineThickness);

/// Non-equality comparison with any @p Enum type having the FontUnderlineThickness value.
/** Instances of the @c smart_enums::FontUnderlineThickness type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FontUnderlineThickness value.
 */
template <typename Enum> friend bool operator!=(Enum value, FontUnderlineThickness);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FontUnitsPerEm value.
/**
 *  @see @ref oglplus::PathNVMetricQuery "PathNVMetricQuery"
 *
 *  @glsymbols
 *  @gldefref{FONT_UNITS_PER_EM_BIT_NV}
 *
 *  @ingroup smart_enums
 */
struct FontUnitsPerEm {

/// Conversion to any @p Enum type having the FontUnitsPerEm value.
/** Instances of the @ref oglplus::smart_enums::FontUnitsPerEm "FontUnitsPerEm"
 *  type are convertible to instances of any enumeration type having
 *  the @c FontUnitsPerEm value.
 */
template <typename Enum, Enum = Enum::FontUnitsPerEm> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FontUnitsPerEm value.
/** Instances of the @c smart_enums::FontUnitsPerEm type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FontUnitsPerEm value.
 */
template <typename Enum> friend bool operator==(Enum value, FontUnitsPerEm);

/// Non-equality comparison with any @p Enum type having the FontUnitsPerEm value.
/** Instances of the @c smart_enums::FontUnitsPerEm type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FontUnitsPerEm value.
 */
template <typename Enum> friend bool operator!=(Enum value, FontUnitsPerEm);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FontXMaxBounds value.
/**
 *  @see @ref oglplus::PathNVMetricQuery "PathNVMetricQuery"
 *
 *  @glsymbols
 *  @gldefref{FONT_X_MAX_BOUNDS_BIT_NV}
 *
 *  @ingroup smart_enums
 */
struct FontXMaxBounds {

/// Conversion to any @p Enum type having the FontXMaxBounds value.
/** Instances of the @ref oglplus::smart_enums::FontXMaxBounds "FontXMaxBounds"
 *  type are convertible to instances of any enumeration type having
 *  the @c FontXMaxBounds value.
 */
template <typename Enum, Enum = Enum::FontXMaxBounds> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FontXMaxBounds value.
/** Instances of the @c smart_enums::FontXMaxBounds type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FontXMaxBounds value.
 */
template <typename Enum> friend bool operator==(Enum value, FontXMaxBounds);

/// Non-equality comparison with any @p Enum type having the FontXMaxBounds value.
/** Instances of the @c smart_enums::FontXMaxBounds type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FontXMaxBounds value.
 */
template <typename Enum> friend bool operator!=(Enum value, FontXMaxBounds);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FontXMinBounds value.
/**
 *  @see @ref oglplus::PathNVMetricQuery "PathNVMetricQuery"
 *
 *  @glsymbols
 *  @gldefref{FONT_X_MIN_BOUNDS_BIT_NV}
 *
 *  @ingroup smart_enums
 */
struct FontXMinBounds {

/// Conversion to any @p Enum type having the FontXMinBounds value.
/** Instances of the @ref oglplus::smart_enums::FontXMinBounds "FontXMinBounds"
 *  type are convertible to instances of any enumeration type having
 *  the @c FontXMinBounds value.
 */
template <typename Enum, Enum = Enum::FontXMinBounds> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FontXMinBounds value.
/** Instances of the @c smart_enums::FontXMinBounds type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FontXMinBounds value.
 */
template <typename Enum> friend bool operator==(Enum value, FontXMinBounds);

/// Non-equality comparison with any @p Enum type having the FontXMinBounds value.
/** Instances of the @c smart_enums::FontXMinBounds type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FontXMinBounds value.
 */
template <typename Enum> friend bool operator!=(Enum value, FontXMinBounds);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FontYMaxBounds value.
/**
 *  @see @ref oglplus::PathNVMetricQuery "PathNVMetricQuery"
 *
 *  @glsymbols
 *  @gldefref{FONT_Y_MAX_BOUNDS_BIT_NV}
 *
 *  @ingroup smart_enums
 */
struct FontYMaxBounds {

/// Conversion to any @p Enum type having the FontYMaxBounds value.
/** Instances of the @ref oglplus::smart_enums::FontYMaxBounds "FontYMaxBounds"
 *  type are convertible to instances of any enumeration type having
 *  the @c FontYMaxBounds value.
 */
template <typename Enum, Enum = Enum::FontYMaxBounds> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FontYMaxBounds value.
/** Instances of the @c smart_enums::FontYMaxBounds type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FontYMaxBounds value.
 */
template <typename Enum> friend bool operator==(Enum value, FontYMaxBounds);

/// Non-equality comparison with any @p Enum type having the FontYMaxBounds value.
/** Instances of the @c smart_enums::FontYMaxBounds type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FontYMaxBounds value.
 */
template <typename Enum> friend bool operator!=(Enum value, FontYMaxBounds);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FontYMinBounds value.
/**
 *  @see @ref oglplus::PathNVMetricQuery "PathNVMetricQuery"
 *
 *  @glsymbols
 *  @gldefref{FONT_Y_MIN_BOUNDS_BIT_NV}
 *
 *  @ingroup smart_enums
 */
struct FontYMinBounds {

/// Conversion to any @p Enum type having the FontYMinBounds value.
/** Instances of the @ref oglplus::smart_enums::FontYMinBounds "FontYMinBounds"
 *  type are convertible to instances of any enumeration type having
 *  the @c FontYMinBounds value.
 */
template <typename Enum, Enum = Enum::FontYMinBounds> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FontYMinBounds value.
/** Instances of the @c smart_enums::FontYMinBounds type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FontYMinBounds value.
 */
template <typename Enum> friend bool operator==(Enum value, FontYMinBounds);

/// Non-equality comparison with any @p Enum type having the FontYMinBounds value.
/** Instances of the @c smart_enums::FontYMinBounds type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FontYMinBounds value.
 */
template <typename Enum> friend bool operator!=(Enum value, FontYMinBounds);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ForwardCompatible value.
/**
 *  @see @ref oglplus::ContextFlagBit "ContextFlagBit"
 *
 *  @glsymbols
 *  @gldefref{CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT}
 *
 *  @ingroup smart_enums
 */
struct ForwardCompatible {

/// Conversion to any @p Enum type having the ForwardCompatible value.
/** Instances of the @ref oglplus::smart_enums::ForwardCompatible "ForwardCompatible"
 *  type are convertible to instances of any enumeration type having
 *  the @c ForwardCompatible value.
 */
template <typename Enum, Enum = Enum::ForwardCompatible> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ForwardCompatible value.
/** Instances of the @c smart_enums::ForwardCompatible type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ForwardCompatible value.
 */
template <typename Enum> friend bool operator==(Enum value, ForwardCompatible);

/// Non-equality comparison with any @p Enum type having the ForwardCompatible value.
/** Instances of the @c smart_enums::ForwardCompatible type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ForwardCompatible value.
 */
template <typename Enum> friend bool operator!=(Enum value, ForwardCompatible);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FractionalEven value.
/**
 *  @see @ref oglplus::TessGenPrimitiveSpacing "TessGenPrimitiveSpacing"
 *
 *  @glsymbols
 *  @gldefref{FRACTIONAL_EVEN}
 *
 *  @ingroup smart_enums
 */
struct FractionalEven {

/// Conversion to any @p Enum type having the FractionalEven value.
/** Instances of the @ref oglplus::smart_enums::FractionalEven "FractionalEven"
 *  type are convertible to instances of any enumeration type having
 *  the @c FractionalEven value.
 */
template <typename Enum, Enum = Enum::FractionalEven> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FractionalEven value.
/** Instances of the @c smart_enums::FractionalEven type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FractionalEven value.
 */
template <typename Enum> friend bool operator==(Enum value, FractionalEven);

/// Non-equality comparison with any @p Enum type having the FractionalEven value.
/** Instances of the @c smart_enums::FractionalEven type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FractionalEven value.
 */
template <typename Enum> friend bool operator!=(Enum value, FractionalEven);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FractionalOdd value.
/**
 *  @see @ref oglplus::TessGenPrimitiveSpacing "TessGenPrimitiveSpacing"
 *
 *  @glsymbols
 *  @gldefref{FRACTIONAL_ODD}
 *
 *  @ingroup smart_enums
 */
struct FractionalOdd {

/// Conversion to any @p Enum type having the FractionalOdd value.
/** Instances of the @ref oglplus::smart_enums::FractionalOdd "FractionalOdd"
 *  type are convertible to instances of any enumeration type having
 *  the @c FractionalOdd value.
 */
template <typename Enum, Enum = Enum::FractionalOdd> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FractionalOdd value.
/** Instances of the @c smart_enums::FractionalOdd type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FractionalOdd value.
 */
template <typename Enum> friend bool operator==(Enum value, FractionalOdd);

/// Non-equality comparison with any @p Enum type having the FractionalOdd value.
/** Instances of the @c smart_enums::FractionalOdd type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FractionalOdd value.
 */
template <typename Enum> friend bool operator!=(Enum value, FractionalOdd);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Fragment value.
/**
 *  @see @ref oglplus::ShaderType "ShaderType"
 *
 *  @glsymbols
 *  @gldefref{FRAGMENT_SHADER}
 *
 *  @ingroup smart_enums
 */
struct Fragment {

/// Conversion to any @p Enum type having the Fragment value.
/** Instances of the @ref oglplus::smart_enums::Fragment "Fragment"
 *  type are convertible to instances of any enumeration type having
 *  the @c Fragment value.
 */
template <typename Enum, Enum = Enum::Fragment> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Fragment value.
/** Instances of the @c smart_enums::Fragment type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Fragment value.
 */
template <typename Enum> friend bool operator==(Enum value, Fragment);

/// Non-equality comparison with any @p Enum type having the Fragment value.
/** Instances of the @c smart_enums::Fragment type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Fragment value.
 */
template <typename Enum> friend bool operator!=(Enum value, Fragment);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FragmentShader value.
/**
 *  @see @ref oglplus::ProgramPipelineStage "ProgramPipelineStage"
 *
 *  @glsymbols
 *  @gldefref{FRAGMENT_SHADER_BIT}
 *
 *  @ingroup smart_enums
 */
struct FragmentShader {

/// Conversion to any @p Enum type having the FragmentShader value.
/** Instances of the @ref oglplus::smart_enums::FragmentShader "FragmentShader"
 *  type are convertible to instances of any enumeration type having
 *  the @c FragmentShader value.
 */
template <typename Enum, Enum = Enum::FragmentShader> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FragmentShader value.
/** Instances of the @c smart_enums::FragmentShader type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FragmentShader value.
 */
template <typename Enum> friend bool operator==(Enum value, FragmentShader);

/// Non-equality comparison with any @p Enum type having the FragmentShader value.
/** Instances of the @c smart_enums::FragmentShader type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FragmentShader value.
 */
template <typename Enum> friend bool operator!=(Enum value, FragmentShader);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FragmentShaderDerivative value.
/**
 *  @see @ref oglplus::HintTarget "HintTarget"
 *
 *  @glsymbols
 *  @gldefref{FRAGMENT_SHADER_DERIVATIVE_HINT}
 *
 *  @ingroup smart_enums
 */
struct FragmentShaderDerivative {

/// Conversion to any @p Enum type having the FragmentShaderDerivative value.
/** Instances of the @ref oglplus::smart_enums::FragmentShaderDerivative "FragmentShaderDerivative"
 *  type are convertible to instances of any enumeration type having
 *  the @c FragmentShaderDerivative value.
 */
template <typename Enum, Enum = Enum::FragmentShaderDerivative> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FragmentShaderDerivative value.
/** Instances of the @c smart_enums::FragmentShaderDerivative type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FragmentShaderDerivative value.
 */
template <typename Enum> friend bool operator==(Enum value, FragmentShaderDerivative);

/// Non-equality comparison with any @p Enum type having the FragmentShaderDerivative value.
/** Instances of the @c smart_enums::FragmentShaderDerivative type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FragmentShaderDerivative value.
 */
template <typename Enum> friend bool operator!=(Enum value, FragmentShaderDerivative);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FragmentSubroutine value.
/**
 *  @see @ref oglplus::ProgramInterface "ProgramInterface"
 *
 *  @glsymbols
 *  @gldefref{FRAGMENT_SUBROUTINE}
 *
 *  @ingroup smart_enums
 */
struct FragmentSubroutine {

/// Conversion to any @p Enum type having the FragmentSubroutine value.
/** Instances of the @ref oglplus::smart_enums::FragmentSubroutine "FragmentSubroutine"
 *  type are convertible to instances of any enumeration type having
 *  the @c FragmentSubroutine value.
 */
template <typename Enum, Enum = Enum::FragmentSubroutine> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FragmentSubroutine value.
/** Instances of the @c smart_enums::FragmentSubroutine type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FragmentSubroutine value.
 */
template <typename Enum> friend bool operator==(Enum value, FragmentSubroutine);

/// Non-equality comparison with any @p Enum type having the FragmentSubroutine value.
/** Instances of the @c smart_enums::FragmentSubroutine type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FragmentSubroutine value.
 */
template <typename Enum> friend bool operator!=(Enum value, FragmentSubroutine);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FragmentSubroutineUniform value.
/**
 *  @see @ref oglplus::ProgramInterface "ProgramInterface"
 *
 *  @glsymbols
 *  @gldefref{FRAGMENT_SUBROUTINE_UNIFORM}
 *
 *  @ingroup smart_enums
 */
struct FragmentSubroutineUniform {

/// Conversion to any @p Enum type having the FragmentSubroutineUniform value.
/** Instances of the @ref oglplus::smart_enums::FragmentSubroutineUniform "FragmentSubroutineUniform"
 *  type are convertible to instances of any enumeration type having
 *  the @c FragmentSubroutineUniform value.
 */
template <typename Enum, Enum = Enum::FragmentSubroutineUniform> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FragmentSubroutineUniform value.
/** Instances of the @c smart_enums::FragmentSubroutineUniform type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FragmentSubroutineUniform value.
 */
template <typename Enum> friend bool operator==(Enum value, FragmentSubroutineUniform);

/// Non-equality comparison with any @p Enum type having the FragmentSubroutineUniform value.
/** Instances of the @c smart_enums::FragmentSubroutineUniform type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FragmentSubroutineUniform value.
 */
template <typename Enum> friend bool operator!=(Enum value, FragmentSubroutineUniform);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Framebuffer value.
/**
 *  @see @ref oglplus::MemoryBarrierBit "MemoryBarrierBit"
 *  @see @ref oglplus::ObjectType "ObjectType"
 *
 *  @glsymbols
 *  @gldefref{FRAMEBUFFER}
 *  @gldefref{FRAMEBUFFER_BARRIER_BIT}
 *
 *  @ingroup smart_enums
 */
struct Framebuffer {

/// Conversion to any @p Enum type having the Framebuffer value.
/** Instances of the @ref oglplus::smart_enums::Framebuffer "Framebuffer"
 *  type are convertible to instances of any enumeration type having
 *  the @c Framebuffer value.
 */
template <typename Enum, Enum = Enum::Framebuffer> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Framebuffer value.
/** Instances of the @c smart_enums::Framebuffer type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Framebuffer value.
 */
template <typename Enum> friend bool operator==(Enum value, Framebuffer);

/// Non-equality comparison with any @p Enum type having the Framebuffer value.
/** Instances of the @c smart_enums::Framebuffer type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Framebuffer value.
 */
template <typename Enum> friend bool operator!=(Enum value, Framebuffer);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FramebufferSRGB value.
/**
 *  @see @ref oglplus::Capability "Capability"
 *
 *  @glsymbols
 *  @gldefref{FRAMEBUFFER_SRGB}
 *
 *  @ingroup smart_enums
 */
struct FramebufferSRGB {

/// Conversion to any @p Enum type having the FramebufferSRGB value.
/** Instances of the @ref oglplus::smart_enums::FramebufferSRGB "FramebufferSRGB"
 *  type are convertible to instances of any enumeration type having
 *  the @c FramebufferSRGB value.
 */
template <typename Enum, Enum = Enum::FramebufferSRGB> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FramebufferSRGB value.
/** Instances of the @c smart_enums::FramebufferSRGB type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FramebufferSRGB value.
 */
template <typename Enum> friend bool operator==(Enum value, FramebufferSRGB);

/// Non-equality comparison with any @p Enum type having the FramebufferSRGB value.
/** Instances of the @c smart_enums::FramebufferSRGB type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FramebufferSRGB value.
 */
template <typename Enum> friend bool operator!=(Enum value, FramebufferSRGB);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Front value.
/**
 *  @see @ref oglplus::ColorBuffer "ColorBuffer"
 *  @see @ref oglplus::Face "Face"
 *
 *  @glsymbols
 *  @gldefref{FRONT}
 *
 *  @ingroup smart_enums
 */
struct Front {

/// Conversion to any @p Enum type having the Front value.
/** Instances of the @ref oglplus::smart_enums::Front "Front"
 *  type are convertible to instances of any enumeration type having
 *  the @c Front value.
 */
template <typename Enum, Enum = Enum::Front> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Front value.
/** Instances of the @c smart_enums::Front type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Front value.
 */
template <typename Enum> friend bool operator==(Enum value, Front);

/// Non-equality comparison with any @p Enum type having the Front value.
/** Instances of the @c smart_enums::Front type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Front value.
 */
template <typename Enum> friend bool operator!=(Enum value, Front);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FrontAndBack value.
/**
 *  @see @ref oglplus::ColorBuffer "ColorBuffer"
 *  @see @ref oglplus::Face "Face"
 *
 *  @glsymbols
 *  @gldefref{FRONT_AND_BACK}
 *
 *  @ingroup smart_enums
 */
struct FrontAndBack {

/// Conversion to any @p Enum type having the FrontAndBack value.
/** Instances of the @ref oglplus::smart_enums::FrontAndBack "FrontAndBack"
 *  type are convertible to instances of any enumeration type having
 *  the @c FrontAndBack value.
 */
template <typename Enum, Enum = Enum::FrontAndBack> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FrontAndBack value.
/** Instances of the @c smart_enums::FrontAndBack type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FrontAndBack value.
 */
template <typename Enum> friend bool operator==(Enum value, FrontAndBack);

/// Non-equality comparison with any @p Enum type having the FrontAndBack value.
/** Instances of the @c smart_enums::FrontAndBack type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FrontAndBack value.
 */
template <typename Enum> friend bool operator!=(Enum value, FrontAndBack);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FrontLeft value.
/**
 *  @see @ref oglplus::ColorBuffer "ColorBuffer"
 *
 *  @glsymbols
 *  @gldefref{FRONT_LEFT}
 *
 *  @ingroup smart_enums
 */
struct FrontLeft {

/// Conversion to any @p Enum type having the FrontLeft value.
/** Instances of the @ref oglplus::smart_enums::FrontLeft "FrontLeft"
 *  type are convertible to instances of any enumeration type having
 *  the @c FrontLeft value.
 */
template <typename Enum, Enum = Enum::FrontLeft> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FrontLeft value.
/** Instances of the @c smart_enums::FrontLeft type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FrontLeft value.
 */
template <typename Enum> friend bool operator==(Enum value, FrontLeft);

/// Non-equality comparison with any @p Enum type having the FrontLeft value.
/** Instances of the @c smart_enums::FrontLeft type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FrontLeft value.
 */
template <typename Enum> friend bool operator!=(Enum value, FrontLeft);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c FrontRight value.
/**
 *  @see @ref oglplus::ColorBuffer "ColorBuffer"
 *
 *  @glsymbols
 *  @gldefref{FRONT_RIGHT}
 *
 *  @ingroup smart_enums
 */
struct FrontRight {

/// Conversion to any @p Enum type having the FrontRight value.
/** Instances of the @ref oglplus::smart_enums::FrontRight "FrontRight"
 *  type are convertible to instances of any enumeration type having
 *  the @c FrontRight value.
 */
template <typename Enum, Enum = Enum::FrontRight> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the FrontRight value.
/** Instances of the @c smart_enums::FrontRight type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c FrontRight value.
 */
template <typename Enum> friend bool operator==(Enum value, FrontRight);

/// Non-equality comparison with any @p Enum type having the FrontRight value.
/** Instances of the @c smart_enums::FrontRight type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c FrontRight value.
 */
template <typename Enum> friend bool operator!=(Enum value, FrontRight);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c G value.
/**
 *  @see @ref oglplus::TextureSwizzleCoord "TextureSwizzleCoord"
 *
 *  @glsymbols
 *  @gldefref{TEXTURE_SWIZZLE_G}
 *
 *  @ingroup smart_enums
 */
struct G {

/// Conversion to any @p Enum type having the G value.
/** Instances of the @ref oglplus::smart_enums::G "G"
 *  type are convertible to instances of any enumeration type having
 *  the @c G value.
 */
template <typename Enum, Enum = Enum::G> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the G value.
/** Instances of the @c smart_enums::G type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c G value.
 */
template <typename Enum> friend bool operator==(Enum value, G);

/// Non-equality comparison with any @p Enum type having the G value.
/** Instances of the @c smart_enums::G type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c G value.
 */
template <typename Enum> friend bool operator!=(Enum value, G);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Geometry value.
/**
 *  @see @ref oglplus::ShaderType "ShaderType"
 *
 *  @glsymbols
 *  @gldefref{GEOMETRY_SHADER}
 *
 *  @ingroup smart_enums
 */
struct Geometry {

/// Conversion to any @p Enum type having the Geometry value.
/** Instances of the @ref oglplus::smart_enums::Geometry "Geometry"
 *  type are convertible to instances of any enumeration type having
 *  the @c Geometry value.
 */
template <typename Enum, Enum = Enum::Geometry> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Geometry value.
/** Instances of the @c smart_enums::Geometry type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Geometry value.
 */
template <typename Enum> friend bool operator==(Enum value, Geometry);

/// Non-equality comparison with any @p Enum type having the Geometry value.
/** Instances of the @c smart_enums::Geometry type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Geometry value.
 */
template <typename Enum> friend bool operator!=(Enum value, Geometry);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c GeometryShader value.
/**
 *  @see @ref oglplus::ProgramPipelineStage "ProgramPipelineStage"
 *
 *  @glsymbols
 *  @gldefref{GEOMETRY_SHADER_BIT}
 *
 *  @ingroup smart_enums
 */
struct GeometryShader {

/// Conversion to any @p Enum type having the GeometryShader value.
/** Instances of the @ref oglplus::smart_enums::GeometryShader "GeometryShader"
 *  type are convertible to instances of any enumeration type having
 *  the @c GeometryShader value.
 */
template <typename Enum, Enum = Enum::GeometryShader> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the GeometryShader value.
/** Instances of the @c smart_enums::GeometryShader type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c GeometryShader value.
 */
template <typename Enum> friend bool operator==(Enum value, GeometryShader);

/// Non-equality comparison with any @p Enum type having the GeometryShader value.
/** Instances of the @c smart_enums::GeometryShader type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c GeometryShader value.
 */
template <typename Enum> friend bool operator!=(Enum value, GeometryShader);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c GeometrySubroutine value.
/**
 *  @see @ref oglplus::ProgramInterface "ProgramInterface"
 *
 *  @glsymbols
 *  @gldefref{GEOMETRY_SUBROUTINE}
 *
 *  @ingroup smart_enums
 */
struct GeometrySubroutine {

/// Conversion to any @p Enum type having the GeometrySubroutine value.
/** Instances of the @ref oglplus::smart_enums::GeometrySubroutine "GeometrySubroutine"
 *  type are convertible to instances of any enumeration type having
 *  the @c GeometrySubroutine value.
 */
template <typename Enum, Enum = Enum::GeometrySubroutine> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the GeometrySubroutine value.
/** Instances of the @c smart_enums::GeometrySubroutine type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c GeometrySubroutine value.
 */
template <typename Enum> friend bool operator==(Enum value, GeometrySubroutine);

/// Non-equality comparison with any @p Enum type having the GeometrySubroutine value.
/** Instances of the @c smart_enums::GeometrySubroutine type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c GeometrySubroutine value.
 */
template <typename Enum> friend bool operator!=(Enum value, GeometrySubroutine);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c GeometrySubroutineUniform value.
/**
 *  @see @ref oglplus::ProgramInterface "ProgramInterface"
 *
 *  @glsymbols
 *  @gldefref{GEOMETRY_SUBROUTINE_UNIFORM}
 *
 *  @ingroup smart_enums
 */
struct GeometrySubroutineUniform {

/// Conversion to any @p Enum type having the GeometrySubroutineUniform value.
/** Instances of the @ref oglplus::smart_enums::GeometrySubroutineUniform "GeometrySubroutineUniform"
 *  type are convertible to instances of any enumeration type having
 *  the @c GeometrySubroutineUniform value.
 */
template <typename Enum, Enum = Enum::GeometrySubroutineUniform> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the GeometrySubroutineUniform value.
/** Instances of the @c smart_enums::GeometrySubroutineUniform type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c GeometrySubroutineUniform value.
 */
template <typename Enum> friend bool operator==(Enum value, GeometrySubroutineUniform);

/// Non-equality comparison with any @p Enum type having the GeometrySubroutineUniform value.
/** Instances of the @c smart_enums::GeometrySubroutineUniform type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c GeometrySubroutineUniform value.
 */
template <typename Enum> friend bool operator!=(Enum value, GeometrySubroutineUniform);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c GEqual value.
/**
 *  @see @ref oglplus::CompareFunction "CompareFunction"
 *
 *  @glsymbols
 *  @gldefref{GEQUAL}
 *
 *  @ingroup smart_enums
 */
struct GEqual {

/// Conversion to any @p Enum type having the GEqual value.
/** Instances of the @ref oglplus::smart_enums::GEqual "GEqual"
 *  type are convertible to instances of any enumeration type having
 *  the @c GEqual value.
 */
template <typename Enum, Enum = Enum::GEqual> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the GEqual value.
/** Instances of the @c smart_enums::GEqual type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c GEqual value.
 */
template <typename Enum> friend bool operator==(Enum value, GEqual);

/// Non-equality comparison with any @p Enum type having the GEqual value.
/** Instances of the @c smart_enums::GEqual type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c GEqual value.
 */
template <typename Enum> friend bool operator!=(Enum value, GEqual);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c GlyphHasKerning value.
/**
 *  @see @ref oglplus::PathNVMetricQuery "PathNVMetricQuery"
 *
 *  @glsymbols
 *  @gldefref{GLYPH_HAS_KERNING_BIT_NV}
 *
 *  @ingroup smart_enums
 */
struct GlyphHasKerning {

/// Conversion to any @p Enum type having the GlyphHasKerning value.
/** Instances of the @ref oglplus::smart_enums::GlyphHasKerning "GlyphHasKerning"
 *  type are convertible to instances of any enumeration type having
 *  the @c GlyphHasKerning value.
 */
template <typename Enum, Enum = Enum::GlyphHasKerning> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the GlyphHasKerning value.
/** Instances of the @c smart_enums::GlyphHasKerning type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c GlyphHasKerning value.
 */
template <typename Enum> friend bool operator==(Enum value, GlyphHasKerning);

/// Non-equality comparison with any @p Enum type having the GlyphHasKerning value.
/** Instances of the @c smart_enums::GlyphHasKerning type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c GlyphHasKerning value.
 */
template <typename Enum> friend bool operator!=(Enum value, GlyphHasKerning);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c GlyphHeight value.
/**
 *  @see @ref oglplus::PathNVMetricQuery "PathNVMetricQuery"
 *
 *  @glsymbols
 *  @gldefref{GLYPH_HEIGHT_BIT_NV}
 *
 *  @ingroup smart_enums
 */
struct GlyphHeight {

/// Conversion to any @p Enum type having the GlyphHeight value.
/** Instances of the @ref oglplus::smart_enums::GlyphHeight "GlyphHeight"
 *  type are convertible to instances of any enumeration type having
 *  the @c GlyphHeight value.
 */
template <typename Enum, Enum = Enum::GlyphHeight> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the GlyphHeight value.
/** Instances of the @c smart_enums::GlyphHeight type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c GlyphHeight value.
 */
template <typename Enum> friend bool operator==(Enum value, GlyphHeight);

/// Non-equality comparison with any @p Enum type having the GlyphHeight value.
/** Instances of the @c smart_enums::GlyphHeight type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c GlyphHeight value.
 */
template <typename Enum> friend bool operator!=(Enum value, GlyphHeight);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c GlyphHorizontalBearingAdvance value.
/**
 *  @see @ref oglplus::PathNVMetricQuery "PathNVMetricQuery"
 *
 *  @glsymbols
 *  @gldefref{GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV}
 *
 *  @ingroup smart_enums
 */
struct GlyphHorizontalBearingAdvance {

/// Conversion to any @p Enum type having the GlyphHorizontalBearingAdvance value.
/** Instances of the @ref oglplus::smart_enums::GlyphHorizontalBearingAdvance "GlyphHorizontalBearingAdvance"
 *  type are convertible to instances of any enumeration type having
 *  the @c GlyphHorizontalBearingAdvance value.
 */
template <typename Enum, Enum = Enum::GlyphHorizontalBearingAdvance> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the GlyphHorizontalBearingAdvance value.
/** Instances of the @c smart_enums::GlyphHorizontalBearingAdvance type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c GlyphHorizontalBearingAdvance value.
 */
template <typename Enum> friend bool operator==(Enum value, GlyphHorizontalBearingAdvance);

/// Non-equality comparison with any @p Enum type having the GlyphHorizontalBearingAdvance value.
/** Instances of the @c smart_enums::GlyphHorizontalBearingAdvance type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c GlyphHorizontalBearingAdvance value.
 */
template <typename Enum> friend bool operator!=(Enum value, GlyphHorizontalBearingAdvance);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c GlyphHorizontalBearingX value.
/**
 *  @see @ref oglplus::PathNVMetricQuery "PathNVMetricQuery"
 *
 *  @glsymbols
 *  @gldefref{GLYPH_HORIZONTAL_BEARING_X_BIT_NV}
 *
 *  @ingroup smart_enums
 */
struct GlyphHorizontalBearingX {

/// Conversion to any @p Enum type having the GlyphHorizontalBearingX value.
/** Instances of the @ref oglplus::smart_enums::GlyphHorizontalBearingX "GlyphHorizontalBearingX"
 *  type are convertible to instances of any enumeration type having
 *  the @c GlyphHorizontalBearingX value.
 */
template <typename Enum, Enum = Enum::GlyphHorizontalBearingX> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the GlyphHorizontalBearingX value.
/** Instances of the @c smart_enums::GlyphHorizontalBearingX type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c GlyphHorizontalBearingX value.
 */
template <typename Enum> friend bool operator==(Enum value, GlyphHorizontalBearingX);

/// Non-equality comparison with any @p Enum type having the GlyphHorizontalBearingX value.
/** Instances of the @c smart_enums::GlyphHorizontalBearingX type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c GlyphHorizontalBearingX value.
 */
template <typename Enum> friend bool operator!=(Enum value, GlyphHorizontalBearingX);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c GlyphHorizontalBearingY value.
/**
 *  @see @ref oglplus::PathNVMetricQuery "PathNVMetricQuery"
 *
 *  @glsymbols
 *  @gldefref{GLYPH_HORIZONTAL_BEARING_Y_BIT_NV}
 *
 *  @ingroup smart_enums
 */
struct GlyphHorizontalBearingY {

/// Conversion to any @p Enum type having the GlyphHorizontalBearingY value.
/** Instances of the @ref oglplus::smart_enums::GlyphHorizontalBearingY "GlyphHorizontalBearingY"
 *  type are convertible to instances of any enumeration type having
 *  the @c GlyphHorizontalBearingY value.
 */
template <typename Enum, Enum = Enum::GlyphHorizontalBearingY> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the GlyphHorizontalBearingY value.
/** Instances of the @c smart_enums::GlyphHorizontalBearingY type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c GlyphHorizontalBearingY value.
 */
template <typename Enum> friend bool operator==(Enum value, GlyphHorizontalBearingY);

/// Non-equality comparison with any @p Enum type having the GlyphHorizontalBearingY value.
/** Instances of the @c smart_enums::GlyphHorizontalBearingY type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c GlyphHorizontalBearingY value.
 */
template <typename Enum> friend bool operator!=(Enum value, GlyphHorizontalBearingY);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c GlyphVerticalBearingAdvance value.
/**
 *  @see @ref oglplus::PathNVMetricQuery "PathNVMetricQuery"
 *
 *  @glsymbols
 *  @gldefref{GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV}
 *
 *  @ingroup smart_enums
 */
struct GlyphVerticalBearingAdvance {

/// Conversion to any @p Enum type having the GlyphVerticalBearingAdvance value.
/** Instances of the @ref oglplus::smart_enums::GlyphVerticalBearingAdvance "GlyphVerticalBearingAdvance"
 *  type are convertible to instances of any enumeration type having
 *  the @c GlyphVerticalBearingAdvance value.
 */
template <typename Enum, Enum = Enum::GlyphVerticalBearingAdvance> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the GlyphVerticalBearingAdvance value.
/** Instances of the @c smart_enums::GlyphVerticalBearingAdvance type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c GlyphVerticalBearingAdvance value.
 */
template <typename Enum> friend bool operator==(Enum value, GlyphVerticalBearingAdvance);

/// Non-equality comparison with any @p Enum type having the GlyphVerticalBearingAdvance value.
/** Instances of the @c smart_enums::GlyphVerticalBearingAdvance type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c GlyphVerticalBearingAdvance value.
 */
template <typename Enum> friend bool operator!=(Enum value, GlyphVerticalBearingAdvance);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c GlyphVerticalBearingX value.
/**
 *  @see @ref oglplus::PathNVMetricQuery "PathNVMetricQuery"
 *
 *  @glsymbols
 *  @gldefref{GLYPH_VERTICAL_BEARING_X_BIT_NV}
 *
 *  @ingroup smart_enums
 */
struct GlyphVerticalBearingX {

/// Conversion to any @p Enum type having the GlyphVerticalBearingX value.
/** Instances of the @ref oglplus::smart_enums::GlyphVerticalBearingX "GlyphVerticalBearingX"
 *  type are convertible to instances of any enumeration type having
 *  the @c GlyphVerticalBearingX value.
 */
template <typename Enum, Enum = Enum::GlyphVerticalBearingX> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the GlyphVerticalBearingX value.
/** Instances of the @c smart_enums::GlyphVerticalBearingX type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c GlyphVerticalBearingX value.
 */
template <typename Enum> friend bool operator==(Enum value, GlyphVerticalBearingX);

/// Non-equality comparison with any @p Enum type having the GlyphVerticalBearingX value.
/** Instances of the @c smart_enums::GlyphVerticalBearingX type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c GlyphVerticalBearingX value.
 */
template <typename Enum> friend bool operator!=(Enum value, GlyphVerticalBearingX);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c GlyphVerticalBearingY value.
/**
 *  @see @ref oglplus::PathNVMetricQuery "PathNVMetricQuery"
 *
 *  @glsymbols
 *  @gldefref{GLYPH_VERTICAL_BEARING_Y_BIT_NV}
 *
 *  @ingroup smart_enums
 */
struct GlyphVerticalBearingY {

/// Conversion to any @p Enum type having the GlyphVerticalBearingY value.
/** Instances of the @ref oglplus::smart_enums::GlyphVerticalBearingY "GlyphVerticalBearingY"
 *  type are convertible to instances of any enumeration type having
 *  the @c GlyphVerticalBearingY value.
 */
template <typename Enum, Enum = Enum::GlyphVerticalBearingY> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the GlyphVerticalBearingY value.
/** Instances of the @c smart_enums::GlyphVerticalBearingY type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c GlyphVerticalBearingY value.
 */
template <typename Enum> friend bool operator==(Enum value, GlyphVerticalBearingY);

/// Non-equality comparison with any @p Enum type having the GlyphVerticalBearingY value.
/** Instances of the @c smart_enums::GlyphVerticalBearingY type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c GlyphVerticalBearingY value.
 */
template <typename Enum> friend bool operator!=(Enum value, GlyphVerticalBearingY);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c GlyphWidth value.
/**
 *  @see @ref oglplus::PathNVMetricQuery "PathNVMetricQuery"
 *
 *  @glsymbols
 *  @gldefref{GLYPH_WIDTH_BIT_NV}
 *
 *  @ingroup smart_enums
 */
struct GlyphWidth {

/// Conversion to any @p Enum type having the GlyphWidth value.
/** Instances of the @ref oglplus::smart_enums::GlyphWidth "GlyphWidth"
 *  type are convertible to instances of any enumeration type having
 *  the @c GlyphWidth value.
 */
template <typename Enum, Enum = Enum::GlyphWidth> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the GlyphWidth value.
/** Instances of the @c smart_enums::GlyphWidth type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c GlyphWidth value.
 */
template <typename Enum> friend bool operator==(Enum value, GlyphWidth);

/// Non-equality comparison with any @p Enum type having the GlyphWidth value.
/** Instances of the @c smart_enums::GlyphWidth type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c GlyphWidth value.
 */
template <typename Enum> friend bool operator!=(Enum value, GlyphWidth);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c GPUCommandsComplete value.
/**
 *  @see @ref oglplus::SyncCondition "SyncCondition"
 *
 *  @glsymbols
 *  @gldefref{SYNC_GPU_COMMANDS_COMPLETE}
 *
 *  @ingroup smart_enums
 */
struct GPUCommandsComplete {

/// Conversion to any @p Enum type having the GPUCommandsComplete value.
/** Instances of the @ref oglplus::smart_enums::GPUCommandsComplete "GPUCommandsComplete"
 *  type are convertible to instances of any enumeration type having
 *  the @c GPUCommandsComplete value.
 */
template <typename Enum, Enum = Enum::GPUCommandsComplete> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the GPUCommandsComplete value.
/** Instances of the @c smart_enums::GPUCommandsComplete type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c GPUCommandsComplete value.
 */
template <typename Enum> friend bool operator==(Enum value, GPUCommandsComplete);

/// Non-equality comparison with any @p Enum type having the GPUCommandsComplete value.
/** Instances of the @c smart_enums::GPUCommandsComplete type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c GPUCommandsComplete value.
 */
template <typename Enum> friend bool operator!=(Enum value, GPUCommandsComplete);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Greater value.
/**
 *  @see @ref oglplus::CompareFunction "CompareFunction"
 *
 *  @glsymbols
 *  @gldefref{GREATER}
 *
 *  @ingroup smart_enums
 */
struct Greater {

/// Conversion to any @p Enum type having the Greater value.
/** Instances of the @ref oglplus::smart_enums::Greater "Greater"
 *  type are convertible to instances of any enumeration type having
 *  the @c Greater value.
 */
template <typename Enum, Enum = Enum::Greater> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Greater value.
/** Instances of the @c smart_enums::Greater type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Greater value.
 */
template <typename Enum> friend bool operator==(Enum value, Greater);

/// Non-equality comparison with any @p Enum type having the Greater value.
/** Instances of the @c smart_enums::Greater type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Greater value.
 */
template <typename Enum> friend bool operator!=(Enum value, Greater);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Green value.
/**
 *  @see @ref oglplus::PixelDataFormat "PixelDataFormat"
 *  @see @ref oglplus::TextureSwizzle "TextureSwizzle"
 *
 *  @glsymbols
 *  @gldefref{GREEN}
 *
 *  @ingroup smart_enums
 */
struct Green {

/// Conversion to any @p Enum type having the Green value.
/** Instances of the @ref oglplus::smart_enums::Green "Green"
 *  type are convertible to instances of any enumeration type having
 *  the @c Green value.
 */
template <typename Enum, Enum = Enum::Green> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Green value.
/** Instances of the @c smart_enums::Green type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Green value.
 */
template <typename Enum> friend bool operator==(Enum value, Green);

/// Non-equality comparison with any @p Enum type having the Green value.
/** Instances of the @c smart_enums::Green type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Green value.
 */
template <typename Enum> friend bool operator!=(Enum value, Green);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c GreenInteger value.
/**
 *  @see @ref oglplus::PixelDataFormat "PixelDataFormat"
 *
 *  @glsymbols
 *  @gldefref{GREEN_INTEGER}
 *
 *  @ingroup smart_enums
 */
struct GreenInteger {

/// Conversion to any @p Enum type having the GreenInteger value.
/** Instances of the @ref oglplus::smart_enums::GreenInteger "GreenInteger"
 *  type are convertible to instances of any enumeration type having
 *  the @c GreenInteger value.
 */
template <typename Enum, Enum = Enum::GreenInteger> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the GreenInteger value.
/** Instances of the @c smart_enums::GreenInteger type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c GreenInteger value.
 */
template <typename Enum> friend bool operator==(Enum value, GreenInteger);

/// Non-equality comparison with any @p Enum type having the GreenInteger value.
/** Instances of the @c smart_enums::GreenInteger type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c GreenInteger value.
 */
template <typename Enum> friend bool operator!=(Enum value, GreenInteger);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c GuiltyContextReset value.
/**
 *  @see @ref oglplus::GraphicsResetStatus "GraphicsResetStatus"
 *
 *  @glsymbols
 *  @gldefref{GUILTY_CONTEXT_RESET_ARB}
 *
 *  @ingroup smart_enums
 */
struct GuiltyContextReset {

/// Conversion to any @p Enum type having the GuiltyContextReset value.
/** Instances of the @ref oglplus::smart_enums::GuiltyContextReset "GuiltyContextReset"
 *  type are convertible to instances of any enumeration type having
 *  the @c GuiltyContextReset value.
 */
template <typename Enum, Enum = Enum::GuiltyContextReset> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the GuiltyContextReset value.
/** Instances of the @c smart_enums::GuiltyContextReset type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c GuiltyContextReset value.
 */
template <typename Enum> friend bool operator==(Enum value, GuiltyContextReset);

/// Non-equality comparison with any @p Enum type having the GuiltyContextReset value.
/** Instances of the @c smart_enums::GuiltyContextReset type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c GuiltyContextReset value.
 */
template <typename Enum> friend bool operator!=(Enum value, GuiltyContextReset);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c HalfFloat value.
/**
 *  @see @ref oglplus::DataType "DataType"
 *  @see @ref oglplus::PixelDataType "PixelDataType"
 *
 *  @glsymbols
 *  @gldefref{HALF_FLOAT}
 *
 *  @ingroup smart_enums
 */
struct HalfFloat {

/// Conversion to any @p Enum type having the HalfFloat value.
/** Instances of the @ref oglplus::smart_enums::HalfFloat "HalfFloat"
 *  type are convertible to instances of any enumeration type having
 *  the @c HalfFloat value.
 */
template <typename Enum, Enum = Enum::HalfFloat> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the HalfFloat value.
/** Instances of the @c smart_enums::HalfFloat type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c HalfFloat value.
 */
template <typename Enum> friend bool operator==(Enum value, HalfFloat);

/// Non-equality comparison with any @p Enum type having the HalfFloat value.
/** Instances of the @c smart_enums::HalfFloat type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c HalfFloat value.
 */
template <typename Enum> friend bool operator!=(Enum value, HalfFloat);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c High value.
/**
 *  @see @ref oglplus::DebugOutputARBSeverity "DebugOutputARBSeverity"
 *  @see @ref oglplus::DebugOutputSeverity "DebugOutputSeverity"
 *  @see @ref oglplus::DebugSeverity "DebugSeverity"
 *
 *  @glsymbols
 *  @gldefref{DEBUG_SEVERITY_HIGH}
 *  @gldefref{DEBUG_SEVERITY_HIGH_ARB}
 *
 *  @ingroup smart_enums
 */
struct High {

/// Conversion to any @p Enum type having the High value.
/** Instances of the @ref oglplus::smart_enums::High "High"
 *  type are convertible to instances of any enumeration type having
 *  the @c High value.
 */
template <typename Enum, Enum = Enum::High> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the High value.
/** Instances of the @c smart_enums::High type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c High value.
 */
template <typename Enum> friend bool operator==(Enum value, High);

/// Non-equality comparison with any @p Enum type having the High value.
/** Instances of the @c smart_enums::High type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c High value.
 */
template <typename Enum> friend bool operator!=(Enum value, High);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c HighFloat value.
/**
 *  @see @ref oglplus::PrecisionType "PrecisionType"
 *
 *  @glsymbols
 *  @gldefref{HIGH_FLOAT}
 *
 *  @ingroup smart_enums
 */
struct HighFloat {

/// Conversion to any @p Enum type having the HighFloat value.
/** Instances of the @ref oglplus::smart_enums::HighFloat "HighFloat"
 *  type are convertible to instances of any enumeration type having
 *  the @c HighFloat value.
 */
template <typename Enum, Enum = Enum::HighFloat> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the HighFloat value.
/** Instances of the @c smart_enums::HighFloat type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c HighFloat value.
 */
template <typename Enum> friend bool operator==(Enum value, HighFloat);

/// Non-equality comparison with any @p Enum type having the HighFloat value.
/** Instances of the @c smart_enums::HighFloat type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c HighFloat value.
 */
template <typename Enum> friend bool operator!=(Enum value, HighFloat);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c HighInt value.
/**
 *  @see @ref oglplus::PrecisionType "PrecisionType"
 *
 *  @glsymbols
 *  @gldefref{HIGH_INT}
 *
 *  @ingroup smart_enums
 */
struct HighInt {

/// Conversion to any @p Enum type having the HighInt value.
/** Instances of the @ref oglplus::smart_enums::HighInt "HighInt"
 *  type are convertible to instances of any enumeration type having
 *  the @c HighInt value.
 */
template <typename Enum, Enum = Enum::HighInt> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the HighInt value.
/** Instances of the @c smart_enums::HighInt type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c HighInt value.
 */
template <typename Enum> friend bool operator==(Enum value, HighInt);

/// Non-equality comparison with any @p Enum type having the HighInt value.
/** Instances of the @c smart_enums::HighInt type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c HighInt value.
 */
template <typename Enum> friend bool operator!=(Enum value, HighInt);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Hint value.
/**
 *  @see @ref oglplus::CompatibilityAttributeGroup "CompatibilityAttributeGroup"
 *
 *  @glsymbols
 *  @gldefref{HINT_BIT}
 *
 *  @ingroup smart_enums
 */
struct Hint {

/// Conversion to any @p Enum type having the Hint value.
/** Instances of the @ref oglplus::smart_enums::Hint "Hint"
 *  type are convertible to instances of any enumeration type having
 *  the @c Hint value.
 */
template <typename Enum, Enum = Enum::Hint> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Hint value.
/** Instances of the @c smart_enums::Hint type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Hint value.
 */
template <typename Enum> friend bool operator==(Enum value, Hint);

/// Non-equality comparison with any @p Enum type having the Hint value.
/** Instances of the @c smart_enums::Hint type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Hint value.
 */
template <typename Enum> friend bool operator!=(Enum value, Hint);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c HorizontalLineTo value.
/**
 *  @see @ref oglplus::PathNVCommand "PathNVCommand"
 *
 *  @glsymbols
 *  @gldefref{HORIZONTAL_LINE_TO_NV}
 *
 *  @ingroup smart_enums
 */
struct HorizontalLineTo {

/// Conversion to any @p Enum type having the HorizontalLineTo value.
/** Instances of the @ref oglplus::smart_enums::HorizontalLineTo "HorizontalLineTo"
 *  type are convertible to instances of any enumeration type having
 *  the @c HorizontalLineTo value.
 */
template <typename Enum, Enum = Enum::HorizontalLineTo> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the HorizontalLineTo value.
/** Instances of the @c smart_enums::HorizontalLineTo type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c HorizontalLineTo value.
 */
template <typename Enum> friend bool operator==(Enum value, HorizontalLineTo);

/// Non-equality comparison with any @p Enum type having the HorizontalLineTo value.
/** Instances of the @c smart_enums::HorizontalLineTo type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c HorizontalLineTo value.
 */
template <typename Enum> friend bool operator!=(Enum value, HorizontalLineTo);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Image1D value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{IMAGE_1D}
 *
 *  @ingroup smart_enums
 */
struct Image1D {

/// Conversion to any @p Enum type having the Image1D value.
/** Instances of the @ref oglplus::smart_enums::Image1D "Image1D"
 *  type are convertible to instances of any enumeration type having
 *  the @c Image1D value.
 */
template <typename Enum, Enum = Enum::Image1D> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Image1D value.
/** Instances of the @c smart_enums::Image1D type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Image1D value.
 */
template <typename Enum> friend bool operator==(Enum value, Image1D);

/// Non-equality comparison with any @p Enum type having the Image1D value.
/** Instances of the @c smart_enums::Image1D type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Image1D value.
 */
template <typename Enum> friend bool operator!=(Enum value, Image1D);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Image1DArray value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{IMAGE_1D_ARRAY}
 *
 *  @ingroup smart_enums
 */
struct Image1DArray {

/// Conversion to any @p Enum type having the Image1DArray value.
/** Instances of the @ref oglplus::smart_enums::Image1DArray "Image1DArray"
 *  type are convertible to instances of any enumeration type having
 *  the @c Image1DArray value.
 */
template <typename Enum, Enum = Enum::Image1DArray> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Image1DArray value.
/** Instances of the @c smart_enums::Image1DArray type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Image1DArray value.
 */
template <typename Enum> friend bool operator==(Enum value, Image1DArray);

/// Non-equality comparison with any @p Enum type having the Image1DArray value.
/** Instances of the @c smart_enums::Image1DArray type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Image1DArray value.
 */
template <typename Enum> friend bool operator!=(Enum value, Image1DArray);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Image2D value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{IMAGE_2D}
 *
 *  @ingroup smart_enums
 */
struct Image2D {

/// Conversion to any @p Enum type having the Image2D value.
/** Instances of the @ref oglplus::smart_enums::Image2D "Image2D"
 *  type are convertible to instances of any enumeration type having
 *  the @c Image2D value.
 */
template <typename Enum, Enum = Enum::Image2D> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Image2D value.
/** Instances of the @c smart_enums::Image2D type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Image2D value.
 */
template <typename Enum> friend bool operator==(Enum value, Image2D);

/// Non-equality comparison with any @p Enum type having the Image2D value.
/** Instances of the @c smart_enums::Image2D type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Image2D value.
 */
template <typename Enum> friend bool operator!=(Enum value, Image2D);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Image2DArray value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{IMAGE_2D_ARRAY}
 *
 *  @ingroup smart_enums
 */
struct Image2DArray {

/// Conversion to any @p Enum type having the Image2DArray value.
/** Instances of the @ref oglplus::smart_enums::Image2DArray "Image2DArray"
 *  type are convertible to instances of any enumeration type having
 *  the @c Image2DArray value.
 */
template <typename Enum, Enum = Enum::Image2DArray> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Image2DArray value.
/** Instances of the @c smart_enums::Image2DArray type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Image2DArray value.
 */
template <typename Enum> friend bool operator==(Enum value, Image2DArray);

/// Non-equality comparison with any @p Enum type having the Image2DArray value.
/** Instances of the @c smart_enums::Image2DArray type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Image2DArray value.
 */
template <typename Enum> friend bool operator!=(Enum value, Image2DArray);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Image2DMultisample value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{IMAGE_2D_MULTISAMPLE}
 *
 *  @ingroup smart_enums
 */
struct Image2DMultisample {

/// Conversion to any @p Enum type having the Image2DMultisample value.
/** Instances of the @ref oglplus::smart_enums::Image2DMultisample "Image2DMultisample"
 *  type are convertible to instances of any enumeration type having
 *  the @c Image2DMultisample value.
 */
template <typename Enum, Enum = Enum::Image2DMultisample> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Image2DMultisample value.
/** Instances of the @c smart_enums::Image2DMultisample type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Image2DMultisample value.
 */
template <typename Enum> friend bool operator==(Enum value, Image2DMultisample);

/// Non-equality comparison with any @p Enum type having the Image2DMultisample value.
/** Instances of the @c smart_enums::Image2DMultisample type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Image2DMultisample value.
 */
template <typename Enum> friend bool operator!=(Enum value, Image2DMultisample);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Image2DMultisampleArray value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{IMAGE_2D_MULTISAMPLE_ARRAY}
 *
 *  @ingroup smart_enums
 */
struct Image2DMultisampleArray {

/// Conversion to any @p Enum type having the Image2DMultisampleArray value.
/** Instances of the @ref oglplus::smart_enums::Image2DMultisampleArray "Image2DMultisampleArray"
 *  type are convertible to instances of any enumeration type having
 *  the @c Image2DMultisampleArray value.
 */
template <typename Enum, Enum = Enum::Image2DMultisampleArray> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Image2DMultisampleArray value.
/** Instances of the @c smart_enums::Image2DMultisampleArray type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Image2DMultisampleArray value.
 */
template <typename Enum> friend bool operator==(Enum value, Image2DMultisampleArray);

/// Non-equality comparison with any @p Enum type having the Image2DMultisampleArray value.
/** Instances of the @c smart_enums::Image2DMultisampleArray type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Image2DMultisampleArray value.
 */
template <typename Enum> friend bool operator!=(Enum value, Image2DMultisampleArray);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Image2DRect value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{IMAGE_2D_RECT}
 *
 *  @ingroup smart_enums
 */
struct Image2DRect {

/// Conversion to any @p Enum type having the Image2DRect value.
/** Instances of the @ref oglplus::smart_enums::Image2DRect "Image2DRect"
 *  type are convertible to instances of any enumeration type having
 *  the @c Image2DRect value.
 */
template <typename Enum, Enum = Enum::Image2DRect> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Image2DRect value.
/** Instances of the @c smart_enums::Image2DRect type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Image2DRect value.
 */
template <typename Enum> friend bool operator==(Enum value, Image2DRect);

/// Non-equality comparison with any @p Enum type having the Image2DRect value.
/** Instances of the @c smart_enums::Image2DRect type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Image2DRect value.
 */
template <typename Enum> friend bool operator!=(Enum value, Image2DRect);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Image3D value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{IMAGE_3D}
 *
 *  @ingroup smart_enums
 */
struct Image3D {

/// Conversion to any @p Enum type having the Image3D value.
/** Instances of the @ref oglplus::smart_enums::Image3D "Image3D"
 *  type are convertible to instances of any enumeration type having
 *  the @c Image3D value.
 */
template <typename Enum, Enum = Enum::Image3D> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Image3D value.
/** Instances of the @c smart_enums::Image3D type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Image3D value.
 */
template <typename Enum> friend bool operator==(Enum value, Image3D);

/// Non-equality comparison with any @p Enum type having the Image3D value.
/** Instances of the @c smart_enums::Image3D type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Image3D value.
 */
template <typename Enum> friend bool operator!=(Enum value, Image3D);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ImageBuffer value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{IMAGE_BUFFER}
 *
 *  @ingroup smart_enums
 */
struct ImageBuffer {

/// Conversion to any @p Enum type having the ImageBuffer value.
/** Instances of the @ref oglplus::smart_enums::ImageBuffer "ImageBuffer"
 *  type are convertible to instances of any enumeration type having
 *  the @c ImageBuffer value.
 */
template <typename Enum, Enum = Enum::ImageBuffer> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ImageBuffer value.
/** Instances of the @c smart_enums::ImageBuffer type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ImageBuffer value.
 */
template <typename Enum> friend bool operator==(Enum value, ImageBuffer);

/// Non-equality comparison with any @p Enum type having the ImageBuffer value.
/** Instances of the @c smart_enums::ImageBuffer type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ImageBuffer value.
 */
template <typename Enum> friend bool operator!=(Enum value, ImageBuffer);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ImageCube value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{IMAGE_CUBE}
 *
 *  @ingroup smart_enums
 */
struct ImageCube {

/// Conversion to any @p Enum type having the ImageCube value.
/** Instances of the @ref oglplus::smart_enums::ImageCube "ImageCube"
 *  type are convertible to instances of any enumeration type having
 *  the @c ImageCube value.
 */
template <typename Enum, Enum = Enum::ImageCube> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ImageCube value.
/** Instances of the @c smart_enums::ImageCube type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ImageCube value.
 */
template <typename Enum> friend bool operator==(Enum value, ImageCube);

/// Non-equality comparison with any @p Enum type having the ImageCube value.
/** Instances of the @c smart_enums::ImageCube type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ImageCube value.
 */
template <typename Enum> friend bool operator!=(Enum value, ImageCube);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c IncompleteAttachment value.
/**
 *  @see @ref oglplus::FramebufferStatus "FramebufferStatus"
 *
 *  @glsymbols
 *  @gldefref{FRAMEBUFFER_INCOMPLETE_ATTACHMENT}
 *
 *  @ingroup smart_enums
 */
struct IncompleteAttachment {

/// Conversion to any @p Enum type having the IncompleteAttachment value.
/** Instances of the @ref oglplus::smart_enums::IncompleteAttachment "IncompleteAttachment"
 *  type are convertible to instances of any enumeration type having
 *  the @c IncompleteAttachment value.
 */
template <typename Enum, Enum = Enum::IncompleteAttachment> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the IncompleteAttachment value.
/** Instances of the @c smart_enums::IncompleteAttachment type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c IncompleteAttachment value.
 */
template <typename Enum> friend bool operator==(Enum value, IncompleteAttachment);

/// Non-equality comparison with any @p Enum type having the IncompleteAttachment value.
/** Instances of the @c smart_enums::IncompleteAttachment type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c IncompleteAttachment value.
 */
template <typename Enum> friend bool operator!=(Enum value, IncompleteAttachment);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c IncompleteLayerTargets value.
/**
 *  @see @ref oglplus::FramebufferStatus "FramebufferStatus"
 *
 *  @glsymbols
 *  @gldefref{FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS}
 *
 *  @ingroup smart_enums
 */
struct IncompleteLayerTargets {

/// Conversion to any @p Enum type having the IncompleteLayerTargets value.
/** Instances of the @ref oglplus::smart_enums::IncompleteLayerTargets "IncompleteLayerTargets"
 *  type are convertible to instances of any enumeration type having
 *  the @c IncompleteLayerTargets value.
 */
template <typename Enum, Enum = Enum::IncompleteLayerTargets> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the IncompleteLayerTargets value.
/** Instances of the @c smart_enums::IncompleteLayerTargets type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c IncompleteLayerTargets value.
 */
template <typename Enum> friend bool operator==(Enum value, IncompleteLayerTargets);

/// Non-equality comparison with any @p Enum type having the IncompleteLayerTargets value.
/** Instances of the @c smart_enums::IncompleteLayerTargets type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c IncompleteLayerTargets value.
 */
template <typename Enum> friend bool operator!=(Enum value, IncompleteLayerTargets);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c IncompleteMissingAttachment value.
/**
 *  @see @ref oglplus::FramebufferStatus "FramebufferStatus"
 *
 *  @glsymbols
 *  @gldefref{FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT}
 *
 *  @ingroup smart_enums
 */
struct IncompleteMissingAttachment {

/// Conversion to any @p Enum type having the IncompleteMissingAttachment value.
/** Instances of the @ref oglplus::smart_enums::IncompleteMissingAttachment "IncompleteMissingAttachment"
 *  type are convertible to instances of any enumeration type having
 *  the @c IncompleteMissingAttachment value.
 */
template <typename Enum, Enum = Enum::IncompleteMissingAttachment> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the IncompleteMissingAttachment value.
/** Instances of the @c smart_enums::IncompleteMissingAttachment type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c IncompleteMissingAttachment value.
 */
template <typename Enum> friend bool operator==(Enum value, IncompleteMissingAttachment);

/// Non-equality comparison with any @p Enum type having the IncompleteMissingAttachment value.
/** Instances of the @c smart_enums::IncompleteMissingAttachment type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c IncompleteMissingAttachment value.
 */
template <typename Enum> friend bool operator!=(Enum value, IncompleteMissingAttachment);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c IncompleteMultisample value.
/**
 *  @see @ref oglplus::FramebufferStatus "FramebufferStatus"
 *
 *  @glsymbols
 *  @gldefref{FRAMEBUFFER_INCOMPLETE_MULTISAMPLE}
 *
 *  @ingroup smart_enums
 */
struct IncompleteMultisample {

/// Conversion to any @p Enum type having the IncompleteMultisample value.
/** Instances of the @ref oglplus::smart_enums::IncompleteMultisample "IncompleteMultisample"
 *  type are convertible to instances of any enumeration type having
 *  the @c IncompleteMultisample value.
 */
template <typename Enum, Enum = Enum::IncompleteMultisample> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the IncompleteMultisample value.
/** Instances of the @c smart_enums::IncompleteMultisample type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c IncompleteMultisample value.
 */
template <typename Enum> friend bool operator==(Enum value, IncompleteMultisample);

/// Non-equality comparison with any @p Enum type having the IncompleteMultisample value.
/** Instances of the @c smart_enums::IncompleteMultisample type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c IncompleteMultisample value.
 */
template <typename Enum> friend bool operator!=(Enum value, IncompleteMultisample);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Incr value.
/**
 *  @see @ref oglplus::StencilOperation "StencilOperation"
 *
 *  @glsymbols
 *  @gldefref{INCR}
 *
 *  @ingroup smart_enums
 */
struct Incr {

/// Conversion to any @p Enum type having the Incr value.
/** Instances of the @ref oglplus::smart_enums::Incr "Incr"
 *  type are convertible to instances of any enumeration type having
 *  the @c Incr value.
 */
template <typename Enum, Enum = Enum::Incr> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Incr value.
/** Instances of the @c smart_enums::Incr type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Incr value.
 */
template <typename Enum> friend bool operator==(Enum value, Incr);

/// Non-equality comparison with any @p Enum type having the Incr value.
/** Instances of the @c smart_enums::Incr type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Incr value.
 */
template <typename Enum> friend bool operator!=(Enum value, Incr);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c IncrWrap value.
/**
 *  @see @ref oglplus::StencilOperation "StencilOperation"
 *
 *  @glsymbols
 *  @gldefref{INCR_WRAP}
 *
 *  @ingroup smart_enums
 */
struct IncrWrap {

/// Conversion to any @p Enum type having the IncrWrap value.
/** Instances of the @ref oglplus::smart_enums::IncrWrap "IncrWrap"
 *  type are convertible to instances of any enumeration type having
 *  the @c IncrWrap value.
 */
template <typename Enum, Enum = Enum::IncrWrap> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the IncrWrap value.
/** Instances of the @c smart_enums::IncrWrap type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c IncrWrap value.
 */
template <typename Enum> friend bool operator==(Enum value, IncrWrap);

/// Non-equality comparison with any @p Enum type having the IncrWrap value.
/** Instances of the @c smart_enums::IncrWrap type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c IncrWrap value.
 */
template <typename Enum> friend bool operator!=(Enum value, IncrWrap);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c InnocentContextReset value.
/**
 *  @see @ref oglplus::GraphicsResetStatus "GraphicsResetStatus"
 *
 *  @glsymbols
 *  @gldefref{INNOCENT_CONTEXT_RESET_ARB}
 *
 *  @ingroup smart_enums
 */
struct InnocentContextReset {

/// Conversion to any @p Enum type having the InnocentContextReset value.
/** Instances of the @ref oglplus::smart_enums::InnocentContextReset "InnocentContextReset"
 *  type are convertible to instances of any enumeration type having
 *  the @c InnocentContextReset value.
 */
template <typename Enum, Enum = Enum::InnocentContextReset> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the InnocentContextReset value.
/** Instances of the @c smart_enums::InnocentContextReset type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c InnocentContextReset value.
 */
template <typename Enum> friend bool operator==(Enum value, InnocentContextReset);

/// Non-equality comparison with any @p Enum type having the InnocentContextReset value.
/** Instances of the @c smart_enums::InnocentContextReset type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c InnocentContextReset value.
 */
template <typename Enum> friend bool operator!=(Enum value, InnocentContextReset);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Int value.
/**
 *  @see @ref oglplus::DataType "DataType"
 *  @see @ref oglplus::PixelDataType "PixelDataType"
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{INT}
 *
 *  @ingroup smart_enums
 */
struct Int {

/// Conversion to any @p Enum type having the Int value.
/** Instances of the @ref oglplus::smart_enums::Int "Int"
 *  type are convertible to instances of any enumeration type having
 *  the @c Int value.
 */
template <typename Enum, Enum = Enum::Int> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Int value.
/** Instances of the @c smart_enums::Int type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Int value.
 */
template <typename Enum> friend bool operator==(Enum value, Int);

/// Non-equality comparison with any @p Enum type having the Int value.
/** Instances of the @c smart_enums::Int type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Int value.
 */
template <typename Enum> friend bool operator!=(Enum value, Int);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Intensity value.
/**
 *  @see @ref oglplus::PathNVColorFormat "PathNVColorFormat"
 *
 *  @glsymbols
 *  @gldefref{INTENSITY}
 *
 *  @ingroup smart_enums
 */
struct Intensity {

/// Conversion to any @p Enum type having the Intensity value.
/** Instances of the @ref oglplus::smart_enums::Intensity "Intensity"
 *  type are convertible to instances of any enumeration type having
 *  the @c Intensity value.
 */
template <typename Enum, Enum = Enum::Intensity> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Intensity value.
/** Instances of the @c smart_enums::Intensity type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Intensity value.
 */
template <typename Enum> friend bool operator==(Enum value, Intensity);

/// Non-equality comparison with any @p Enum type having the Intensity value.
/** Instances of the @c smart_enums::Intensity type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Intensity value.
 */
template <typename Enum> friend bool operator!=(Enum value, Intensity);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c InterleavedAttribs value.
/**
 *  @see @ref oglplus::TransformFeedbackMode "TransformFeedbackMode"
 *
 *  @glsymbols
 *  @gldefref{INTERLEAVED_ATTRIBS}
 *
 *  @ingroup smart_enums
 */
struct InterleavedAttribs {

/// Conversion to any @p Enum type having the InterleavedAttribs value.
/** Instances of the @ref oglplus::smart_enums::InterleavedAttribs "InterleavedAttribs"
 *  type are convertible to instances of any enumeration type having
 *  the @c InterleavedAttribs value.
 */
template <typename Enum, Enum = Enum::InterleavedAttribs> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the InterleavedAttribs value.
/** Instances of the @c smart_enums::InterleavedAttribs type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c InterleavedAttribs value.
 */
template <typename Enum> friend bool operator==(Enum value, InterleavedAttribs);

/// Non-equality comparison with any @p Enum type having the InterleavedAttribs value.
/** Instances of the @c smart_enums::InterleavedAttribs type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c InterleavedAttribs value.
 */
template <typename Enum> friend bool operator!=(Enum value, InterleavedAttribs);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c IntImage1D value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{INT_IMAGE_1D}
 *
 *  @ingroup smart_enums
 */
struct IntImage1D {

/// Conversion to any @p Enum type having the IntImage1D value.
/** Instances of the @ref oglplus::smart_enums::IntImage1D "IntImage1D"
 *  type are convertible to instances of any enumeration type having
 *  the @c IntImage1D value.
 */
template <typename Enum, Enum = Enum::IntImage1D> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the IntImage1D value.
/** Instances of the @c smart_enums::IntImage1D type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c IntImage1D value.
 */
template <typename Enum> friend bool operator==(Enum value, IntImage1D);

/// Non-equality comparison with any @p Enum type having the IntImage1D value.
/** Instances of the @c smart_enums::IntImage1D type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c IntImage1D value.
 */
template <typename Enum> friend bool operator!=(Enum value, IntImage1D);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c IntImage1DArray value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{INT_IMAGE_1D_ARRAY}
 *
 *  @ingroup smart_enums
 */
struct IntImage1DArray {

/// Conversion to any @p Enum type having the IntImage1DArray value.
/** Instances of the @ref oglplus::smart_enums::IntImage1DArray "IntImage1DArray"
 *  type are convertible to instances of any enumeration type having
 *  the @c IntImage1DArray value.
 */
template <typename Enum, Enum = Enum::IntImage1DArray> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the IntImage1DArray value.
/** Instances of the @c smart_enums::IntImage1DArray type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c IntImage1DArray value.
 */
template <typename Enum> friend bool operator==(Enum value, IntImage1DArray);

/// Non-equality comparison with any @p Enum type having the IntImage1DArray value.
/** Instances of the @c smart_enums::IntImage1DArray type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c IntImage1DArray value.
 */
template <typename Enum> friend bool operator!=(Enum value, IntImage1DArray);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c IntImage2D value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{INT_IMAGE_2D}
 *
 *  @ingroup smart_enums
 */
struct IntImage2D {

/// Conversion to any @p Enum type having the IntImage2D value.
/** Instances of the @ref oglplus::smart_enums::IntImage2D "IntImage2D"
 *  type are convertible to instances of any enumeration type having
 *  the @c IntImage2D value.
 */
template <typename Enum, Enum = Enum::IntImage2D> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the IntImage2D value.
/** Instances of the @c smart_enums::IntImage2D type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c IntImage2D value.
 */
template <typename Enum> friend bool operator==(Enum value, IntImage2D);

/// Non-equality comparison with any @p Enum type having the IntImage2D value.
/** Instances of the @c smart_enums::IntImage2D type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c IntImage2D value.
 */
template <typename Enum> friend bool operator!=(Enum value, IntImage2D);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c IntImage2DArray value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{INT_IMAGE_2D_ARRAY}
 *
 *  @ingroup smart_enums
 */
struct IntImage2DArray {

/// Conversion to any @p Enum type having the IntImage2DArray value.
/** Instances of the @ref oglplus::smart_enums::IntImage2DArray "IntImage2DArray"
 *  type are convertible to instances of any enumeration type having
 *  the @c IntImage2DArray value.
 */
template <typename Enum, Enum = Enum::IntImage2DArray> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the IntImage2DArray value.
/** Instances of the @c smart_enums::IntImage2DArray type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c IntImage2DArray value.
 */
template <typename Enum> friend bool operator==(Enum value, IntImage2DArray);

/// Non-equality comparison with any @p Enum type having the IntImage2DArray value.
/** Instances of the @c smart_enums::IntImage2DArray type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c IntImage2DArray value.
 */
template <typename Enum> friend bool operator!=(Enum value, IntImage2DArray);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c IntImage2DMultisample value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{INT_IMAGE_2D_MULTISAMPLE}
 *
 *  @ingroup smart_enums
 */
struct IntImage2DMultisample {

/// Conversion to any @p Enum type having the IntImage2DMultisample value.
/** Instances of the @ref oglplus::smart_enums::IntImage2DMultisample "IntImage2DMultisample"
 *  type are convertible to instances of any enumeration type having
 *  the @c IntImage2DMultisample value.
 */
template <typename Enum, Enum = Enum::IntImage2DMultisample> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the IntImage2DMultisample value.
/** Instances of the @c smart_enums::IntImage2DMultisample type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c IntImage2DMultisample value.
 */
template <typename Enum> friend bool operator==(Enum value, IntImage2DMultisample);

/// Non-equality comparison with any @p Enum type having the IntImage2DMultisample value.
/** Instances of the @c smart_enums::IntImage2DMultisample type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c IntImage2DMultisample value.
 */
template <typename Enum> friend bool operator!=(Enum value, IntImage2DMultisample);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c IntImage2DMultisampleArray value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{INT_IMAGE_2D_MULTISAMPLE_ARRAY}
 *
 *  @ingroup smart_enums
 */
struct IntImage2DMultisampleArray {

/// Conversion to any @p Enum type having the IntImage2DMultisampleArray value.
/** Instances of the @ref oglplus::smart_enums::IntImage2DMultisampleArray "IntImage2DMultisampleArray"
 *  type are convertible to instances of any enumeration type having
 *  the @c IntImage2DMultisampleArray value.
 */
template <typename Enum, Enum = Enum::IntImage2DMultisampleArray> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the IntImage2DMultisampleArray value.
/** Instances of the @c smart_enums::IntImage2DMultisampleArray type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c IntImage2DMultisampleArray value.
 */
template <typename Enum> friend bool operator==(Enum value, IntImage2DMultisampleArray);

/// Non-equality comparison with any @p Enum type having the IntImage2DMultisampleArray value.
/** Instances of the @c smart_enums::IntImage2DMultisampleArray type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c IntImage2DMultisampleArray value.
 */
template <typename Enum> friend bool operator!=(Enum value, IntImage2DMultisampleArray);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c IntImage2DRect value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{INT_IMAGE_2D_RECT}
 *
 *  @ingroup smart_enums
 */
struct IntImage2DRect {

/// Conversion to any @p Enum type having the IntImage2DRect value.
/** Instances of the @ref oglplus::smart_enums::IntImage2DRect "IntImage2DRect"
 *  type are convertible to instances of any enumeration type having
 *  the @c IntImage2DRect value.
 */
template <typename Enum, Enum = Enum::IntImage2DRect> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the IntImage2DRect value.
/** Instances of the @c smart_enums::IntImage2DRect type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c IntImage2DRect value.
 */
template <typename Enum> friend bool operator==(Enum value, IntImage2DRect);

/// Non-equality comparison with any @p Enum type having the IntImage2DRect value.
/** Instances of the @c smart_enums::IntImage2DRect type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c IntImage2DRect value.
 */
template <typename Enum> friend bool operator!=(Enum value, IntImage2DRect);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c IntImage3D value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{INT_IMAGE_3D}
 *
 *  @ingroup smart_enums
 */
struct IntImage3D {

/// Conversion to any @p Enum type having the IntImage3D value.
/** Instances of the @ref oglplus::smart_enums::IntImage3D "IntImage3D"
 *  type are convertible to instances of any enumeration type having
 *  the @c IntImage3D value.
 */
template <typename Enum, Enum = Enum::IntImage3D> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the IntImage3D value.
/** Instances of the @c smart_enums::IntImage3D type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c IntImage3D value.
 */
template <typename Enum> friend bool operator==(Enum value, IntImage3D);

/// Non-equality comparison with any @p Enum type having the IntImage3D value.
/** Instances of the @c smart_enums::IntImage3D type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c IntImage3D value.
 */
template <typename Enum> friend bool operator!=(Enum value, IntImage3D);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c IntImageBuffer value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{INT_IMAGE_BUFFER}
 *
 *  @ingroup smart_enums
 */
struct IntImageBuffer {

/// Conversion to any @p Enum type having the IntImageBuffer value.
/** Instances of the @ref oglplus::smart_enums::IntImageBuffer "IntImageBuffer"
 *  type are convertible to instances of any enumeration type having
 *  the @c IntImageBuffer value.
 */
template <typename Enum, Enum = Enum::IntImageBuffer> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the IntImageBuffer value.
/** Instances of the @c smart_enums::IntImageBuffer type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c IntImageBuffer value.
 */
template <typename Enum> friend bool operator==(Enum value, IntImageBuffer);

/// Non-equality comparison with any @p Enum type having the IntImageBuffer value.
/** Instances of the @c smart_enums::IntImageBuffer type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c IntImageBuffer value.
 */
template <typename Enum> friend bool operator!=(Enum value, IntImageBuffer);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c IntImageCube value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{INT_IMAGE_CUBE}
 *
 *  @ingroup smart_enums
 */
struct IntImageCube {

/// Conversion to any @p Enum type having the IntImageCube value.
/** Instances of the @ref oglplus::smart_enums::IntImageCube "IntImageCube"
 *  type are convertible to instances of any enumeration type having
 *  the @c IntImageCube value.
 */
template <typename Enum, Enum = Enum::IntImageCube> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the IntImageCube value.
/** Instances of the @c smart_enums::IntImageCube type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c IntImageCube value.
 */
template <typename Enum> friend bool operator==(Enum value, IntImageCube);

/// Non-equality comparison with any @p Enum type having the IntImageCube value.
/** Instances of the @c smart_enums::IntImageCube type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c IntImageCube value.
 */
template <typename Enum> friend bool operator!=(Enum value, IntImageCube);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c IntSampler1D value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{INT_SAMPLER_1D}
 *
 *  @ingroup smart_enums
 */
struct IntSampler1D {

/// Conversion to any @p Enum type having the IntSampler1D value.
/** Instances of the @ref oglplus::smart_enums::IntSampler1D "IntSampler1D"
 *  type are convertible to instances of any enumeration type having
 *  the @c IntSampler1D value.
 */
template <typename Enum, Enum = Enum::IntSampler1D> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the IntSampler1D value.
/** Instances of the @c smart_enums::IntSampler1D type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c IntSampler1D value.
 */
template <typename Enum> friend bool operator==(Enum value, IntSampler1D);

/// Non-equality comparison with any @p Enum type having the IntSampler1D value.
/** Instances of the @c smart_enums::IntSampler1D type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c IntSampler1D value.
 */
template <typename Enum> friend bool operator!=(Enum value, IntSampler1D);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c IntSampler1DArray value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{INT_SAMPLER_1D_ARRAY}
 *
 *  @ingroup smart_enums
 */
struct IntSampler1DArray {

/// Conversion to any @p Enum type having the IntSampler1DArray value.
/** Instances of the @ref oglplus::smart_enums::IntSampler1DArray "IntSampler1DArray"
 *  type are convertible to instances of any enumeration type having
 *  the @c IntSampler1DArray value.
 */
template <typename Enum, Enum = Enum::IntSampler1DArray> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the IntSampler1DArray value.
/** Instances of the @c smart_enums::IntSampler1DArray type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c IntSampler1DArray value.
 */
template <typename Enum> friend bool operator==(Enum value, IntSampler1DArray);

/// Non-equality comparison with any @p Enum type having the IntSampler1DArray value.
/** Instances of the @c smart_enums::IntSampler1DArray type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c IntSampler1DArray value.
 */
template <typename Enum> friend bool operator!=(Enum value, IntSampler1DArray);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c IntSampler2D value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{INT_SAMPLER_2D}
 *
 *  @ingroup smart_enums
 */
struct IntSampler2D {

/// Conversion to any @p Enum type having the IntSampler2D value.
/** Instances of the @ref oglplus::smart_enums::IntSampler2D "IntSampler2D"
 *  type are convertible to instances of any enumeration type having
 *  the @c IntSampler2D value.
 */
template <typename Enum, Enum = Enum::IntSampler2D> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the IntSampler2D value.
/** Instances of the @c smart_enums::IntSampler2D type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c IntSampler2D value.
 */
template <typename Enum> friend bool operator==(Enum value, IntSampler2D);

/// Non-equality comparison with any @p Enum type having the IntSampler2D value.
/** Instances of the @c smart_enums::IntSampler2D type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c IntSampler2D value.
 */
template <typename Enum> friend bool operator!=(Enum value, IntSampler2D);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c IntSampler2DArray value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{INT_SAMPLER_2D_ARRAY}
 *
 *  @ingroup smart_enums
 */
struct IntSampler2DArray {

/// Conversion to any @p Enum type having the IntSampler2DArray value.
/** Instances of the @ref oglplus::smart_enums::IntSampler2DArray "IntSampler2DArray"
 *  type are convertible to instances of any enumeration type having
 *  the @c IntSampler2DArray value.
 */
template <typename Enum, Enum = Enum::IntSampler2DArray> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the IntSampler2DArray value.
/** Instances of the @c smart_enums::IntSampler2DArray type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c IntSampler2DArray value.
 */
template <typename Enum> friend bool operator==(Enum value, IntSampler2DArray);

/// Non-equality comparison with any @p Enum type having the IntSampler2DArray value.
/** Instances of the @c smart_enums::IntSampler2DArray type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c IntSampler2DArray value.
 */
template <typename Enum> friend bool operator!=(Enum value, IntSampler2DArray);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c IntSampler2DMultisample value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{INT_SAMPLER_2D_MULTISAMPLE}
 *
 *  @ingroup smart_enums
 */
struct IntSampler2DMultisample {

/// Conversion to any @p Enum type having the IntSampler2DMultisample value.
/** Instances of the @ref oglplus::smart_enums::IntSampler2DMultisample "IntSampler2DMultisample"
 *  type are convertible to instances of any enumeration type having
 *  the @c IntSampler2DMultisample value.
 */
template <typename Enum, Enum = Enum::IntSampler2DMultisample> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the IntSampler2DMultisample value.
/** Instances of the @c smart_enums::IntSampler2DMultisample type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c IntSampler2DMultisample value.
 */
template <typename Enum> friend bool operator==(Enum value, IntSampler2DMultisample);

/// Non-equality comparison with any @p Enum type having the IntSampler2DMultisample value.
/** Instances of the @c smart_enums::IntSampler2DMultisample type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c IntSampler2DMultisample value.
 */
template <typename Enum> friend bool operator!=(Enum value, IntSampler2DMultisample);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c IntSampler2DMultisampleArray value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{INT_SAMPLER_2D_MULTISAMPLE_ARRAY}
 *
 *  @ingroup smart_enums
 */
struct IntSampler2DMultisampleArray {

/// Conversion to any @p Enum type having the IntSampler2DMultisampleArray value.
/** Instances of the @ref oglplus::smart_enums::IntSampler2DMultisampleArray "IntSampler2DMultisampleArray"
 *  type are convertible to instances of any enumeration type having
 *  the @c IntSampler2DMultisampleArray value.
 */
template <typename Enum, Enum = Enum::IntSampler2DMultisampleArray> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the IntSampler2DMultisampleArray value.
/** Instances of the @c smart_enums::IntSampler2DMultisampleArray type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c IntSampler2DMultisampleArray value.
 */
template <typename Enum> friend bool operator==(Enum value, IntSampler2DMultisampleArray);

/// Non-equality comparison with any @p Enum type having the IntSampler2DMultisampleArray value.
/** Instances of the @c smart_enums::IntSampler2DMultisampleArray type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c IntSampler2DMultisampleArray value.
 */
template <typename Enum> friend bool operator!=(Enum value, IntSampler2DMultisampleArray);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c IntSampler2DRect value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{INT_SAMPLER_2D_RECT}
 *
 *  @ingroup smart_enums
 */
struct IntSampler2DRect {

/// Conversion to any @p Enum type having the IntSampler2DRect value.
/** Instances of the @ref oglplus::smart_enums::IntSampler2DRect "IntSampler2DRect"
 *  type are convertible to instances of any enumeration type having
 *  the @c IntSampler2DRect value.
 */
template <typename Enum, Enum = Enum::IntSampler2DRect> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the IntSampler2DRect value.
/** Instances of the @c smart_enums::IntSampler2DRect type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c IntSampler2DRect value.
 */
template <typename Enum> friend bool operator==(Enum value, IntSampler2DRect);

/// Non-equality comparison with any @p Enum type having the IntSampler2DRect value.
/** Instances of the @c smart_enums::IntSampler2DRect type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c IntSampler2DRect value.
 */
template <typename Enum> friend bool operator!=(Enum value, IntSampler2DRect);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c IntSampler3D value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{INT_SAMPLER_3D}
 *
 *  @ingroup smart_enums
 */
struct IntSampler3D {

/// Conversion to any @p Enum type having the IntSampler3D value.
/** Instances of the @ref oglplus::smart_enums::IntSampler3D "IntSampler3D"
 *  type are convertible to instances of any enumeration type having
 *  the @c IntSampler3D value.
 */
template <typename Enum, Enum = Enum::IntSampler3D> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the IntSampler3D value.
/** Instances of the @c smart_enums::IntSampler3D type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c IntSampler3D value.
 */
template <typename Enum> friend bool operator==(Enum value, IntSampler3D);

/// Non-equality comparison with any @p Enum type having the IntSampler3D value.
/** Instances of the @c smart_enums::IntSampler3D type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c IntSampler3D value.
 */
template <typename Enum> friend bool operator!=(Enum value, IntSampler3D);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c IntSamplerBuffer value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{INT_SAMPLER_BUFFER}
 *
 *  @ingroup smart_enums
 */
struct IntSamplerBuffer {

/// Conversion to any @p Enum type having the IntSamplerBuffer value.
/** Instances of the @ref oglplus::smart_enums::IntSamplerBuffer "IntSamplerBuffer"
 *  type are convertible to instances of any enumeration type having
 *  the @c IntSamplerBuffer value.
 */
template <typename Enum, Enum = Enum::IntSamplerBuffer> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the IntSamplerBuffer value.
/** Instances of the @c smart_enums::IntSamplerBuffer type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c IntSamplerBuffer value.
 */
template <typename Enum> friend bool operator==(Enum value, IntSamplerBuffer);

/// Non-equality comparison with any @p Enum type having the IntSamplerBuffer value.
/** Instances of the @c smart_enums::IntSamplerBuffer type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c IntSamplerBuffer value.
 */
template <typename Enum> friend bool operator!=(Enum value, IntSamplerBuffer);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c IntSamplerCube value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{INT_SAMPLER_CUBE}
 *
 *  @ingroup smart_enums
 */
struct IntSamplerCube {

/// Conversion to any @p Enum type having the IntSamplerCube value.
/** Instances of the @ref oglplus::smart_enums::IntSamplerCube "IntSamplerCube"
 *  type are convertible to instances of any enumeration type having
 *  the @c IntSamplerCube value.
 */
template <typename Enum, Enum = Enum::IntSamplerCube> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the IntSamplerCube value.
/** Instances of the @c smart_enums::IntSamplerCube type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c IntSamplerCube value.
 */
template <typename Enum> friend bool operator==(Enum value, IntSamplerCube);

/// Non-equality comparison with any @p Enum type having the IntSamplerCube value.
/** Instances of the @c smart_enums::IntSamplerCube type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c IntSamplerCube value.
 */
template <typename Enum> friend bool operator!=(Enum value, IntSamplerCube);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c IntSamplerCubeMapArray value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{INT_SAMPLER_CUBE_MAP_ARRAY}
 *
 *  @ingroup smart_enums
 */
struct IntSamplerCubeMapArray {

/// Conversion to any @p Enum type having the IntSamplerCubeMapArray value.
/** Instances of the @ref oglplus::smart_enums::IntSamplerCubeMapArray "IntSamplerCubeMapArray"
 *  type are convertible to instances of any enumeration type having
 *  the @c IntSamplerCubeMapArray value.
 */
template <typename Enum, Enum = Enum::IntSamplerCubeMapArray> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the IntSamplerCubeMapArray value.
/** Instances of the @c smart_enums::IntSamplerCubeMapArray type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c IntSamplerCubeMapArray value.
 */
template <typename Enum> friend bool operator==(Enum value, IntSamplerCubeMapArray);

/// Non-equality comparison with any @p Enum type having the IntSamplerCubeMapArray value.
/** Instances of the @c smart_enums::IntSamplerCubeMapArray type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c IntSamplerCubeMapArray value.
 */
template <typename Enum> friend bool operator!=(Enum value, IntSamplerCubeMapArray);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c IntVec2 value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{INT_VEC2}
 *
 *  @ingroup smart_enums
 */
struct IntVec2 {

/// Conversion to any @p Enum type having the IntVec2 value.
/** Instances of the @ref oglplus::smart_enums::IntVec2 "IntVec2"
 *  type are convertible to instances of any enumeration type having
 *  the @c IntVec2 value.
 */
template <typename Enum, Enum = Enum::IntVec2> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the IntVec2 value.
/** Instances of the @c smart_enums::IntVec2 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c IntVec2 value.
 */
template <typename Enum> friend bool operator==(Enum value, IntVec2);

/// Non-equality comparison with any @p Enum type having the IntVec2 value.
/** Instances of the @c smart_enums::IntVec2 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c IntVec2 value.
 */
template <typename Enum> friend bool operator!=(Enum value, IntVec2);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c IntVec3 value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{INT_VEC3}
 *
 *  @ingroup smart_enums
 */
struct IntVec3 {

/// Conversion to any @p Enum type having the IntVec3 value.
/** Instances of the @ref oglplus::smart_enums::IntVec3 "IntVec3"
 *  type are convertible to instances of any enumeration type having
 *  the @c IntVec3 value.
 */
template <typename Enum, Enum = Enum::IntVec3> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the IntVec3 value.
/** Instances of the @c smart_enums::IntVec3 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c IntVec3 value.
 */
template <typename Enum> friend bool operator==(Enum value, IntVec3);

/// Non-equality comparison with any @p Enum type having the IntVec3 value.
/** Instances of the @c smart_enums::IntVec3 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c IntVec3 value.
 */
template <typename Enum> friend bool operator!=(Enum value, IntVec3);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c IntVec4 value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{INT_VEC4}
 *
 *  @ingroup smart_enums
 */
struct IntVec4 {

/// Conversion to any @p Enum type having the IntVec4 value.
/** Instances of the @ref oglplus::smart_enums::IntVec4 "IntVec4"
 *  type are convertible to instances of any enumeration type having
 *  the @c IntVec4 value.
 */
template <typename Enum, Enum = Enum::IntVec4> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the IntVec4 value.
/** Instances of the @c smart_enums::IntVec4 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c IntVec4 value.
 */
template <typename Enum> friend bool operator==(Enum value, IntVec4);

/// Non-equality comparison with any @p Enum type having the IntVec4 value.
/** Instances of the @c smart_enums::IntVec4 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c IntVec4 value.
 */
template <typename Enum> friend bool operator!=(Enum value, IntVec4);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c InvalidateBuffer value.
/**
 *  @see @ref oglplus::BufferMapAccess "BufferMapAccess"
 *
 *  @glsymbols
 *  @gldefref{MAP_INVALIDATE_BUFFER_BIT}
 *
 *  @ingroup smart_enums
 */
struct InvalidateBuffer {

/// Conversion to any @p Enum type having the InvalidateBuffer value.
/** Instances of the @ref oglplus::smart_enums::InvalidateBuffer "InvalidateBuffer"
 *  type are convertible to instances of any enumeration type having
 *  the @c InvalidateBuffer value.
 */
template <typename Enum, Enum = Enum::InvalidateBuffer> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the InvalidateBuffer value.
/** Instances of the @c smart_enums::InvalidateBuffer type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c InvalidateBuffer value.
 */
template <typename Enum> friend bool operator==(Enum value, InvalidateBuffer);

/// Non-equality comparison with any @p Enum type having the InvalidateBuffer value.
/** Instances of the @c smart_enums::InvalidateBuffer type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c InvalidateBuffer value.
 */
template <typename Enum> friend bool operator!=(Enum value, InvalidateBuffer);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c InvalidateRange value.
/**
 *  @see @ref oglplus::BufferMapAccess "BufferMapAccess"
 *
 *  @glsymbols
 *  @gldefref{MAP_INVALIDATE_RANGE_BIT}
 *
 *  @ingroup smart_enums
 */
struct InvalidateRange {

/// Conversion to any @p Enum type having the InvalidateRange value.
/** Instances of the @ref oglplus::smart_enums::InvalidateRange "InvalidateRange"
 *  type are convertible to instances of any enumeration type having
 *  the @c InvalidateRange value.
 */
template <typename Enum, Enum = Enum::InvalidateRange> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the InvalidateRange value.
/** Instances of the @c smart_enums::InvalidateRange type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c InvalidateRange value.
 */
template <typename Enum> friend bool operator==(Enum value, InvalidateRange);

/// Non-equality comparison with any @p Enum type having the InvalidateRange value.
/** Instances of the @c smart_enums::InvalidateRange type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c InvalidateRange value.
 */
template <typename Enum> friend bool operator!=(Enum value, InvalidateRange);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c InvalidEnum value.
/**
 *  @see @ref oglplus::ErrorCode "ErrorCode"
 *
 *  @glsymbols
 *  @gldefref{INVALID_ENUM}
 *
 *  @ingroup smart_enums
 */
struct InvalidEnum {

/// Conversion to any @p Enum type having the InvalidEnum value.
/** Instances of the @ref oglplus::smart_enums::InvalidEnum "InvalidEnum"
 *  type are convertible to instances of any enumeration type having
 *  the @c InvalidEnum value.
 */
template <typename Enum, Enum = Enum::InvalidEnum> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the InvalidEnum value.
/** Instances of the @c smart_enums::InvalidEnum type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c InvalidEnum value.
 */
template <typename Enum> friend bool operator==(Enum value, InvalidEnum);

/// Non-equality comparison with any @p Enum type having the InvalidEnum value.
/** Instances of the @c smart_enums::InvalidEnum type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c InvalidEnum value.
 */
template <typename Enum> friend bool operator!=(Enum value, InvalidEnum);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c InvalidFramebufferOperation value.
/**
 *  @see @ref oglplus::ErrorCode "ErrorCode"
 *
 *  @glsymbols
 *  @gldefref{INVALID_FRAMEBUFFER_OPERATION}
 *
 *  @ingroup smart_enums
 */
struct InvalidFramebufferOperation {

/// Conversion to any @p Enum type having the InvalidFramebufferOperation value.
/** Instances of the @ref oglplus::smart_enums::InvalidFramebufferOperation "InvalidFramebufferOperation"
 *  type are convertible to instances of any enumeration type having
 *  the @c InvalidFramebufferOperation value.
 */
template <typename Enum, Enum = Enum::InvalidFramebufferOperation> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the InvalidFramebufferOperation value.
/** Instances of the @c smart_enums::InvalidFramebufferOperation type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c InvalidFramebufferOperation value.
 */
template <typename Enum> friend bool operator==(Enum value, InvalidFramebufferOperation);

/// Non-equality comparison with any @p Enum type having the InvalidFramebufferOperation value.
/** Instances of the @c smart_enums::InvalidFramebufferOperation type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c InvalidFramebufferOperation value.
 */
template <typename Enum> friend bool operator!=(Enum value, InvalidFramebufferOperation);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c InvalidOperation value.
/**
 *  @see @ref oglplus::ErrorCode "ErrorCode"
 *
 *  @glsymbols
 *  @gldefref{INVALID_OPERATION}
 *
 *  @ingroup smart_enums
 */
struct InvalidOperation {

/// Conversion to any @p Enum type having the InvalidOperation value.
/** Instances of the @ref oglplus::smart_enums::InvalidOperation "InvalidOperation"
 *  type are convertible to instances of any enumeration type having
 *  the @c InvalidOperation value.
 */
template <typename Enum, Enum = Enum::InvalidOperation> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the InvalidOperation value.
/** Instances of the @c smart_enums::InvalidOperation type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c InvalidOperation value.
 */
template <typename Enum> friend bool operator==(Enum value, InvalidOperation);

/// Non-equality comparison with any @p Enum type having the InvalidOperation value.
/** Instances of the @c smart_enums::InvalidOperation type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c InvalidOperation value.
 */
template <typename Enum> friend bool operator!=(Enum value, InvalidOperation);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c InvalidValue value.
/**
 *  @see @ref oglplus::ErrorCode "ErrorCode"
 *
 *  @glsymbols
 *  @gldefref{INVALID_VALUE}
 *
 *  @ingroup smart_enums
 */
struct InvalidValue {

/// Conversion to any @p Enum type having the InvalidValue value.
/** Instances of the @ref oglplus::smart_enums::InvalidValue "InvalidValue"
 *  type are convertible to instances of any enumeration type having
 *  the @c InvalidValue value.
 */
template <typename Enum, Enum = Enum::InvalidValue> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the InvalidValue value.
/** Instances of the @c smart_enums::InvalidValue type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c InvalidValue value.
 */
template <typename Enum> friend bool operator==(Enum value, InvalidValue);

/// Non-equality comparison with any @p Enum type having the InvalidValue value.
/** Instances of the @c smart_enums::InvalidValue type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c InvalidValue value.
 */
template <typename Enum> friend bool operator!=(Enum value, InvalidValue);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Invert value.
/**
 *  @see @ref oglplus::ColorLogicOperation "ColorLogicOperation"
 *  @see @ref oglplus::PathNVFillMode "PathNVFillMode"
 *  @see @ref oglplus::StencilOperation "StencilOperation"
 *
 *  @glsymbols
 *  @gldefref{INVERT}
 *
 *  @ingroup smart_enums
 */
struct Invert {

/// Conversion to any @p Enum type having the Invert value.
/** Instances of the @ref oglplus::smart_enums::Invert "Invert"
 *  type are convertible to instances of any enumeration type having
 *  the @c Invert value.
 */
template <typename Enum, Enum = Enum::Invert> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Invert value.
/** Instances of the @c smart_enums::Invert type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Invert value.
 */
template <typename Enum> friend bool operator==(Enum value, Invert);

/// Non-equality comparison with any @p Enum type having the Invert value.
/** Instances of the @c smart_enums::Invert type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Invert value.
 */
template <typename Enum> friend bool operator!=(Enum value, Invert);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Isolines value.
/**
 *  @see @ref oglplus::TessGenPrimitiveType "TessGenPrimitiveType"
 *
 *  @glsymbols
 *  @gldefref{ISOLINES}
 *
 *  @ingroup smart_enums
 */
struct Isolines {

/// Conversion to any @p Enum type having the Isolines value.
/** Instances of the @ref oglplus::smart_enums::Isolines "Isolines"
 *  type are convertible to instances of any enumeration type having
 *  the @c Isolines value.
 */
template <typename Enum, Enum = Enum::Isolines> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Isolines value.
/** Instances of the @c smart_enums::Isolines type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Isolines value.
 */
template <typename Enum> friend bool operator==(Enum value, Isolines);

/// Non-equality comparison with any @p Enum type having the Isolines value.
/** Instances of the @c smart_enums::Isolines type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Isolines value.
 */
template <typename Enum> friend bool operator!=(Enum value, Isolines);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c IsPerPatch value.
/**
 *  @see @ref oglplus::ProgramResourceProperty "ProgramResourceProperty"
 *
 *  @glsymbols
 *  @gldefref{IS_PER_PATCH}
 *
 *  @ingroup smart_enums
 */
struct IsPerPatch {

/// Conversion to any @p Enum type having the IsPerPatch value.
/** Instances of the @ref oglplus::smart_enums::IsPerPatch "IsPerPatch"
 *  type are convertible to instances of any enumeration type having
 *  the @c IsPerPatch value.
 */
template <typename Enum, Enum = Enum::IsPerPatch> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the IsPerPatch value.
/** Instances of the @c smart_enums::IsPerPatch type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c IsPerPatch value.
 */
template <typename Enum> friend bool operator==(Enum value, IsPerPatch);

/// Non-equality comparison with any @p Enum type having the IsPerPatch value.
/** Instances of the @c smart_enums::IsPerPatch type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c IsPerPatch value.
 */
template <typename Enum> friend bool operator!=(Enum value, IsPerPatch);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c IsRowMajor value.
/**
 *  @see @ref oglplus::ProgramResourceProperty "ProgramResourceProperty"
 *
 *  @glsymbols
 *  @gldefref{IS_ROW_MAJOR}
 *
 *  @ingroup smart_enums
 */
struct IsRowMajor {

/// Conversion to any @p Enum type having the IsRowMajor value.
/** Instances of the @ref oglplus::smart_enums::IsRowMajor "IsRowMajor"
 *  type are convertible to instances of any enumeration type having
 *  the @c IsRowMajor value.
 */
template <typename Enum, Enum = Enum::IsRowMajor> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the IsRowMajor value.
/** Instances of the @c smart_enums::IsRowMajor type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c IsRowMajor value.
 */
template <typename Enum> friend bool operator==(Enum value, IsRowMajor);

/// Non-equality comparison with any @p Enum type having the IsRowMajor value.
/** Instances of the @c smart_enums::IsRowMajor type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c IsRowMajor value.
 */
template <typename Enum> friend bool operator!=(Enum value, IsRowMajor);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Italic value.
/**
 *  @see @ref oglplus::PathNVFontStyle "PathNVFontStyle"
 *
 *  @glsymbols
 *  @gldefref{ITALIC_BIT_NV}
 *
 *  @ingroup smart_enums
 */
struct Italic {

/// Conversion to any @p Enum type having the Italic value.
/** Instances of the @ref oglplus::smart_enums::Italic "Italic"
 *  type are convertible to instances of any enumeration type having
 *  the @c Italic value.
 */
template <typename Enum, Enum = Enum::Italic> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Italic value.
/** Instances of the @c smart_enums::Italic type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Italic value.
 */
template <typename Enum> friend bool operator==(Enum value, Italic);

/// Non-equality comparison with any @p Enum type having the Italic value.
/** Instances of the @c smart_enums::Italic type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Italic value.
 */
template <typename Enum> friend bool operator!=(Enum value, Italic);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Keep value.
/**
 *  @see @ref oglplus::StencilOperation "StencilOperation"
 *
 *  @glsymbols
 *  @gldefref{KEEP}
 *
 *  @ingroup smart_enums
 */
struct Keep {

/// Conversion to any @p Enum type having the Keep value.
/** Instances of the @ref oglplus::smart_enums::Keep "Keep"
 *  type are convertible to instances of any enumeration type having
 *  the @c Keep value.
 */
template <typename Enum, Enum = Enum::Keep> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Keep value.
/** Instances of the @c smart_enums::Keep type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Keep value.
 */
template <typename Enum> friend bool operator==(Enum value, Keep);

/// Non-equality comparison with any @p Enum type having the Keep value.
/** Instances of the @c smart_enums::Keep type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Keep value.
 */
template <typename Enum> friend bool operator!=(Enum value, Keep);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c LargeCCWArcTo value.
/**
 *  @see @ref oglplus::PathNVCommand "PathNVCommand"
 *
 *  @glsymbols
 *  @gldefref{LARGE_CCW_ARC_TO_NV}
 *
 *  @ingroup smart_enums
 */
struct LargeCCWArcTo {

/// Conversion to any @p Enum type having the LargeCCWArcTo value.
/** Instances of the @ref oglplus::smart_enums::LargeCCWArcTo "LargeCCWArcTo"
 *  type are convertible to instances of any enumeration type having
 *  the @c LargeCCWArcTo value.
 */
template <typename Enum, Enum = Enum::LargeCCWArcTo> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the LargeCCWArcTo value.
/** Instances of the @c smart_enums::LargeCCWArcTo type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c LargeCCWArcTo value.
 */
template <typename Enum> friend bool operator==(Enum value, LargeCCWArcTo);

/// Non-equality comparison with any @p Enum type having the LargeCCWArcTo value.
/** Instances of the @c smart_enums::LargeCCWArcTo type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c LargeCCWArcTo value.
 */
template <typename Enum> friend bool operator!=(Enum value, LargeCCWArcTo);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c LargeCWArcTo value.
/**
 *  @see @ref oglplus::PathNVCommand "PathNVCommand"
 *
 *  @glsymbols
 *  @gldefref{LARGE_CW_ARC_TO_NV}
 *
 *  @ingroup smart_enums
 */
struct LargeCWArcTo {

/// Conversion to any @p Enum type having the LargeCWArcTo value.
/** Instances of the @ref oglplus::smart_enums::LargeCWArcTo "LargeCWArcTo"
 *  type are convertible to instances of any enumeration type having
 *  the @c LargeCWArcTo value.
 */
template <typename Enum, Enum = Enum::LargeCWArcTo> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the LargeCWArcTo value.
/** Instances of the @c smart_enums::LargeCWArcTo type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c LargeCWArcTo value.
 */
template <typename Enum> friend bool operator==(Enum value, LargeCWArcTo);

/// Non-equality comparison with any @p Enum type having the LargeCWArcTo value.
/** Instances of the @c smart_enums::LargeCWArcTo type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c LargeCWArcTo value.
 */
template <typename Enum> friend bool operator!=(Enum value, LargeCWArcTo);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c LastVertexConvention value.
/**
 *  @see @ref oglplus::ProvokeMode "ProvokeMode"
 *
 *  @glsymbols
 *  @gldefref{LAST_VERTEX_CONVENTION}
 *
 *  @ingroup smart_enums
 */
struct LastVertexConvention {

/// Conversion to any @p Enum type having the LastVertexConvention value.
/** Instances of the @ref oglplus::smart_enums::LastVertexConvention "LastVertexConvention"
 *  type are convertible to instances of any enumeration type having
 *  the @c LastVertexConvention value.
 */
template <typename Enum, Enum = Enum::LastVertexConvention> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the LastVertexConvention value.
/** Instances of the @c smart_enums::LastVertexConvention type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c LastVertexConvention value.
 */
template <typename Enum> friend bool operator==(Enum value, LastVertexConvention);

/// Non-equality comparison with any @p Enum type having the LastVertexConvention value.
/** Instances of the @c smart_enums::LastVertexConvention type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c LastVertexConvention value.
 */
template <typename Enum> friend bool operator!=(Enum value, LastVertexConvention);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Left value.
/**
 *  @see @ref oglplus::ColorBuffer "ColorBuffer"
 *
 *  @glsymbols
 *  @gldefref{LEFT}
 *
 *  @ingroup smart_enums
 */
struct Left {

/// Conversion to any @p Enum type having the Left value.
/** Instances of the @ref oglplus::smart_enums::Left "Left"
 *  type are convertible to instances of any enumeration type having
 *  the @c Left value.
 */
template <typename Enum, Enum = Enum::Left> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Left value.
/** Instances of the @c smart_enums::Left type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Left value.
 */
template <typename Enum> friend bool operator==(Enum value, Left);

/// Non-equality comparison with any @p Enum type having the Left value.
/** Instances of the @c smart_enums::Left type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Left value.
 */
template <typename Enum> friend bool operator!=(Enum value, Left);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c LEqual value.
/**
 *  @see @ref oglplus::CompareFunction "CompareFunction"
 *
 *  @glsymbols
 *  @gldefref{LEQUAL}
 *
 *  @ingroup smart_enums
 */
struct LEqual {

/// Conversion to any @p Enum type having the LEqual value.
/** Instances of the @ref oglplus::smart_enums::LEqual "LEqual"
 *  type are convertible to instances of any enumeration type having
 *  the @c LEqual value.
 */
template <typename Enum, Enum = Enum::LEqual> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the LEqual value.
/** Instances of the @c smart_enums::LEqual type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c LEqual value.
 */
template <typename Enum> friend bool operator==(Enum value, LEqual);

/// Non-equality comparison with any @p Enum type having the LEqual value.
/** Instances of the @c smart_enums::LEqual type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c LEqual value.
 */
template <typename Enum> friend bool operator!=(Enum value, LEqual);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Less value.
/**
 *  @see @ref oglplus::CompareFunction "CompareFunction"
 *
 *  @glsymbols
 *  @gldefref{LESS}
 *
 *  @ingroup smart_enums
 */
struct Less {

/// Conversion to any @p Enum type having the Less value.
/** Instances of the @ref oglplus::smart_enums::Less "Less"
 *  type are convertible to instances of any enumeration type having
 *  the @c Less value.
 */
template <typename Enum, Enum = Enum::Less> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Less value.
/** Instances of the @c smart_enums::Less type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Less value.
 */
template <typename Enum> friend bool operator==(Enum value, Less);

/// Non-equality comparison with any @p Enum type having the Less value.
/** Instances of the @c smart_enums::Less type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Less value.
 */
template <typename Enum> friend bool operator!=(Enum value, Less);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Lighting value.
/**
 *  @see @ref oglplus::CompatibilityAttributeGroup "CompatibilityAttributeGroup"
 *
 *  @glsymbols
 *  @gldefref{LIGHTING_BIT}
 *
 *  @ingroup smart_enums
 */
struct Lighting {

/// Conversion to any @p Enum type having the Lighting value.
/** Instances of the @ref oglplus::smart_enums::Lighting "Lighting"
 *  type are convertible to instances of any enumeration type having
 *  the @c Lighting value.
 */
template <typename Enum, Enum = Enum::Lighting> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Lighting value.
/** Instances of the @c smart_enums::Lighting type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Lighting value.
 */
template <typename Enum> friend bool operator==(Enum value, Lighting);

/// Non-equality comparison with any @p Enum type having the Lighting value.
/** Instances of the @c smart_enums::Lighting type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Lighting value.
 */
template <typename Enum> friend bool operator!=(Enum value, Lighting);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Line value.
/**
 *  @see @ref oglplus::CompatibilityAttributeGroup "CompatibilityAttributeGroup"
 *  @see @ref oglplus::PolygonMode "PolygonMode"
 *
 *  @glsymbols
 *  @gldefref{LINE}
 *  @gldefref{LINE_BIT}
 *
 *  @ingroup smart_enums
 */
struct Line {

/// Conversion to any @p Enum type having the Line value.
/** Instances of the @ref oglplus::smart_enums::Line "Line"
 *  type are convertible to instances of any enumeration type having
 *  the @c Line value.
 */
template <typename Enum, Enum = Enum::Line> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Line value.
/** Instances of the @c smart_enums::Line type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Line value.
 */
template <typename Enum> friend bool operator==(Enum value, Line);

/// Non-equality comparison with any @p Enum type having the Line value.
/** Instances of the @c smart_enums::Line type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Line value.
 */
template <typename Enum> friend bool operator!=(Enum value, Line);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Linear value.
/**
 *  @see @ref oglplus::BlitFilter "BlitFilter"
 *  @see @ref oglplus::TextureFilter "TextureFilter"
 *  @see @ref oglplus::TextureMagFilter "TextureMagFilter"
 *  @see @ref oglplus::TextureMinFilter "TextureMinFilter"
 *
 *  @glsymbols
 *  @gldefref{LINEAR}
 *
 *  @ingroup smart_enums
 */
struct Linear {

/// Conversion to any @p Enum type having the Linear value.
/** Instances of the @ref oglplus::smart_enums::Linear "Linear"
 *  type are convertible to instances of any enumeration type having
 *  the @c Linear value.
 */
template <typename Enum, Enum = Enum::Linear> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Linear value.
/** Instances of the @c smart_enums::Linear type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Linear value.
 */
template <typename Enum> friend bool operator==(Enum value, Linear);

/// Non-equality comparison with any @p Enum type having the Linear value.
/** Instances of the @c smart_enums::Linear type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Linear value.
 */
template <typename Enum> friend bool operator!=(Enum value, Linear);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c LinearMipmapLinear value.
/**
 *  @see @ref oglplus::TextureMinFilter "TextureMinFilter"
 *
 *  @glsymbols
 *  @gldefref{LINEAR_MIPMAP_LINEAR}
 *
 *  @ingroup smart_enums
 */
struct LinearMipmapLinear {

/// Conversion to any @p Enum type having the LinearMipmapLinear value.
/** Instances of the @ref oglplus::smart_enums::LinearMipmapLinear "LinearMipmapLinear"
 *  type are convertible to instances of any enumeration type having
 *  the @c LinearMipmapLinear value.
 */
template <typename Enum, Enum = Enum::LinearMipmapLinear> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the LinearMipmapLinear value.
/** Instances of the @c smart_enums::LinearMipmapLinear type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c LinearMipmapLinear value.
 */
template <typename Enum> friend bool operator==(Enum value, LinearMipmapLinear);

/// Non-equality comparison with any @p Enum type having the LinearMipmapLinear value.
/** Instances of the @c smart_enums::LinearMipmapLinear type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c LinearMipmapLinear value.
 */
template <typename Enum> friend bool operator!=(Enum value, LinearMipmapLinear);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c LinearMipmapNearest value.
/**
 *  @see @ref oglplus::TextureMinFilter "TextureMinFilter"
 *
 *  @glsymbols
 *  @gldefref{LINEAR_MIPMAP_NEAREST}
 *
 *  @ingroup smart_enums
 */
struct LinearMipmapNearest {

/// Conversion to any @p Enum type having the LinearMipmapNearest value.
/** Instances of the @ref oglplus::smart_enums::LinearMipmapNearest "LinearMipmapNearest"
 *  type are convertible to instances of any enumeration type having
 *  the @c LinearMipmapNearest value.
 */
template <typename Enum, Enum = Enum::LinearMipmapNearest> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the LinearMipmapNearest value.
/** Instances of the @c smart_enums::LinearMipmapNearest type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c LinearMipmapNearest value.
 */
template <typename Enum> friend bool operator==(Enum value, LinearMipmapNearest);

/// Non-equality comparison with any @p Enum type having the LinearMipmapNearest value.
/** Instances of the @c smart_enums::LinearMipmapNearest type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c LinearMipmapNearest value.
 */
template <typename Enum> friend bool operator!=(Enum value, LinearMipmapNearest);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c LineLoop value.
/**
 *  @see @ref oglplus::CompatibilityPrimitiveType "CompatibilityPrimitiveType"
 *  @see @ref oglplus::PrimitiveType "PrimitiveType"
 *
 *  @glsymbols
 *  @gldefref{LINE_LOOP}
 *
 *  @ingroup smart_enums
 */
struct LineLoop {

/// Conversion to any @p Enum type having the LineLoop value.
/** Instances of the @ref oglplus::smart_enums::LineLoop "LineLoop"
 *  type are convertible to instances of any enumeration type having
 *  the @c LineLoop value.
 */
template <typename Enum, Enum = Enum::LineLoop> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the LineLoop value.
/** Instances of the @c smart_enums::LineLoop type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c LineLoop value.
 */
template <typename Enum> friend bool operator==(Enum value, LineLoop);

/// Non-equality comparison with any @p Enum type having the LineLoop value.
/** Instances of the @c smart_enums::LineLoop type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c LineLoop value.
 */
template <typename Enum> friend bool operator!=(Enum value, LineLoop);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Lines value.
/**
 *  @see @ref oglplus::CompatibilityPrimitiveType "CompatibilityPrimitiveType"
 *  @see @ref oglplus::PrimitiveType "PrimitiveType"
 *  @see @ref oglplus::TransformFeedbackPrimitiveType "TransformFeedbackPrimitiveType"
 *
 *  @glsymbols
 *  @gldefref{LINES}
 *
 *  @ingroup smart_enums
 */
struct Lines {

/// Conversion to any @p Enum type having the Lines value.
/** Instances of the @ref oglplus::smart_enums::Lines "Lines"
 *  type are convertible to instances of any enumeration type having
 *  the @c Lines value.
 */
template <typename Enum, Enum = Enum::Lines> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Lines value.
/** Instances of the @c smart_enums::Lines type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Lines value.
 */
template <typename Enum> friend bool operator==(Enum value, Lines);

/// Non-equality comparison with any @p Enum type having the Lines value.
/** Instances of the @c smart_enums::Lines type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Lines value.
 */
template <typename Enum> friend bool operator!=(Enum value, Lines);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c LinesAdjacency value.
/**
 *  @see @ref oglplus::PrimitiveType "PrimitiveType"
 *
 *  @glsymbols
 *  @gldefref{LINES_ADJACENCY}
 *
 *  @ingroup smart_enums
 */
struct LinesAdjacency {

/// Conversion to any @p Enum type having the LinesAdjacency value.
/** Instances of the @ref oglplus::smart_enums::LinesAdjacency "LinesAdjacency"
 *  type are convertible to instances of any enumeration type having
 *  the @c LinesAdjacency value.
 */
template <typename Enum, Enum = Enum::LinesAdjacency> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the LinesAdjacency value.
/** Instances of the @c smart_enums::LinesAdjacency type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c LinesAdjacency value.
 */
template <typename Enum> friend bool operator==(Enum value, LinesAdjacency);

/// Non-equality comparison with any @p Enum type having the LinesAdjacency value.
/** Instances of the @c smart_enums::LinesAdjacency type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c LinesAdjacency value.
 */
template <typename Enum> friend bool operator!=(Enum value, LinesAdjacency);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c LineSmooth value.
/**
 *  @see @ref oglplus::Capability "Capability"
 *  @see @ref oglplus::HintTarget "HintTarget"
 *
 *  @glsymbols
 *  @gldefref{LINE_SMOOTH}
 *  @gldefref{LINE_SMOOTH_HINT}
 *
 *  @ingroup smart_enums
 */
struct LineSmooth {

/// Conversion to any @p Enum type having the LineSmooth value.
/** Instances of the @ref oglplus::smart_enums::LineSmooth "LineSmooth"
 *  type are convertible to instances of any enumeration type having
 *  the @c LineSmooth value.
 */
template <typename Enum, Enum = Enum::LineSmooth> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the LineSmooth value.
/** Instances of the @c smart_enums::LineSmooth type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c LineSmooth value.
 */
template <typename Enum> friend bool operator==(Enum value, LineSmooth);

/// Non-equality comparison with any @p Enum type having the LineSmooth value.
/** Instances of the @c smart_enums::LineSmooth type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c LineSmooth value.
 */
template <typename Enum> friend bool operator!=(Enum value, LineSmooth);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c LineStrip value.
/**
 *  @see @ref oglplus::CompatibilityPrimitiveType "CompatibilityPrimitiveType"
 *  @see @ref oglplus::PrimitiveType "PrimitiveType"
 *
 *  @glsymbols
 *  @gldefref{LINE_STRIP}
 *
 *  @ingroup smart_enums
 */
struct LineStrip {

/// Conversion to any @p Enum type having the LineStrip value.
/** Instances of the @ref oglplus::smart_enums::LineStrip "LineStrip"
 *  type are convertible to instances of any enumeration type having
 *  the @c LineStrip value.
 */
template <typename Enum, Enum = Enum::LineStrip> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the LineStrip value.
/** Instances of the @c smart_enums::LineStrip type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c LineStrip value.
 */
template <typename Enum> friend bool operator==(Enum value, LineStrip);

/// Non-equality comparison with any @p Enum type having the LineStrip value.
/** Instances of the @c smart_enums::LineStrip type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c LineStrip value.
 */
template <typename Enum> friend bool operator!=(Enum value, LineStrip);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c LineStripAdjacency value.
/**
 *  @see @ref oglplus::PrimitiveType "PrimitiveType"
 *
 *  @glsymbols
 *  @gldefref{LINE_STRIP_ADJACENCY}
 *
 *  @ingroup smart_enums
 */
struct LineStripAdjacency {

/// Conversion to any @p Enum type having the LineStripAdjacency value.
/** Instances of the @ref oglplus::smart_enums::LineStripAdjacency "LineStripAdjacency"
 *  type are convertible to instances of any enumeration type having
 *  the @c LineStripAdjacency value.
 */
template <typename Enum, Enum = Enum::LineStripAdjacency> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the LineStripAdjacency value.
/** Instances of the @c smart_enums::LineStripAdjacency type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c LineStripAdjacency value.
 */
template <typename Enum> friend bool operator==(Enum value, LineStripAdjacency);

/// Non-equality comparison with any @p Enum type having the LineStripAdjacency value.
/** Instances of the @c smart_enums::LineStripAdjacency type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c LineStripAdjacency value.
 */
template <typename Enum> friend bool operator!=(Enum value, LineStripAdjacency);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c LineTo value.
/**
 *  @see @ref oglplus::PathNVCommand "PathNVCommand"
 *
 *  @glsymbols
 *  @gldefref{LINE_TO_NV}
 *
 *  @ingroup smart_enums
 */
struct LineTo {

/// Conversion to any @p Enum type having the LineTo value.
/** Instances of the @ref oglplus::smart_enums::LineTo "LineTo"
 *  type are convertible to instances of any enumeration type having
 *  the @c LineTo value.
 */
template <typename Enum, Enum = Enum::LineTo> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the LineTo value.
/** Instances of the @c smart_enums::LineTo type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c LineTo value.
 */
template <typename Enum> friend bool operator==(Enum value, LineTo);

/// Non-equality comparison with any @p Enum type having the LineTo value.
/** Instances of the @c smart_enums::LineTo type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c LineTo value.
 */
template <typename Enum> friend bool operator!=(Enum value, LineTo);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c List value.
/**
 *  @see @ref oglplus::CompatibilityAttributeGroup "CompatibilityAttributeGroup"
 *
 *  @glsymbols
 *  @gldefref{LIST_BIT}
 *
 *  @ingroup smart_enums
 */
struct List {

/// Conversion to any @p Enum type having the List value.
/** Instances of the @ref oglplus::smart_enums::List "List"
 *  type are convertible to instances of any enumeration type having
 *  the @c List value.
 */
template <typename Enum, Enum = Enum::List> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the List value.
/** Instances of the @c smart_enums::List type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c List value.
 */
template <typename Enum> friend bool operator==(Enum value, List);

/// Non-equality comparison with any @p Enum type having the List value.
/** Instances of the @c smart_enums::List type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c List value.
 */
template <typename Enum> friend bool operator!=(Enum value, List);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Location value.
/**
 *  @see @ref oglplus::ProgramResourceProperty "ProgramResourceProperty"
 *
 *  @glsymbols
 *  @gldefref{LOCATION}
 *
 *  @ingroup smart_enums
 */
struct Location {

/// Conversion to any @p Enum type having the Location value.
/** Instances of the @ref oglplus::smart_enums::Location "Location"
 *  type are convertible to instances of any enumeration type having
 *  the @c Location value.
 */
template <typename Enum, Enum = Enum::Location> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Location value.
/** Instances of the @c smart_enums::Location type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Location value.
 */
template <typename Enum> friend bool operator==(Enum value, Location);

/// Non-equality comparison with any @p Enum type having the Location value.
/** Instances of the @c smart_enums::Location type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Location value.
 */
template <typename Enum> friend bool operator!=(Enum value, Location);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c LocationComponent value.
/**
 *  @see @ref oglplus::ProgramResourceProperty "ProgramResourceProperty"
 *
 *  @glsymbols
 *  @gldefref{LOCATION_COMPONENT}
 *
 *  @ingroup smart_enums
 */
struct LocationComponent {

/// Conversion to any @p Enum type having the LocationComponent value.
/** Instances of the @ref oglplus::smart_enums::LocationComponent "LocationComponent"
 *  type are convertible to instances of any enumeration type having
 *  the @c LocationComponent value.
 */
template <typename Enum, Enum = Enum::LocationComponent> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the LocationComponent value.
/** Instances of the @c smart_enums::LocationComponent type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c LocationComponent value.
 */
template <typename Enum> friend bool operator==(Enum value, LocationComponent);

/// Non-equality comparison with any @p Enum type having the LocationComponent value.
/** Instances of the @c smart_enums::LocationComponent type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c LocationComponent value.
 */
template <typename Enum> friend bool operator!=(Enum value, LocationComponent);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c LocationIndex value.
/**
 *  @see @ref oglplus::ProgramResourceProperty "ProgramResourceProperty"
 *
 *  @glsymbols
 *  @gldefref{LOCATION_INDEX}
 *
 *  @ingroup smart_enums
 */
struct LocationIndex {

/// Conversion to any @p Enum type having the LocationIndex value.
/** Instances of the @ref oglplus::smart_enums::LocationIndex "LocationIndex"
 *  type are convertible to instances of any enumeration type having
 *  the @c LocationIndex value.
 */
template <typename Enum, Enum = Enum::LocationIndex> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the LocationIndex value.
/** Instances of the @c smart_enums::LocationIndex type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c LocationIndex value.
 */
template <typename Enum> friend bool operator==(Enum value, LocationIndex);

/// Non-equality comparison with any @p Enum type having the LocationIndex value.
/** Instances of the @c smart_enums::LocationIndex type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c LocationIndex value.
 */
template <typename Enum> friend bool operator!=(Enum value, LocationIndex);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c LoseContextOnReset value.
/**
 *  @see @ref oglplus::ResetNotificationStrategy "ResetNotificationStrategy"
 *
 *  @glsymbols
 *  @gldefref{LOSE_CONTEXT_ON_RESET_ARB}
 *
 *  @ingroup smart_enums
 */
struct LoseContextOnReset {

/// Conversion to any @p Enum type having the LoseContextOnReset value.
/** Instances of the @ref oglplus::smart_enums::LoseContextOnReset "LoseContextOnReset"
 *  type are convertible to instances of any enumeration type having
 *  the @c LoseContextOnReset value.
 */
template <typename Enum, Enum = Enum::LoseContextOnReset> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the LoseContextOnReset value.
/** Instances of the @c smart_enums::LoseContextOnReset type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c LoseContextOnReset value.
 */
template <typename Enum> friend bool operator==(Enum value, LoseContextOnReset);

/// Non-equality comparison with any @p Enum type having the LoseContextOnReset value.
/** Instances of the @c smart_enums::LoseContextOnReset type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c LoseContextOnReset value.
 */
template <typename Enum> friend bool operator!=(Enum value, LoseContextOnReset);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Low value.
/**
 *  @see @ref oglplus::DebugOutputARBSeverity "DebugOutputARBSeverity"
 *  @see @ref oglplus::DebugOutputSeverity "DebugOutputSeverity"
 *  @see @ref oglplus::DebugSeverity "DebugSeverity"
 *
 *  @glsymbols
 *  @gldefref{DEBUG_SEVERITY_LOW}
 *  @gldefref{DEBUG_SEVERITY_LOW_ARB}
 *
 *  @ingroup smart_enums
 */
struct Low {

/// Conversion to any @p Enum type having the Low value.
/** Instances of the @ref oglplus::smart_enums::Low "Low"
 *  type are convertible to instances of any enumeration type having
 *  the @c Low value.
 */
template <typename Enum, Enum = Enum::Low> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Low value.
/** Instances of the @c smart_enums::Low type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Low value.
 */
template <typename Enum> friend bool operator==(Enum value, Low);

/// Non-equality comparison with any @p Enum type having the Low value.
/** Instances of the @c smart_enums::Low type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Low value.
 */
template <typename Enum> friend bool operator!=(Enum value, Low);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c LowFloat value.
/**
 *  @see @ref oglplus::PrecisionType "PrecisionType"
 *
 *  @glsymbols
 *  @gldefref{LOW_FLOAT}
 *
 *  @ingroup smart_enums
 */
struct LowFloat {

/// Conversion to any @p Enum type having the LowFloat value.
/** Instances of the @ref oglplus::smart_enums::LowFloat "LowFloat"
 *  type are convertible to instances of any enumeration type having
 *  the @c LowFloat value.
 */
template <typename Enum, Enum = Enum::LowFloat> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the LowFloat value.
/** Instances of the @c smart_enums::LowFloat type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c LowFloat value.
 */
template <typename Enum> friend bool operator==(Enum value, LowFloat);

/// Non-equality comparison with any @p Enum type having the LowFloat value.
/** Instances of the @c smart_enums::LowFloat type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c LowFloat value.
 */
template <typename Enum> friend bool operator!=(Enum value, LowFloat);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c LowInt value.
/**
 *  @see @ref oglplus::PrecisionType "PrecisionType"
 *
 *  @glsymbols
 *  @gldefref{LOW_INT}
 *
 *  @ingroup smart_enums
 */
struct LowInt {

/// Conversion to any @p Enum type having the LowInt value.
/** Instances of the @ref oglplus::smart_enums::LowInt "LowInt"
 *  type are convertible to instances of any enumeration type having
 *  the @c LowInt value.
 */
template <typename Enum, Enum = Enum::LowInt> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the LowInt value.
/** Instances of the @c smart_enums::LowInt type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c LowInt value.
 */
template <typename Enum> friend bool operator==(Enum value, LowInt);

/// Non-equality comparison with any @p Enum type having the LowInt value.
/** Instances of the @c smart_enums::LowInt type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c LowInt value.
 */
template <typename Enum> friend bool operator!=(Enum value, LowInt);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Luminance value.
/**
 *  @see @ref oglplus::PathNVColorFormat "PathNVColorFormat"
 *
 *  @glsymbols
 *  @gldefref{LUMINANCE}
 *
 *  @ingroup smart_enums
 */
struct Luminance {

/// Conversion to any @p Enum type having the Luminance value.
/** Instances of the @ref oglplus::smart_enums::Luminance "Luminance"
 *  type are convertible to instances of any enumeration type having
 *  the @c Luminance value.
 */
template <typename Enum, Enum = Enum::Luminance> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Luminance value.
/** Instances of the @c smart_enums::Luminance type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Luminance value.
 */
template <typename Enum> friend bool operator==(Enum value, Luminance);

/// Non-equality comparison with any @p Enum type having the Luminance value.
/** Instances of the @c smart_enums::Luminance type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Luminance value.
 */
template <typename Enum> friend bool operator!=(Enum value, Luminance);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c LuminanceAlpha value.
/**
 *  @see @ref oglplus::PathNVColorFormat "PathNVColorFormat"
 *
 *  @glsymbols
 *  @gldefref{LUMINANCE_ALPHA}
 *
 *  @ingroup smart_enums
 */
struct LuminanceAlpha {

/// Conversion to any @p Enum type having the LuminanceAlpha value.
/** Instances of the @ref oglplus::smart_enums::LuminanceAlpha "LuminanceAlpha"
 *  type are convertible to instances of any enumeration type having
 *  the @c LuminanceAlpha value.
 */
template <typename Enum, Enum = Enum::LuminanceAlpha> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the LuminanceAlpha value.
/** Instances of the @c smart_enums::LuminanceAlpha type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c LuminanceAlpha value.
 */
template <typename Enum> friend bool operator==(Enum value, LuminanceAlpha);

/// Non-equality comparison with any @p Enum type having the LuminanceAlpha value.
/** Instances of the @c smart_enums::LuminanceAlpha type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c LuminanceAlpha value.
 */
template <typename Enum> friend bool operator!=(Enum value, LuminanceAlpha);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MapCoherent value.
/**
 *  @see @ref oglplus::BufferStorageBit "BufferStorageBit"
 *
 *  @glsymbols
 *  @gldefref{MAP_COHERENT_BIT}
 *
 *  @ingroup smart_enums
 */
struct MapCoherent {

/// Conversion to any @p Enum type having the MapCoherent value.
/** Instances of the @ref oglplus::smart_enums::MapCoherent "MapCoherent"
 *  type are convertible to instances of any enumeration type having
 *  the @c MapCoherent value.
 */
template <typename Enum, Enum = Enum::MapCoherent> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MapCoherent value.
/** Instances of the @c smart_enums::MapCoherent type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MapCoherent value.
 */
template <typename Enum> friend bool operator==(Enum value, MapCoherent);

/// Non-equality comparison with any @p Enum type having the MapCoherent value.
/** Instances of the @c smart_enums::MapCoherent type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MapCoherent value.
 */
template <typename Enum> friend bool operator!=(Enum value, MapCoherent);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MapPersistent value.
/**
 *  @see @ref oglplus::BufferStorageBit "BufferStorageBit"
 *
 *  @glsymbols
 *  @gldefref{MAP_PERSISTENT_BIT}
 *
 *  @ingroup smart_enums
 */
struct MapPersistent {

/// Conversion to any @p Enum type having the MapPersistent value.
/** Instances of the @ref oglplus::smart_enums::MapPersistent "MapPersistent"
 *  type are convertible to instances of any enumeration type having
 *  the @c MapPersistent value.
 */
template <typename Enum, Enum = Enum::MapPersistent> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MapPersistent value.
/** Instances of the @c smart_enums::MapPersistent type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MapPersistent value.
 */
template <typename Enum> friend bool operator==(Enum value, MapPersistent);

/// Non-equality comparison with any @p Enum type having the MapPersistent value.
/** Instances of the @c smart_enums::MapPersistent type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MapPersistent value.
 */
template <typename Enum> friend bool operator!=(Enum value, MapPersistent);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MapRead value.
/**
 *  @see @ref oglplus::BufferStorageBit "BufferStorageBit"
 *
 *  @glsymbols
 *  @gldefref{MAP_READ_BIT}
 *
 *  @ingroup smart_enums
 */
struct MapRead {

/// Conversion to any @p Enum type having the MapRead value.
/** Instances of the @ref oglplus::smart_enums::MapRead "MapRead"
 *  type are convertible to instances of any enumeration type having
 *  the @c MapRead value.
 */
template <typename Enum, Enum = Enum::MapRead> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MapRead value.
/** Instances of the @c smart_enums::MapRead type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MapRead value.
 */
template <typename Enum> friend bool operator==(Enum value, MapRead);

/// Non-equality comparison with any @p Enum type having the MapRead value.
/** Instances of the @c smart_enums::MapRead type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MapRead value.
 */
template <typename Enum> friend bool operator!=(Enum value, MapRead);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MapWrite value.
/**
 *  @see @ref oglplus::BufferStorageBit "BufferStorageBit"
 *
 *  @glsymbols
 *  @gldefref{MAP_WRITE_BIT}
 *
 *  @ingroup smart_enums
 */
struct MapWrite {

/// Conversion to any @p Enum type having the MapWrite value.
/** Instances of the @ref oglplus::smart_enums::MapWrite "MapWrite"
 *  type are convertible to instances of any enumeration type having
 *  the @c MapWrite value.
 */
template <typename Enum, Enum = Enum::MapWrite> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MapWrite value.
/** Instances of the @c smart_enums::MapWrite type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MapWrite value.
 */
template <typename Enum> friend bool operator==(Enum value, MapWrite);

/// Non-equality comparison with any @p Enum type having the MapWrite value.
/** Instances of the @c smart_enums::MapWrite type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MapWrite value.
 */
template <typename Enum> friend bool operator!=(Enum value, MapWrite);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Marker value.
/**
 *  @see @ref oglplus::DebugOutputType "DebugOutputType"
 *  @see @ref oglplus::DebugType "DebugType"
 *
 *  @glsymbols
 *  @gldefref{DEBUG_TYPE_MARKER}
 *
 *  @ingroup smart_enums
 */
struct Marker {

/// Conversion to any @p Enum type having the Marker value.
/** Instances of the @ref oglplus::smart_enums::Marker "Marker"
 *  type are convertible to instances of any enumeration type having
 *  the @c Marker value.
 */
template <typename Enum, Enum = Enum::Marker> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Marker value.
/** Instances of the @c smart_enums::Marker type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Marker value.
 */
template <typename Enum> friend bool operator==(Enum value, Marker);

/// Non-equality comparison with any @p Enum type having the Marker value.
/** Instances of the @c smart_enums::Marker type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Marker value.
 */
template <typename Enum> friend bool operator!=(Enum value, Marker);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MatrixStride value.
/**
 *  @see @ref oglplus::ProgramResourceProperty "ProgramResourceProperty"
 *
 *  @glsymbols
 *  @gldefref{MATRIX_STRIDE}
 *
 *  @ingroup smart_enums
 */
struct MatrixStride {

/// Conversion to any @p Enum type having the MatrixStride value.
/** Instances of the @ref oglplus::smart_enums::MatrixStride "MatrixStride"
 *  type are convertible to instances of any enumeration type having
 *  the @c MatrixStride value.
 */
template <typename Enum, Enum = Enum::MatrixStride> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MatrixStride value.
/** Instances of the @c smart_enums::MatrixStride type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MatrixStride value.
 */
template <typename Enum> friend bool operator==(Enum value, MatrixStride);

/// Non-equality comparison with any @p Enum type having the MatrixStride value.
/** Instances of the @c smart_enums::MatrixStride type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MatrixStride value.
 */
template <typename Enum> friend bool operator!=(Enum value, MatrixStride);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Max value.
/**
 *  @see @ref oglplus::BlendEquation "BlendEquation"
 *
 *  @glsymbols
 *  @gldefref{MAX}
 *
 *  @ingroup smart_enums
 */
struct Max {

/// Conversion to any @p Enum type having the Max value.
/** Instances of the @ref oglplus::smart_enums::Max "Max"
 *  type are convertible to instances of any enumeration type having
 *  the @c Max value.
 */
template <typename Enum, Enum = Enum::Max> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Max value.
/** Instances of the @c smart_enums::Max type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Max value.
 */
template <typename Enum> friend bool operator==(Enum value, Max);

/// Non-equality comparison with any @p Enum type having the Max value.
/** Instances of the @c smart_enums::Max type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Max value.
 */
template <typename Enum> friend bool operator!=(Enum value, Max);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Max3DTextureSize value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_3D_TEXTURE_SIZE}
 *
 *  @ingroup smart_enums
 */
struct Max3DTextureSize {

/// Conversion to any @p Enum type having the Max3DTextureSize value.
/** Instances of the @ref oglplus::smart_enums::Max3DTextureSize "Max3DTextureSize"
 *  type are convertible to instances of any enumeration type having
 *  the @c Max3DTextureSize value.
 */
template <typename Enum, Enum = Enum::Max3DTextureSize> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Max3DTextureSize value.
/** Instances of the @c smart_enums::Max3DTextureSize type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Max3DTextureSize value.
 */
template <typename Enum> friend bool operator==(Enum value, Max3DTextureSize);

/// Non-equality comparison with any @p Enum type having the Max3DTextureSize value.
/** Instances of the @c smart_enums::Max3DTextureSize type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Max3DTextureSize value.
 */
template <typename Enum> friend bool operator!=(Enum value, Max3DTextureSize);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxArrayTextureLayers value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_ARRAY_TEXTURE_LAYERS}
 *
 *  @ingroup smart_enums
 */
struct MaxArrayTextureLayers {

/// Conversion to any @p Enum type having the MaxArrayTextureLayers value.
/** Instances of the @ref oglplus::smart_enums::MaxArrayTextureLayers "MaxArrayTextureLayers"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxArrayTextureLayers value.
 */
template <typename Enum, Enum = Enum::MaxArrayTextureLayers> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxArrayTextureLayers value.
/** Instances of the @c smart_enums::MaxArrayTextureLayers type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxArrayTextureLayers value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxArrayTextureLayers);

/// Non-equality comparison with any @p Enum type having the MaxArrayTextureLayers value.
/** Instances of the @c smart_enums::MaxArrayTextureLayers type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxArrayTextureLayers value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxArrayTextureLayers);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxAtomicCounterBufferBindings value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_ATOMIC_COUNTER_BUFFER_BINDINGS}
 *
 *  @ingroup smart_enums
 */
struct MaxAtomicCounterBufferBindings {

/// Conversion to any @p Enum type having the MaxAtomicCounterBufferBindings value.
/** Instances of the @ref oglplus::smart_enums::MaxAtomicCounterBufferBindings "MaxAtomicCounterBufferBindings"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxAtomicCounterBufferBindings value.
 */
template <typename Enum, Enum = Enum::MaxAtomicCounterBufferBindings> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxAtomicCounterBufferBindings value.
/** Instances of the @c smart_enums::MaxAtomicCounterBufferBindings type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxAtomicCounterBufferBindings value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxAtomicCounterBufferBindings);

/// Non-equality comparison with any @p Enum type having the MaxAtomicCounterBufferBindings value.
/** Instances of the @c smart_enums::MaxAtomicCounterBufferBindings type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxAtomicCounterBufferBindings value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxAtomicCounterBufferBindings);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxAtomicCounterBufferSize value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_ATOMIC_COUNTER_BUFFER_SIZE}
 *
 *  @ingroup smart_enums
 */
struct MaxAtomicCounterBufferSize {

/// Conversion to any @p Enum type having the MaxAtomicCounterBufferSize value.
/** Instances of the @ref oglplus::smart_enums::MaxAtomicCounterBufferSize "MaxAtomicCounterBufferSize"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxAtomicCounterBufferSize value.
 */
template <typename Enum, Enum = Enum::MaxAtomicCounterBufferSize> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxAtomicCounterBufferSize value.
/** Instances of the @c smart_enums::MaxAtomicCounterBufferSize type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxAtomicCounterBufferSize value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxAtomicCounterBufferSize);

/// Non-equality comparison with any @p Enum type having the MaxAtomicCounterBufferSize value.
/** Instances of the @c smart_enums::MaxAtomicCounterBufferSize type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxAtomicCounterBufferSize value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxAtomicCounterBufferSize);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxClipDistances value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_CLIP_DISTANCES}
 *
 *  @ingroup smart_enums
 */
struct MaxClipDistances {

/// Conversion to any @p Enum type having the MaxClipDistances value.
/** Instances of the @ref oglplus::smart_enums::MaxClipDistances "MaxClipDistances"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxClipDistances value.
 */
template <typename Enum, Enum = Enum::MaxClipDistances> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxClipDistances value.
/** Instances of the @c smart_enums::MaxClipDistances type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxClipDistances value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxClipDistances);

/// Non-equality comparison with any @p Enum type having the MaxClipDistances value.
/** Instances of the @c smart_enums::MaxClipDistances type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxClipDistances value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxClipDistances);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxColorAttachments value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_COLOR_ATTACHMENTS}
 *
 *  @ingroup smart_enums
 */
struct MaxColorAttachments {

/// Conversion to any @p Enum type having the MaxColorAttachments value.
/** Instances of the @ref oglplus::smart_enums::MaxColorAttachments "MaxColorAttachments"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxColorAttachments value.
 */
template <typename Enum, Enum = Enum::MaxColorAttachments> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxColorAttachments value.
/** Instances of the @c smart_enums::MaxColorAttachments type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxColorAttachments value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxColorAttachments);

/// Non-equality comparison with any @p Enum type having the MaxColorAttachments value.
/** Instances of the @c smart_enums::MaxColorAttachments type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxColorAttachments value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxColorAttachments);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxColorTextureSamples value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_COLOR_TEXTURE_SAMPLES}
 *
 *  @ingroup smart_enums
 */
struct MaxColorTextureSamples {

/// Conversion to any @p Enum type having the MaxColorTextureSamples value.
/** Instances of the @ref oglplus::smart_enums::MaxColorTextureSamples "MaxColorTextureSamples"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxColorTextureSamples value.
 */
template <typename Enum, Enum = Enum::MaxColorTextureSamples> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxColorTextureSamples value.
/** Instances of the @c smart_enums::MaxColorTextureSamples type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxColorTextureSamples value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxColorTextureSamples);

/// Non-equality comparison with any @p Enum type having the MaxColorTextureSamples value.
/** Instances of the @c smart_enums::MaxColorTextureSamples type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxColorTextureSamples value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxColorTextureSamples);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxCombinedAtomicCounterBuffers value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_COMBINED_ATOMIC_COUNTER_BUFFERS}
 *
 *  @ingroup smart_enums
 */
struct MaxCombinedAtomicCounterBuffers {

/// Conversion to any @p Enum type having the MaxCombinedAtomicCounterBuffers value.
/** Instances of the @ref oglplus::smart_enums::MaxCombinedAtomicCounterBuffers "MaxCombinedAtomicCounterBuffers"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxCombinedAtomicCounterBuffers value.
 */
template <typename Enum, Enum = Enum::MaxCombinedAtomicCounterBuffers> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxCombinedAtomicCounterBuffers value.
/** Instances of the @c smart_enums::MaxCombinedAtomicCounterBuffers type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxCombinedAtomicCounterBuffers value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxCombinedAtomicCounterBuffers);

/// Non-equality comparison with any @p Enum type having the MaxCombinedAtomicCounterBuffers value.
/** Instances of the @c smart_enums::MaxCombinedAtomicCounterBuffers type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxCombinedAtomicCounterBuffers value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxCombinedAtomicCounterBuffers);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxCombinedAtomicCounters value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_COMBINED_ATOMIC_COUNTERS}
 *
 *  @ingroup smart_enums
 */
struct MaxCombinedAtomicCounters {

/// Conversion to any @p Enum type having the MaxCombinedAtomicCounters value.
/** Instances of the @ref oglplus::smart_enums::MaxCombinedAtomicCounters "MaxCombinedAtomicCounters"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxCombinedAtomicCounters value.
 */
template <typename Enum, Enum = Enum::MaxCombinedAtomicCounters> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxCombinedAtomicCounters value.
/** Instances of the @c smart_enums::MaxCombinedAtomicCounters type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxCombinedAtomicCounters value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxCombinedAtomicCounters);

/// Non-equality comparison with any @p Enum type having the MaxCombinedAtomicCounters value.
/** Instances of the @c smart_enums::MaxCombinedAtomicCounters type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxCombinedAtomicCounters value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxCombinedAtomicCounters);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxCombinedFragmentUniformComponents value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS}
 *
 *  @ingroup smart_enums
 */
struct MaxCombinedFragmentUniformComponents {

/// Conversion to any @p Enum type having the MaxCombinedFragmentUniformComponents value.
/** Instances of the @ref oglplus::smart_enums::MaxCombinedFragmentUniformComponents "MaxCombinedFragmentUniformComponents"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxCombinedFragmentUniformComponents value.
 */
template <typename Enum, Enum = Enum::MaxCombinedFragmentUniformComponents> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxCombinedFragmentUniformComponents value.
/** Instances of the @c smart_enums::MaxCombinedFragmentUniformComponents type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxCombinedFragmentUniformComponents value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxCombinedFragmentUniformComponents);

/// Non-equality comparison with any @p Enum type having the MaxCombinedFragmentUniformComponents value.
/** Instances of the @c smart_enums::MaxCombinedFragmentUniformComponents type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxCombinedFragmentUniformComponents value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxCombinedFragmentUniformComponents);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxCombinedGeometryUniformComponents value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS}
 *
 *  @ingroup smart_enums
 */
struct MaxCombinedGeometryUniformComponents {

/// Conversion to any @p Enum type having the MaxCombinedGeometryUniformComponents value.
/** Instances of the @ref oglplus::smart_enums::MaxCombinedGeometryUniformComponents "MaxCombinedGeometryUniformComponents"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxCombinedGeometryUniformComponents value.
 */
template <typename Enum, Enum = Enum::MaxCombinedGeometryUniformComponents> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxCombinedGeometryUniformComponents value.
/** Instances of the @c smart_enums::MaxCombinedGeometryUniformComponents type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxCombinedGeometryUniformComponents value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxCombinedGeometryUniformComponents);

/// Non-equality comparison with any @p Enum type having the MaxCombinedGeometryUniformComponents value.
/** Instances of the @c smart_enums::MaxCombinedGeometryUniformComponents type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxCombinedGeometryUniformComponents value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxCombinedGeometryUniformComponents);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxCombinedImageUniforms value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_COMBINED_IMAGE_UNIFORMS}
 *
 *  @ingroup smart_enums
 */
struct MaxCombinedImageUniforms {

/// Conversion to any @p Enum type having the MaxCombinedImageUniforms value.
/** Instances of the @ref oglplus::smart_enums::MaxCombinedImageUniforms "MaxCombinedImageUniforms"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxCombinedImageUniforms value.
 */
template <typename Enum, Enum = Enum::MaxCombinedImageUniforms> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxCombinedImageUniforms value.
/** Instances of the @c smart_enums::MaxCombinedImageUniforms type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxCombinedImageUniforms value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxCombinedImageUniforms);

/// Non-equality comparison with any @p Enum type having the MaxCombinedImageUniforms value.
/** Instances of the @c smart_enums::MaxCombinedImageUniforms type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxCombinedImageUniforms value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxCombinedImageUniforms);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxCombinedImageUnitsAndFragmentOutputs value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS}
 *
 *  @ingroup smart_enums
 */
struct MaxCombinedImageUnitsAndFragmentOutputs {

/// Conversion to any @p Enum type having the MaxCombinedImageUnitsAndFragmentOutputs value.
/** Instances of the @ref oglplus::smart_enums::MaxCombinedImageUnitsAndFragmentOutputs "MaxCombinedImageUnitsAndFragmentOutputs"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxCombinedImageUnitsAndFragmentOutputs value.
 */
template <typename Enum, Enum = Enum::MaxCombinedImageUnitsAndFragmentOutputs> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxCombinedImageUnitsAndFragmentOutputs value.
/** Instances of the @c smart_enums::MaxCombinedImageUnitsAndFragmentOutputs type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxCombinedImageUnitsAndFragmentOutputs value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxCombinedImageUnitsAndFragmentOutputs);

/// Non-equality comparison with any @p Enum type having the MaxCombinedImageUnitsAndFragmentOutputs value.
/** Instances of the @c smart_enums::MaxCombinedImageUnitsAndFragmentOutputs type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxCombinedImageUnitsAndFragmentOutputs value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxCombinedImageUnitsAndFragmentOutputs);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxCombinedTessControlUniformComponents value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS}
 *
 *  @ingroup smart_enums
 */
struct MaxCombinedTessControlUniformComponents {

/// Conversion to any @p Enum type having the MaxCombinedTessControlUniformComponents value.
/** Instances of the @ref oglplus::smart_enums::MaxCombinedTessControlUniformComponents "MaxCombinedTessControlUniformComponents"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxCombinedTessControlUniformComponents value.
 */
template <typename Enum, Enum = Enum::MaxCombinedTessControlUniformComponents> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxCombinedTessControlUniformComponents value.
/** Instances of the @c smart_enums::MaxCombinedTessControlUniformComponents type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxCombinedTessControlUniformComponents value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxCombinedTessControlUniformComponents);

/// Non-equality comparison with any @p Enum type having the MaxCombinedTessControlUniformComponents value.
/** Instances of the @c smart_enums::MaxCombinedTessControlUniformComponents type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxCombinedTessControlUniformComponents value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxCombinedTessControlUniformComponents);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxCombinedTessEvaluationUniformComponents value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS}
 *
 *  @ingroup smart_enums
 */
struct MaxCombinedTessEvaluationUniformComponents {

/// Conversion to any @p Enum type having the MaxCombinedTessEvaluationUniformComponents value.
/** Instances of the @ref oglplus::smart_enums::MaxCombinedTessEvaluationUniformComponents "MaxCombinedTessEvaluationUniformComponents"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxCombinedTessEvaluationUniformComponents value.
 */
template <typename Enum, Enum = Enum::MaxCombinedTessEvaluationUniformComponents> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxCombinedTessEvaluationUniformComponents value.
/** Instances of the @c smart_enums::MaxCombinedTessEvaluationUniformComponents type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxCombinedTessEvaluationUniformComponents value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxCombinedTessEvaluationUniformComponents);

/// Non-equality comparison with any @p Enum type having the MaxCombinedTessEvaluationUniformComponents value.
/** Instances of the @c smart_enums::MaxCombinedTessEvaluationUniformComponents type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxCombinedTessEvaluationUniformComponents value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxCombinedTessEvaluationUniformComponents);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxCombinedTextureImageUnits value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_COMBINED_TEXTURE_IMAGE_UNITS}
 *
 *  @ingroup smart_enums
 */
struct MaxCombinedTextureImageUnits {

/// Conversion to any @p Enum type having the MaxCombinedTextureImageUnits value.
/** Instances of the @ref oglplus::smart_enums::MaxCombinedTextureImageUnits "MaxCombinedTextureImageUnits"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxCombinedTextureImageUnits value.
 */
template <typename Enum, Enum = Enum::MaxCombinedTextureImageUnits> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxCombinedTextureImageUnits value.
/** Instances of the @c smart_enums::MaxCombinedTextureImageUnits type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxCombinedTextureImageUnits value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxCombinedTextureImageUnits);

/// Non-equality comparison with any @p Enum type having the MaxCombinedTextureImageUnits value.
/** Instances of the @c smart_enums::MaxCombinedTextureImageUnits type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxCombinedTextureImageUnits value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxCombinedTextureImageUnits);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxCombinedUniformBlocks value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_COMBINED_UNIFORM_BLOCKS}
 *
 *  @ingroup smart_enums
 */
struct MaxCombinedUniformBlocks {

/// Conversion to any @p Enum type having the MaxCombinedUniformBlocks value.
/** Instances of the @ref oglplus::smart_enums::MaxCombinedUniformBlocks "MaxCombinedUniformBlocks"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxCombinedUniformBlocks value.
 */
template <typename Enum, Enum = Enum::MaxCombinedUniformBlocks> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxCombinedUniformBlocks value.
/** Instances of the @c smart_enums::MaxCombinedUniformBlocks type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxCombinedUniformBlocks value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxCombinedUniformBlocks);

/// Non-equality comparison with any @p Enum type having the MaxCombinedUniformBlocks value.
/** Instances of the @c smart_enums::MaxCombinedUniformBlocks type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxCombinedUniformBlocks value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxCombinedUniformBlocks);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxCombinedVertexUniformComponents value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS}
 *
 *  @ingroup smart_enums
 */
struct MaxCombinedVertexUniformComponents {

/// Conversion to any @p Enum type having the MaxCombinedVertexUniformComponents value.
/** Instances of the @ref oglplus::smart_enums::MaxCombinedVertexUniformComponents "MaxCombinedVertexUniformComponents"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxCombinedVertexUniformComponents value.
 */
template <typename Enum, Enum = Enum::MaxCombinedVertexUniformComponents> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxCombinedVertexUniformComponents value.
/** Instances of the @c smart_enums::MaxCombinedVertexUniformComponents type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxCombinedVertexUniformComponents value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxCombinedVertexUniformComponents);

/// Non-equality comparison with any @p Enum type having the MaxCombinedVertexUniformComponents value.
/** Instances of the @c smart_enums::MaxCombinedVertexUniformComponents type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxCombinedVertexUniformComponents value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxCombinedVertexUniformComponents);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxComputeSharedMemorySize value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_COMPUTE_SHARED_MEMORY_SIZE}
 *
 *  @ingroup smart_enums
 */
struct MaxComputeSharedMemorySize {

/// Conversion to any @p Enum type having the MaxComputeSharedMemorySize value.
/** Instances of the @ref oglplus::smart_enums::MaxComputeSharedMemorySize "MaxComputeSharedMemorySize"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxComputeSharedMemorySize value.
 */
template <typename Enum, Enum = Enum::MaxComputeSharedMemorySize> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxComputeSharedMemorySize value.
/** Instances of the @c smart_enums::MaxComputeSharedMemorySize type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxComputeSharedMemorySize value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxComputeSharedMemorySize);

/// Non-equality comparison with any @p Enum type having the MaxComputeSharedMemorySize value.
/** Instances of the @c smart_enums::MaxComputeSharedMemorySize type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxComputeSharedMemorySize value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxComputeSharedMemorySize);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxComputeWorkGroupCount value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_COMPUTE_WORK_GROUP_COUNT}
 *
 *  @ingroup smart_enums
 */
struct MaxComputeWorkGroupCount {

/// Conversion to any @p Enum type having the MaxComputeWorkGroupCount value.
/** Instances of the @ref oglplus::smart_enums::MaxComputeWorkGroupCount "MaxComputeWorkGroupCount"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxComputeWorkGroupCount value.
 */
template <typename Enum, Enum = Enum::MaxComputeWorkGroupCount> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxComputeWorkGroupCount value.
/** Instances of the @c smart_enums::MaxComputeWorkGroupCount type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxComputeWorkGroupCount value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxComputeWorkGroupCount);

/// Non-equality comparison with any @p Enum type having the MaxComputeWorkGroupCount value.
/** Instances of the @c smart_enums::MaxComputeWorkGroupCount type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxComputeWorkGroupCount value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxComputeWorkGroupCount);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxComputeWorkGroupInvocations value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_COMPUTE_WORK_GROUP_INVOCATIONS}
 *
 *  @ingroup smart_enums
 */
struct MaxComputeWorkGroupInvocations {

/// Conversion to any @p Enum type having the MaxComputeWorkGroupInvocations value.
/** Instances of the @ref oglplus::smart_enums::MaxComputeWorkGroupInvocations "MaxComputeWorkGroupInvocations"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxComputeWorkGroupInvocations value.
 */
template <typename Enum, Enum = Enum::MaxComputeWorkGroupInvocations> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxComputeWorkGroupInvocations value.
/** Instances of the @c smart_enums::MaxComputeWorkGroupInvocations type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxComputeWorkGroupInvocations value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxComputeWorkGroupInvocations);

/// Non-equality comparison with any @p Enum type having the MaxComputeWorkGroupInvocations value.
/** Instances of the @c smart_enums::MaxComputeWorkGroupInvocations type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxComputeWorkGroupInvocations value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxComputeWorkGroupInvocations);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxComputeWorkGroupSize value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_COMPUTE_WORK_GROUP_SIZE}
 *
 *  @ingroup smart_enums
 */
struct MaxComputeWorkGroupSize {

/// Conversion to any @p Enum type having the MaxComputeWorkGroupSize value.
/** Instances of the @ref oglplus::smart_enums::MaxComputeWorkGroupSize "MaxComputeWorkGroupSize"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxComputeWorkGroupSize value.
 */
template <typename Enum, Enum = Enum::MaxComputeWorkGroupSize> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxComputeWorkGroupSize value.
/** Instances of the @c smart_enums::MaxComputeWorkGroupSize type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxComputeWorkGroupSize value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxComputeWorkGroupSize);

/// Non-equality comparison with any @p Enum type having the MaxComputeWorkGroupSize value.
/** Instances of the @c smart_enums::MaxComputeWorkGroupSize type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxComputeWorkGroupSize value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxComputeWorkGroupSize);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxCubeMapTextureSize value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_CUBE_MAP_TEXTURE_SIZE}
 *
 *  @ingroup smart_enums
 */
struct MaxCubeMapTextureSize {

/// Conversion to any @p Enum type having the MaxCubeMapTextureSize value.
/** Instances of the @ref oglplus::smart_enums::MaxCubeMapTextureSize "MaxCubeMapTextureSize"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxCubeMapTextureSize value.
 */
template <typename Enum, Enum = Enum::MaxCubeMapTextureSize> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxCubeMapTextureSize value.
/** Instances of the @c smart_enums::MaxCubeMapTextureSize type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxCubeMapTextureSize value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxCubeMapTextureSize);

/// Non-equality comparison with any @p Enum type having the MaxCubeMapTextureSize value.
/** Instances of the @c smart_enums::MaxCubeMapTextureSize type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxCubeMapTextureSize value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxCubeMapTextureSize);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxDepthTextureSamples value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_DEPTH_TEXTURE_SAMPLES}
 *
 *  @ingroup smart_enums
 */
struct MaxDepthTextureSamples {

/// Conversion to any @p Enum type having the MaxDepthTextureSamples value.
/** Instances of the @ref oglplus::smart_enums::MaxDepthTextureSamples "MaxDepthTextureSamples"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxDepthTextureSamples value.
 */
template <typename Enum, Enum = Enum::MaxDepthTextureSamples> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxDepthTextureSamples value.
/** Instances of the @c smart_enums::MaxDepthTextureSamples type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxDepthTextureSamples value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxDepthTextureSamples);

/// Non-equality comparison with any @p Enum type having the MaxDepthTextureSamples value.
/** Instances of the @c smart_enums::MaxDepthTextureSamples type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxDepthTextureSamples value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxDepthTextureSamples);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxDrawBuffers value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_DRAW_BUFFERS}
 *
 *  @ingroup smart_enums
 */
struct MaxDrawBuffers {

/// Conversion to any @p Enum type having the MaxDrawBuffers value.
/** Instances of the @ref oglplus::smart_enums::MaxDrawBuffers "MaxDrawBuffers"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxDrawBuffers value.
 */
template <typename Enum, Enum = Enum::MaxDrawBuffers> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxDrawBuffers value.
/** Instances of the @c smart_enums::MaxDrawBuffers type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxDrawBuffers value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxDrawBuffers);

/// Non-equality comparison with any @p Enum type having the MaxDrawBuffers value.
/** Instances of the @c smart_enums::MaxDrawBuffers type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxDrawBuffers value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxDrawBuffers);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxDualSourceDrawBuffers value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_DUAL_SOURCE_DRAW_BUFFERS}
 *
 *  @ingroup smart_enums
 */
struct MaxDualSourceDrawBuffers {

/// Conversion to any @p Enum type having the MaxDualSourceDrawBuffers value.
/** Instances of the @ref oglplus::smart_enums::MaxDualSourceDrawBuffers "MaxDualSourceDrawBuffers"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxDualSourceDrawBuffers value.
 */
template <typename Enum, Enum = Enum::MaxDualSourceDrawBuffers> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxDualSourceDrawBuffers value.
/** Instances of the @c smart_enums::MaxDualSourceDrawBuffers type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxDualSourceDrawBuffers value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxDualSourceDrawBuffers);

/// Non-equality comparison with any @p Enum type having the MaxDualSourceDrawBuffers value.
/** Instances of the @c smart_enums::MaxDualSourceDrawBuffers type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxDualSourceDrawBuffers value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxDualSourceDrawBuffers);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxElementsIndices value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_ELEMENTS_INDICES}
 *
 *  @ingroup smart_enums
 */
struct MaxElementsIndices {

/// Conversion to any @p Enum type having the MaxElementsIndices value.
/** Instances of the @ref oglplus::smart_enums::MaxElementsIndices "MaxElementsIndices"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxElementsIndices value.
 */
template <typename Enum, Enum = Enum::MaxElementsIndices> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxElementsIndices value.
/** Instances of the @c smart_enums::MaxElementsIndices type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxElementsIndices value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxElementsIndices);

/// Non-equality comparison with any @p Enum type having the MaxElementsIndices value.
/** Instances of the @c smart_enums::MaxElementsIndices type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxElementsIndices value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxElementsIndices);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxElementsVertices value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_ELEMENTS_VERTICES}
 *
 *  @ingroup smart_enums
 */
struct MaxElementsVertices {

/// Conversion to any @p Enum type having the MaxElementsVertices value.
/** Instances of the @ref oglplus::smart_enums::MaxElementsVertices "MaxElementsVertices"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxElementsVertices value.
 */
template <typename Enum, Enum = Enum::MaxElementsVertices> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxElementsVertices value.
/** Instances of the @c smart_enums::MaxElementsVertices type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxElementsVertices value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxElementsVertices);

/// Non-equality comparison with any @p Enum type having the MaxElementsVertices value.
/** Instances of the @c smart_enums::MaxElementsVertices type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxElementsVertices value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxElementsVertices);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxFragmentAtomicCounterBuffers value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS}
 *
 *  @ingroup smart_enums
 */
struct MaxFragmentAtomicCounterBuffers {

/// Conversion to any @p Enum type having the MaxFragmentAtomicCounterBuffers value.
/** Instances of the @ref oglplus::smart_enums::MaxFragmentAtomicCounterBuffers "MaxFragmentAtomicCounterBuffers"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxFragmentAtomicCounterBuffers value.
 */
template <typename Enum, Enum = Enum::MaxFragmentAtomicCounterBuffers> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxFragmentAtomicCounterBuffers value.
/** Instances of the @c smart_enums::MaxFragmentAtomicCounterBuffers type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxFragmentAtomicCounterBuffers value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxFragmentAtomicCounterBuffers);

/// Non-equality comparison with any @p Enum type having the MaxFragmentAtomicCounterBuffers value.
/** Instances of the @c smart_enums::MaxFragmentAtomicCounterBuffers type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxFragmentAtomicCounterBuffers value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxFragmentAtomicCounterBuffers);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxFragmentAtomicCounters value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_FRAGMENT_ATOMIC_COUNTERS}
 *
 *  @ingroup smart_enums
 */
struct MaxFragmentAtomicCounters {

/// Conversion to any @p Enum type having the MaxFragmentAtomicCounters value.
/** Instances of the @ref oglplus::smart_enums::MaxFragmentAtomicCounters "MaxFragmentAtomicCounters"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxFragmentAtomicCounters value.
 */
template <typename Enum, Enum = Enum::MaxFragmentAtomicCounters> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxFragmentAtomicCounters value.
/** Instances of the @c smart_enums::MaxFragmentAtomicCounters type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxFragmentAtomicCounters value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxFragmentAtomicCounters);

/// Non-equality comparison with any @p Enum type having the MaxFragmentAtomicCounters value.
/** Instances of the @c smart_enums::MaxFragmentAtomicCounters type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxFragmentAtomicCounters value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxFragmentAtomicCounters);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxFragmentImageUniforms value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_FRAGMENT_IMAGE_UNIFORMS}
 *
 *  @ingroup smart_enums
 */
struct MaxFragmentImageUniforms {

/// Conversion to any @p Enum type having the MaxFragmentImageUniforms value.
/** Instances of the @ref oglplus::smart_enums::MaxFragmentImageUniforms "MaxFragmentImageUniforms"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxFragmentImageUniforms value.
 */
template <typename Enum, Enum = Enum::MaxFragmentImageUniforms> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxFragmentImageUniforms value.
/** Instances of the @c smart_enums::MaxFragmentImageUniforms type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxFragmentImageUniforms value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxFragmentImageUniforms);

/// Non-equality comparison with any @p Enum type having the MaxFragmentImageUniforms value.
/** Instances of the @c smart_enums::MaxFragmentImageUniforms type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxFragmentImageUniforms value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxFragmentImageUniforms);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxFragmentInputComponents value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_FRAGMENT_INPUT_COMPONENTS}
 *
 *  @ingroup smart_enums
 */
struct MaxFragmentInputComponents {

/// Conversion to any @p Enum type having the MaxFragmentInputComponents value.
/** Instances of the @ref oglplus::smart_enums::MaxFragmentInputComponents "MaxFragmentInputComponents"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxFragmentInputComponents value.
 */
template <typename Enum, Enum = Enum::MaxFragmentInputComponents> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxFragmentInputComponents value.
/** Instances of the @c smart_enums::MaxFragmentInputComponents type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxFragmentInputComponents value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxFragmentInputComponents);

/// Non-equality comparison with any @p Enum type having the MaxFragmentInputComponents value.
/** Instances of the @c smart_enums::MaxFragmentInputComponents type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxFragmentInputComponents value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxFragmentInputComponents);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxFragmentInterpolationOffset value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_FRAGMENT_INTERPOLATION_OFFSET}
 *
 *  @ingroup smart_enums
 */
struct MaxFragmentInterpolationOffset {

/// Conversion to any @p Enum type having the MaxFragmentInterpolationOffset value.
/** Instances of the @ref oglplus::smart_enums::MaxFragmentInterpolationOffset "MaxFragmentInterpolationOffset"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxFragmentInterpolationOffset value.
 */
template <typename Enum, Enum = Enum::MaxFragmentInterpolationOffset> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxFragmentInterpolationOffset value.
/** Instances of the @c smart_enums::MaxFragmentInterpolationOffset type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxFragmentInterpolationOffset value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxFragmentInterpolationOffset);

/// Non-equality comparison with any @p Enum type having the MaxFragmentInterpolationOffset value.
/** Instances of the @c smart_enums::MaxFragmentInterpolationOffset type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxFragmentInterpolationOffset value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxFragmentInterpolationOffset);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxFragmentUniformBlocks value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_FRAGMENT_UNIFORM_BLOCKS}
 *
 *  @ingroup smart_enums
 */
struct MaxFragmentUniformBlocks {

/// Conversion to any @p Enum type having the MaxFragmentUniformBlocks value.
/** Instances of the @ref oglplus::smart_enums::MaxFragmentUniformBlocks "MaxFragmentUniformBlocks"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxFragmentUniformBlocks value.
 */
template <typename Enum, Enum = Enum::MaxFragmentUniformBlocks> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxFragmentUniformBlocks value.
/** Instances of the @c smart_enums::MaxFragmentUniformBlocks type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxFragmentUniformBlocks value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxFragmentUniformBlocks);

/// Non-equality comparison with any @p Enum type having the MaxFragmentUniformBlocks value.
/** Instances of the @c smart_enums::MaxFragmentUniformBlocks type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxFragmentUniformBlocks value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxFragmentUniformBlocks);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxFragmentUniformComponents value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_FRAGMENT_UNIFORM_COMPONENTS}
 *
 *  @ingroup smart_enums
 */
struct MaxFragmentUniformComponents {

/// Conversion to any @p Enum type having the MaxFragmentUniformComponents value.
/** Instances of the @ref oglplus::smart_enums::MaxFragmentUniformComponents "MaxFragmentUniformComponents"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxFragmentUniformComponents value.
 */
template <typename Enum, Enum = Enum::MaxFragmentUniformComponents> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxFragmentUniformComponents value.
/** Instances of the @c smart_enums::MaxFragmentUniformComponents type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxFragmentUniformComponents value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxFragmentUniformComponents);

/// Non-equality comparison with any @p Enum type having the MaxFragmentUniformComponents value.
/** Instances of the @c smart_enums::MaxFragmentUniformComponents type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxFragmentUniformComponents value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxFragmentUniformComponents);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxFragmentUniformVectors value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_FRAGMENT_UNIFORM_VECTORS}
 *
 *  @ingroup smart_enums
 */
struct MaxFragmentUniformVectors {

/// Conversion to any @p Enum type having the MaxFragmentUniformVectors value.
/** Instances of the @ref oglplus::smart_enums::MaxFragmentUniformVectors "MaxFragmentUniformVectors"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxFragmentUniformVectors value.
 */
template <typename Enum, Enum = Enum::MaxFragmentUniformVectors> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxFragmentUniformVectors value.
/** Instances of the @c smart_enums::MaxFragmentUniformVectors type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxFragmentUniformVectors value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxFragmentUniformVectors);

/// Non-equality comparison with any @p Enum type having the MaxFragmentUniformVectors value.
/** Instances of the @c smart_enums::MaxFragmentUniformVectors type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxFragmentUniformVectors value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxFragmentUniformVectors);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxGeometryAtomicCounterBuffers value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS}
 *
 *  @ingroup smart_enums
 */
struct MaxGeometryAtomicCounterBuffers {

/// Conversion to any @p Enum type having the MaxGeometryAtomicCounterBuffers value.
/** Instances of the @ref oglplus::smart_enums::MaxGeometryAtomicCounterBuffers "MaxGeometryAtomicCounterBuffers"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxGeometryAtomicCounterBuffers value.
 */
template <typename Enum, Enum = Enum::MaxGeometryAtomicCounterBuffers> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxGeometryAtomicCounterBuffers value.
/** Instances of the @c smart_enums::MaxGeometryAtomicCounterBuffers type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxGeometryAtomicCounterBuffers value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxGeometryAtomicCounterBuffers);

/// Non-equality comparison with any @p Enum type having the MaxGeometryAtomicCounterBuffers value.
/** Instances of the @c smart_enums::MaxGeometryAtomicCounterBuffers type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxGeometryAtomicCounterBuffers value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxGeometryAtomicCounterBuffers);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxGeometryAtomicCounters value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_GEOMETRY_ATOMIC_COUNTERS}
 *
 *  @ingroup smart_enums
 */
struct MaxGeometryAtomicCounters {

/// Conversion to any @p Enum type having the MaxGeometryAtomicCounters value.
/** Instances of the @ref oglplus::smart_enums::MaxGeometryAtomicCounters "MaxGeometryAtomicCounters"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxGeometryAtomicCounters value.
 */
template <typename Enum, Enum = Enum::MaxGeometryAtomicCounters> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxGeometryAtomicCounters value.
/** Instances of the @c smart_enums::MaxGeometryAtomicCounters type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxGeometryAtomicCounters value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxGeometryAtomicCounters);

/// Non-equality comparison with any @p Enum type having the MaxGeometryAtomicCounters value.
/** Instances of the @c smart_enums::MaxGeometryAtomicCounters type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxGeometryAtomicCounters value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxGeometryAtomicCounters);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxGeometryImageUniforms value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_GEOMETRY_IMAGE_UNIFORMS}
 *
 *  @ingroup smart_enums
 */
struct MaxGeometryImageUniforms {

/// Conversion to any @p Enum type having the MaxGeometryImageUniforms value.
/** Instances of the @ref oglplus::smart_enums::MaxGeometryImageUniforms "MaxGeometryImageUniforms"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxGeometryImageUniforms value.
 */
template <typename Enum, Enum = Enum::MaxGeometryImageUniforms> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxGeometryImageUniforms value.
/** Instances of the @c smart_enums::MaxGeometryImageUniforms type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxGeometryImageUniforms value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxGeometryImageUniforms);

/// Non-equality comparison with any @p Enum type having the MaxGeometryImageUniforms value.
/** Instances of the @c smart_enums::MaxGeometryImageUniforms type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxGeometryImageUniforms value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxGeometryImageUniforms);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxGeometryInputComponents value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_GEOMETRY_INPUT_COMPONENTS}
 *
 *  @ingroup smart_enums
 */
struct MaxGeometryInputComponents {

/// Conversion to any @p Enum type having the MaxGeometryInputComponents value.
/** Instances of the @ref oglplus::smart_enums::MaxGeometryInputComponents "MaxGeometryInputComponents"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxGeometryInputComponents value.
 */
template <typename Enum, Enum = Enum::MaxGeometryInputComponents> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxGeometryInputComponents value.
/** Instances of the @c smart_enums::MaxGeometryInputComponents type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxGeometryInputComponents value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxGeometryInputComponents);

/// Non-equality comparison with any @p Enum type having the MaxGeometryInputComponents value.
/** Instances of the @c smart_enums::MaxGeometryInputComponents type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxGeometryInputComponents value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxGeometryInputComponents);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxGeometryOutputComponents value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_GEOMETRY_OUTPUT_COMPONENTS}
 *
 *  @ingroup smart_enums
 */
struct MaxGeometryOutputComponents {

/// Conversion to any @p Enum type having the MaxGeometryOutputComponents value.
/** Instances of the @ref oglplus::smart_enums::MaxGeometryOutputComponents "MaxGeometryOutputComponents"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxGeometryOutputComponents value.
 */
template <typename Enum, Enum = Enum::MaxGeometryOutputComponents> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxGeometryOutputComponents value.
/** Instances of the @c smart_enums::MaxGeometryOutputComponents type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxGeometryOutputComponents value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxGeometryOutputComponents);

/// Non-equality comparison with any @p Enum type having the MaxGeometryOutputComponents value.
/** Instances of the @c smart_enums::MaxGeometryOutputComponents type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxGeometryOutputComponents value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxGeometryOutputComponents);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxGeometryOutputVertices value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_GEOMETRY_OUTPUT_VERTICES}
 *
 *  @ingroup smart_enums
 */
struct MaxGeometryOutputVertices {

/// Conversion to any @p Enum type having the MaxGeometryOutputVertices value.
/** Instances of the @ref oglplus::smart_enums::MaxGeometryOutputVertices "MaxGeometryOutputVertices"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxGeometryOutputVertices value.
 */
template <typename Enum, Enum = Enum::MaxGeometryOutputVertices> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxGeometryOutputVertices value.
/** Instances of the @c smart_enums::MaxGeometryOutputVertices type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxGeometryOutputVertices value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxGeometryOutputVertices);

/// Non-equality comparison with any @p Enum type having the MaxGeometryOutputVertices value.
/** Instances of the @c smart_enums::MaxGeometryOutputVertices type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxGeometryOutputVertices value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxGeometryOutputVertices);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxGeometryShaderInvocations value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_GEOMETRY_SHADER_INVOCATIONS}
 *
 *  @ingroup smart_enums
 */
struct MaxGeometryShaderInvocations {

/// Conversion to any @p Enum type having the MaxGeometryShaderInvocations value.
/** Instances of the @ref oglplus::smart_enums::MaxGeometryShaderInvocations "MaxGeometryShaderInvocations"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxGeometryShaderInvocations value.
 */
template <typename Enum, Enum = Enum::MaxGeometryShaderInvocations> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxGeometryShaderInvocations value.
/** Instances of the @c smart_enums::MaxGeometryShaderInvocations type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxGeometryShaderInvocations value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxGeometryShaderInvocations);

/// Non-equality comparison with any @p Enum type having the MaxGeometryShaderInvocations value.
/** Instances of the @c smart_enums::MaxGeometryShaderInvocations type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxGeometryShaderInvocations value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxGeometryShaderInvocations);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxGeometryTextureImageUnits value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_GEOMETRY_TEXTURE_IMAGE_UNITS}
 *
 *  @ingroup smart_enums
 */
struct MaxGeometryTextureImageUnits {

/// Conversion to any @p Enum type having the MaxGeometryTextureImageUnits value.
/** Instances of the @ref oglplus::smart_enums::MaxGeometryTextureImageUnits "MaxGeometryTextureImageUnits"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxGeometryTextureImageUnits value.
 */
template <typename Enum, Enum = Enum::MaxGeometryTextureImageUnits> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxGeometryTextureImageUnits value.
/** Instances of the @c smart_enums::MaxGeometryTextureImageUnits type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxGeometryTextureImageUnits value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxGeometryTextureImageUnits);

/// Non-equality comparison with any @p Enum type having the MaxGeometryTextureImageUnits value.
/** Instances of the @c smart_enums::MaxGeometryTextureImageUnits type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxGeometryTextureImageUnits value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxGeometryTextureImageUnits);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxGeometryTotalOutputComponents value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS}
 *
 *  @ingroup smart_enums
 */
struct MaxGeometryTotalOutputComponents {

/// Conversion to any @p Enum type having the MaxGeometryTotalOutputComponents value.
/** Instances of the @ref oglplus::smart_enums::MaxGeometryTotalOutputComponents "MaxGeometryTotalOutputComponents"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxGeometryTotalOutputComponents value.
 */
template <typename Enum, Enum = Enum::MaxGeometryTotalOutputComponents> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxGeometryTotalOutputComponents value.
/** Instances of the @c smart_enums::MaxGeometryTotalOutputComponents type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxGeometryTotalOutputComponents value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxGeometryTotalOutputComponents);

/// Non-equality comparison with any @p Enum type having the MaxGeometryTotalOutputComponents value.
/** Instances of the @c smart_enums::MaxGeometryTotalOutputComponents type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxGeometryTotalOutputComponents value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxGeometryTotalOutputComponents);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxGeometryUniformBlocks value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_GEOMETRY_UNIFORM_BLOCKS}
 *
 *  @ingroup smart_enums
 */
struct MaxGeometryUniformBlocks {

/// Conversion to any @p Enum type having the MaxGeometryUniformBlocks value.
/** Instances of the @ref oglplus::smart_enums::MaxGeometryUniformBlocks "MaxGeometryUniformBlocks"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxGeometryUniformBlocks value.
 */
template <typename Enum, Enum = Enum::MaxGeometryUniformBlocks> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxGeometryUniformBlocks value.
/** Instances of the @c smart_enums::MaxGeometryUniformBlocks type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxGeometryUniformBlocks value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxGeometryUniformBlocks);

/// Non-equality comparison with any @p Enum type having the MaxGeometryUniformBlocks value.
/** Instances of the @c smart_enums::MaxGeometryUniformBlocks type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxGeometryUniformBlocks value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxGeometryUniformBlocks);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxGeometryUniformComponents value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_GEOMETRY_UNIFORM_COMPONENTS}
 *
 *  @ingroup smart_enums
 */
struct MaxGeometryUniformComponents {

/// Conversion to any @p Enum type having the MaxGeometryUniformComponents value.
/** Instances of the @ref oglplus::smart_enums::MaxGeometryUniformComponents "MaxGeometryUniformComponents"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxGeometryUniformComponents value.
 */
template <typename Enum, Enum = Enum::MaxGeometryUniformComponents> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxGeometryUniformComponents value.
/** Instances of the @c smart_enums::MaxGeometryUniformComponents type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxGeometryUniformComponents value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxGeometryUniformComponents);

/// Non-equality comparison with any @p Enum type having the MaxGeometryUniformComponents value.
/** Instances of the @c smart_enums::MaxGeometryUniformComponents type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxGeometryUniformComponents value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxGeometryUniformComponents);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxImageSamples value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_IMAGE_SAMPLES}
 *
 *  @ingroup smart_enums
 */
struct MaxImageSamples {

/// Conversion to any @p Enum type having the MaxImageSamples value.
/** Instances of the @ref oglplus::smart_enums::MaxImageSamples "MaxImageSamples"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxImageSamples value.
 */
template <typename Enum, Enum = Enum::MaxImageSamples> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxImageSamples value.
/** Instances of the @c smart_enums::MaxImageSamples type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxImageSamples value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxImageSamples);

/// Non-equality comparison with any @p Enum type having the MaxImageSamples value.
/** Instances of the @c smart_enums::MaxImageSamples type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxImageSamples value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxImageSamples);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxImageUnits value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_IMAGE_UNITS}
 *
 *  @ingroup smart_enums
 */
struct MaxImageUnits {

/// Conversion to any @p Enum type having the MaxImageUnits value.
/** Instances of the @ref oglplus::smart_enums::MaxImageUnits "MaxImageUnits"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxImageUnits value.
 */
template <typename Enum, Enum = Enum::MaxImageUnits> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxImageUnits value.
/** Instances of the @c smart_enums::MaxImageUnits type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxImageUnits value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxImageUnits);

/// Non-equality comparison with any @p Enum type having the MaxImageUnits value.
/** Instances of the @c smart_enums::MaxImageUnits type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxImageUnits value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxImageUnits);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxIntegerSamples value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_INTEGER_SAMPLES}
 *
 *  @ingroup smart_enums
 */
struct MaxIntegerSamples {

/// Conversion to any @p Enum type having the MaxIntegerSamples value.
/** Instances of the @ref oglplus::smart_enums::MaxIntegerSamples "MaxIntegerSamples"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxIntegerSamples value.
 */
template <typename Enum, Enum = Enum::MaxIntegerSamples> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxIntegerSamples value.
/** Instances of the @c smart_enums::MaxIntegerSamples type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxIntegerSamples value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxIntegerSamples);

/// Non-equality comparison with any @p Enum type having the MaxIntegerSamples value.
/** Instances of the @c smart_enums::MaxIntegerSamples type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxIntegerSamples value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxIntegerSamples);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxPatchVertices value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_PATCH_VERTICES}
 *
 *  @ingroup smart_enums
 */
struct MaxPatchVertices {

/// Conversion to any @p Enum type having the MaxPatchVertices value.
/** Instances of the @ref oglplus::smart_enums::MaxPatchVertices "MaxPatchVertices"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxPatchVertices value.
 */
template <typename Enum, Enum = Enum::MaxPatchVertices> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxPatchVertices value.
/** Instances of the @c smart_enums::MaxPatchVertices type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxPatchVertices value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxPatchVertices);

/// Non-equality comparison with any @p Enum type having the MaxPatchVertices value.
/** Instances of the @c smart_enums::MaxPatchVertices type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxPatchVertices value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxPatchVertices);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxProgramTexelOffset value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_PROGRAM_TEXEL_OFFSET}
 *
 *  @ingroup smart_enums
 */
struct MaxProgramTexelOffset {

/// Conversion to any @p Enum type having the MaxProgramTexelOffset value.
/** Instances of the @ref oglplus::smart_enums::MaxProgramTexelOffset "MaxProgramTexelOffset"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxProgramTexelOffset value.
 */
template <typename Enum, Enum = Enum::MaxProgramTexelOffset> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxProgramTexelOffset value.
/** Instances of the @c smart_enums::MaxProgramTexelOffset type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxProgramTexelOffset value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxProgramTexelOffset);

/// Non-equality comparison with any @p Enum type having the MaxProgramTexelOffset value.
/** Instances of the @c smart_enums::MaxProgramTexelOffset type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxProgramTexelOffset value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxProgramTexelOffset);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxProgramTextureGatherOffset value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_PROGRAM_TEXTURE_GATHER_OFFSET}
 *
 *  @ingroup smart_enums
 */
struct MaxProgramTextureGatherOffset {

/// Conversion to any @p Enum type having the MaxProgramTextureGatherOffset value.
/** Instances of the @ref oglplus::smart_enums::MaxProgramTextureGatherOffset "MaxProgramTextureGatherOffset"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxProgramTextureGatherOffset value.
 */
template <typename Enum, Enum = Enum::MaxProgramTextureGatherOffset> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxProgramTextureGatherOffset value.
/** Instances of the @c smart_enums::MaxProgramTextureGatherOffset type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxProgramTextureGatherOffset value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxProgramTextureGatherOffset);

/// Non-equality comparison with any @p Enum type having the MaxProgramTextureGatherOffset value.
/** Instances of the @c smart_enums::MaxProgramTextureGatherOffset type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxProgramTextureGatherOffset value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxProgramTextureGatherOffset);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxRectangleTextureSize value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_RECTANGLE_TEXTURE_SIZE}
 *
 *  @ingroup smart_enums
 */
struct MaxRectangleTextureSize {

/// Conversion to any @p Enum type having the MaxRectangleTextureSize value.
/** Instances of the @ref oglplus::smart_enums::MaxRectangleTextureSize "MaxRectangleTextureSize"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxRectangleTextureSize value.
 */
template <typename Enum, Enum = Enum::MaxRectangleTextureSize> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxRectangleTextureSize value.
/** Instances of the @c smart_enums::MaxRectangleTextureSize type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxRectangleTextureSize value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxRectangleTextureSize);

/// Non-equality comparison with any @p Enum type having the MaxRectangleTextureSize value.
/** Instances of the @c smart_enums::MaxRectangleTextureSize type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxRectangleTextureSize value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxRectangleTextureSize);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxRenderbufferSize value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_RENDERBUFFER_SIZE}
 *
 *  @ingroup smart_enums
 */
struct MaxRenderbufferSize {

/// Conversion to any @p Enum type having the MaxRenderbufferSize value.
/** Instances of the @ref oglplus::smart_enums::MaxRenderbufferSize "MaxRenderbufferSize"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxRenderbufferSize value.
 */
template <typename Enum, Enum = Enum::MaxRenderbufferSize> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxRenderbufferSize value.
/** Instances of the @c smart_enums::MaxRenderbufferSize type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxRenderbufferSize value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxRenderbufferSize);

/// Non-equality comparison with any @p Enum type having the MaxRenderbufferSize value.
/** Instances of the @c smart_enums::MaxRenderbufferSize type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxRenderbufferSize value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxRenderbufferSize);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxSampleMaskWords value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_SAMPLE_MASK_WORDS}
 *
 *  @ingroup smart_enums
 */
struct MaxSampleMaskWords {

/// Conversion to any @p Enum type having the MaxSampleMaskWords value.
/** Instances of the @ref oglplus::smart_enums::MaxSampleMaskWords "MaxSampleMaskWords"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxSampleMaskWords value.
 */
template <typename Enum, Enum = Enum::MaxSampleMaskWords> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxSampleMaskWords value.
/** Instances of the @c smart_enums::MaxSampleMaskWords type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxSampleMaskWords value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxSampleMaskWords);

/// Non-equality comparison with any @p Enum type having the MaxSampleMaskWords value.
/** Instances of the @c smart_enums::MaxSampleMaskWords type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxSampleMaskWords value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxSampleMaskWords);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxSamples value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_SAMPLES}
 *
 *  @ingroup smart_enums
 */
struct MaxSamples {

/// Conversion to any @p Enum type having the MaxSamples value.
/** Instances of the @ref oglplus::smart_enums::MaxSamples "MaxSamples"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxSamples value.
 */
template <typename Enum, Enum = Enum::MaxSamples> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxSamples value.
/** Instances of the @c smart_enums::MaxSamples type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxSamples value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxSamples);

/// Non-equality comparison with any @p Enum type having the MaxSamples value.
/** Instances of the @c smart_enums::MaxSamples type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxSamples value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxSamples);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxServerWaitTimeout value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_SERVER_WAIT_TIMEOUT}
 *
 *  @ingroup smart_enums
 */
struct MaxServerWaitTimeout {

/// Conversion to any @p Enum type having the MaxServerWaitTimeout value.
/** Instances of the @ref oglplus::smart_enums::MaxServerWaitTimeout "MaxServerWaitTimeout"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxServerWaitTimeout value.
 */
template <typename Enum, Enum = Enum::MaxServerWaitTimeout> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxServerWaitTimeout value.
/** Instances of the @c smart_enums::MaxServerWaitTimeout type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxServerWaitTimeout value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxServerWaitTimeout);

/// Non-equality comparison with any @p Enum type having the MaxServerWaitTimeout value.
/** Instances of the @c smart_enums::MaxServerWaitTimeout type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxServerWaitTimeout value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxServerWaitTimeout);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxSubroutines value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_SUBROUTINES}
 *
 *  @ingroup smart_enums
 */
struct MaxSubroutines {

/// Conversion to any @p Enum type having the MaxSubroutines value.
/** Instances of the @ref oglplus::smart_enums::MaxSubroutines "MaxSubroutines"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxSubroutines value.
 */
template <typename Enum, Enum = Enum::MaxSubroutines> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxSubroutines value.
/** Instances of the @c smart_enums::MaxSubroutines type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxSubroutines value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxSubroutines);

/// Non-equality comparison with any @p Enum type having the MaxSubroutines value.
/** Instances of the @c smart_enums::MaxSubroutines type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxSubroutines value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxSubroutines);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxSubroutineUniformLocations value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_SUBROUTINE_UNIFORM_LOCATIONS}
 *
 *  @ingroup smart_enums
 */
struct MaxSubroutineUniformLocations {

/// Conversion to any @p Enum type having the MaxSubroutineUniformLocations value.
/** Instances of the @ref oglplus::smart_enums::MaxSubroutineUniformLocations "MaxSubroutineUniformLocations"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxSubroutineUniformLocations value.
 */
template <typename Enum, Enum = Enum::MaxSubroutineUniformLocations> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxSubroutineUniformLocations value.
/** Instances of the @c smart_enums::MaxSubroutineUniformLocations type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxSubroutineUniformLocations value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxSubroutineUniformLocations);

/// Non-equality comparison with any @p Enum type having the MaxSubroutineUniformLocations value.
/** Instances of the @c smart_enums::MaxSubroutineUniformLocations type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxSubroutineUniformLocations value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxSubroutineUniformLocations);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxTessControlAtomicCounterBuffers value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS}
 *
 *  @ingroup smart_enums
 */
struct MaxTessControlAtomicCounterBuffers {

/// Conversion to any @p Enum type having the MaxTessControlAtomicCounterBuffers value.
/** Instances of the @ref oglplus::smart_enums::MaxTessControlAtomicCounterBuffers "MaxTessControlAtomicCounterBuffers"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxTessControlAtomicCounterBuffers value.
 */
template <typename Enum, Enum = Enum::MaxTessControlAtomicCounterBuffers> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxTessControlAtomicCounterBuffers value.
/** Instances of the @c smart_enums::MaxTessControlAtomicCounterBuffers type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxTessControlAtomicCounterBuffers value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxTessControlAtomicCounterBuffers);

/// Non-equality comparison with any @p Enum type having the MaxTessControlAtomicCounterBuffers value.
/** Instances of the @c smart_enums::MaxTessControlAtomicCounterBuffers type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxTessControlAtomicCounterBuffers value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxTessControlAtomicCounterBuffers);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxTessControlAtomicCounters value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_TESS_CONTROL_ATOMIC_COUNTERS}
 *
 *  @ingroup smart_enums
 */
struct MaxTessControlAtomicCounters {

/// Conversion to any @p Enum type having the MaxTessControlAtomicCounters value.
/** Instances of the @ref oglplus::smart_enums::MaxTessControlAtomicCounters "MaxTessControlAtomicCounters"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxTessControlAtomicCounters value.
 */
template <typename Enum, Enum = Enum::MaxTessControlAtomicCounters> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxTessControlAtomicCounters value.
/** Instances of the @c smart_enums::MaxTessControlAtomicCounters type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxTessControlAtomicCounters value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxTessControlAtomicCounters);

/// Non-equality comparison with any @p Enum type having the MaxTessControlAtomicCounters value.
/** Instances of the @c smart_enums::MaxTessControlAtomicCounters type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxTessControlAtomicCounters value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxTessControlAtomicCounters);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxTessControlImageUniforms value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_TESS_CONTROL_IMAGE_UNIFORMS}
 *
 *  @ingroup smart_enums
 */
struct MaxTessControlImageUniforms {

/// Conversion to any @p Enum type having the MaxTessControlImageUniforms value.
/** Instances of the @ref oglplus::smart_enums::MaxTessControlImageUniforms "MaxTessControlImageUniforms"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxTessControlImageUniforms value.
 */
template <typename Enum, Enum = Enum::MaxTessControlImageUniforms> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxTessControlImageUniforms value.
/** Instances of the @c smart_enums::MaxTessControlImageUniforms type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxTessControlImageUniforms value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxTessControlImageUniforms);

/// Non-equality comparison with any @p Enum type having the MaxTessControlImageUniforms value.
/** Instances of the @c smart_enums::MaxTessControlImageUniforms type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxTessControlImageUniforms value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxTessControlImageUniforms);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxTessControlInputComponents value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_TESS_CONTROL_INPUT_COMPONENTS}
 *
 *  @ingroup smart_enums
 */
struct MaxTessControlInputComponents {

/// Conversion to any @p Enum type having the MaxTessControlInputComponents value.
/** Instances of the @ref oglplus::smart_enums::MaxTessControlInputComponents "MaxTessControlInputComponents"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxTessControlInputComponents value.
 */
template <typename Enum, Enum = Enum::MaxTessControlInputComponents> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxTessControlInputComponents value.
/** Instances of the @c smart_enums::MaxTessControlInputComponents type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxTessControlInputComponents value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxTessControlInputComponents);

/// Non-equality comparison with any @p Enum type having the MaxTessControlInputComponents value.
/** Instances of the @c smart_enums::MaxTessControlInputComponents type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxTessControlInputComponents value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxTessControlInputComponents);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxTessControlOutputComponents value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_TESS_CONTROL_OUTPUT_COMPONENTS}
 *
 *  @ingroup smart_enums
 */
struct MaxTessControlOutputComponents {

/// Conversion to any @p Enum type having the MaxTessControlOutputComponents value.
/** Instances of the @ref oglplus::smart_enums::MaxTessControlOutputComponents "MaxTessControlOutputComponents"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxTessControlOutputComponents value.
 */
template <typename Enum, Enum = Enum::MaxTessControlOutputComponents> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxTessControlOutputComponents value.
/** Instances of the @c smart_enums::MaxTessControlOutputComponents type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxTessControlOutputComponents value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxTessControlOutputComponents);

/// Non-equality comparison with any @p Enum type having the MaxTessControlOutputComponents value.
/** Instances of the @c smart_enums::MaxTessControlOutputComponents type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxTessControlOutputComponents value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxTessControlOutputComponents);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxTessControlTextureImageUnits value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS}
 *
 *  @ingroup smart_enums
 */
struct MaxTessControlTextureImageUnits {

/// Conversion to any @p Enum type having the MaxTessControlTextureImageUnits value.
/** Instances of the @ref oglplus::smart_enums::MaxTessControlTextureImageUnits "MaxTessControlTextureImageUnits"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxTessControlTextureImageUnits value.
 */
template <typename Enum, Enum = Enum::MaxTessControlTextureImageUnits> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxTessControlTextureImageUnits value.
/** Instances of the @c smart_enums::MaxTessControlTextureImageUnits type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxTessControlTextureImageUnits value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxTessControlTextureImageUnits);

/// Non-equality comparison with any @p Enum type having the MaxTessControlTextureImageUnits value.
/** Instances of the @c smart_enums::MaxTessControlTextureImageUnits type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxTessControlTextureImageUnits value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxTessControlTextureImageUnits);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxTessControlTotalOutputComponents value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS}
 *
 *  @ingroup smart_enums
 */
struct MaxTessControlTotalOutputComponents {

/// Conversion to any @p Enum type having the MaxTessControlTotalOutputComponents value.
/** Instances of the @ref oglplus::smart_enums::MaxTessControlTotalOutputComponents "MaxTessControlTotalOutputComponents"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxTessControlTotalOutputComponents value.
 */
template <typename Enum, Enum = Enum::MaxTessControlTotalOutputComponents> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxTessControlTotalOutputComponents value.
/** Instances of the @c smart_enums::MaxTessControlTotalOutputComponents type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxTessControlTotalOutputComponents value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxTessControlTotalOutputComponents);

/// Non-equality comparison with any @p Enum type having the MaxTessControlTotalOutputComponents value.
/** Instances of the @c smart_enums::MaxTessControlTotalOutputComponents type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxTessControlTotalOutputComponents value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxTessControlTotalOutputComponents);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxTessControlUniformBlocks value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_TESS_CONTROL_UNIFORM_BLOCKS}
 *
 *  @ingroup smart_enums
 */
struct MaxTessControlUniformBlocks {

/// Conversion to any @p Enum type having the MaxTessControlUniformBlocks value.
/** Instances of the @ref oglplus::smart_enums::MaxTessControlUniformBlocks "MaxTessControlUniformBlocks"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxTessControlUniformBlocks value.
 */
template <typename Enum, Enum = Enum::MaxTessControlUniformBlocks> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxTessControlUniformBlocks value.
/** Instances of the @c smart_enums::MaxTessControlUniformBlocks type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxTessControlUniformBlocks value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxTessControlUniformBlocks);

/// Non-equality comparison with any @p Enum type having the MaxTessControlUniformBlocks value.
/** Instances of the @c smart_enums::MaxTessControlUniformBlocks type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxTessControlUniformBlocks value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxTessControlUniformBlocks);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxTessControlUniformComponents value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_TESS_CONTROL_UNIFORM_COMPONENTS}
 *
 *  @ingroup smart_enums
 */
struct MaxTessControlUniformComponents {

/// Conversion to any @p Enum type having the MaxTessControlUniformComponents value.
/** Instances of the @ref oglplus::smart_enums::MaxTessControlUniformComponents "MaxTessControlUniformComponents"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxTessControlUniformComponents value.
 */
template <typename Enum, Enum = Enum::MaxTessControlUniformComponents> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxTessControlUniformComponents value.
/** Instances of the @c smart_enums::MaxTessControlUniformComponents type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxTessControlUniformComponents value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxTessControlUniformComponents);

/// Non-equality comparison with any @p Enum type having the MaxTessControlUniformComponents value.
/** Instances of the @c smart_enums::MaxTessControlUniformComponents type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxTessControlUniformComponents value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxTessControlUniformComponents);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxTessEvaluationAtomicCounterBuffers value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS}
 *
 *  @ingroup smart_enums
 */
struct MaxTessEvaluationAtomicCounterBuffers {

/// Conversion to any @p Enum type having the MaxTessEvaluationAtomicCounterBuffers value.
/** Instances of the @ref oglplus::smart_enums::MaxTessEvaluationAtomicCounterBuffers "MaxTessEvaluationAtomicCounterBuffers"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxTessEvaluationAtomicCounterBuffers value.
 */
template <typename Enum, Enum = Enum::MaxTessEvaluationAtomicCounterBuffers> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxTessEvaluationAtomicCounterBuffers value.
/** Instances of the @c smart_enums::MaxTessEvaluationAtomicCounterBuffers type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxTessEvaluationAtomicCounterBuffers value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxTessEvaluationAtomicCounterBuffers);

/// Non-equality comparison with any @p Enum type having the MaxTessEvaluationAtomicCounterBuffers value.
/** Instances of the @c smart_enums::MaxTessEvaluationAtomicCounterBuffers type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxTessEvaluationAtomicCounterBuffers value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxTessEvaluationAtomicCounterBuffers);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxTessEvaluationAtomicCounters value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_TESS_EVALUATION_ATOMIC_COUNTERS}
 *
 *  @ingroup smart_enums
 */
struct MaxTessEvaluationAtomicCounters {

/// Conversion to any @p Enum type having the MaxTessEvaluationAtomicCounters value.
/** Instances of the @ref oglplus::smart_enums::MaxTessEvaluationAtomicCounters "MaxTessEvaluationAtomicCounters"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxTessEvaluationAtomicCounters value.
 */
template <typename Enum, Enum = Enum::MaxTessEvaluationAtomicCounters> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxTessEvaluationAtomicCounters value.
/** Instances of the @c smart_enums::MaxTessEvaluationAtomicCounters type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxTessEvaluationAtomicCounters value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxTessEvaluationAtomicCounters);

/// Non-equality comparison with any @p Enum type having the MaxTessEvaluationAtomicCounters value.
/** Instances of the @c smart_enums::MaxTessEvaluationAtomicCounters type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxTessEvaluationAtomicCounters value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxTessEvaluationAtomicCounters);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxTessEvaluationImageUniforms value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_TESS_EVALUATION_IMAGE_UNIFORMS}
 *
 *  @ingroup smart_enums
 */
struct MaxTessEvaluationImageUniforms {

/// Conversion to any @p Enum type having the MaxTessEvaluationImageUniforms value.
/** Instances of the @ref oglplus::smart_enums::MaxTessEvaluationImageUniforms "MaxTessEvaluationImageUniforms"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxTessEvaluationImageUniforms value.
 */
template <typename Enum, Enum = Enum::MaxTessEvaluationImageUniforms> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxTessEvaluationImageUniforms value.
/** Instances of the @c smart_enums::MaxTessEvaluationImageUniforms type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxTessEvaluationImageUniforms value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxTessEvaluationImageUniforms);

/// Non-equality comparison with any @p Enum type having the MaxTessEvaluationImageUniforms value.
/** Instances of the @c smart_enums::MaxTessEvaluationImageUniforms type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxTessEvaluationImageUniforms value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxTessEvaluationImageUniforms);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxTessEvaluationInputComponents value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_TESS_EVALUATION_INPUT_COMPONENTS}
 *
 *  @ingroup smart_enums
 */
struct MaxTessEvaluationInputComponents {

/// Conversion to any @p Enum type having the MaxTessEvaluationInputComponents value.
/** Instances of the @ref oglplus::smart_enums::MaxTessEvaluationInputComponents "MaxTessEvaluationInputComponents"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxTessEvaluationInputComponents value.
 */
template <typename Enum, Enum = Enum::MaxTessEvaluationInputComponents> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxTessEvaluationInputComponents value.
/** Instances of the @c smart_enums::MaxTessEvaluationInputComponents type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxTessEvaluationInputComponents value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxTessEvaluationInputComponents);

/// Non-equality comparison with any @p Enum type having the MaxTessEvaluationInputComponents value.
/** Instances of the @c smart_enums::MaxTessEvaluationInputComponents type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxTessEvaluationInputComponents value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxTessEvaluationInputComponents);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxTessEvaluationOutputComponents value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_TESS_EVALUATION_OUTPUT_COMPONENTS}
 *
 *  @ingroup smart_enums
 */
struct MaxTessEvaluationOutputComponents {

/// Conversion to any @p Enum type having the MaxTessEvaluationOutputComponents value.
/** Instances of the @ref oglplus::smart_enums::MaxTessEvaluationOutputComponents "MaxTessEvaluationOutputComponents"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxTessEvaluationOutputComponents value.
 */
template <typename Enum, Enum = Enum::MaxTessEvaluationOutputComponents> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxTessEvaluationOutputComponents value.
/** Instances of the @c smart_enums::MaxTessEvaluationOutputComponents type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxTessEvaluationOutputComponents value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxTessEvaluationOutputComponents);

/// Non-equality comparison with any @p Enum type having the MaxTessEvaluationOutputComponents value.
/** Instances of the @c smart_enums::MaxTessEvaluationOutputComponents type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxTessEvaluationOutputComponents value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxTessEvaluationOutputComponents);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxTessEvaluationTextureImageUnits value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS}
 *
 *  @ingroup smart_enums
 */
struct MaxTessEvaluationTextureImageUnits {

/// Conversion to any @p Enum type having the MaxTessEvaluationTextureImageUnits value.
/** Instances of the @ref oglplus::smart_enums::MaxTessEvaluationTextureImageUnits "MaxTessEvaluationTextureImageUnits"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxTessEvaluationTextureImageUnits value.
 */
template <typename Enum, Enum = Enum::MaxTessEvaluationTextureImageUnits> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxTessEvaluationTextureImageUnits value.
/** Instances of the @c smart_enums::MaxTessEvaluationTextureImageUnits type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxTessEvaluationTextureImageUnits value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxTessEvaluationTextureImageUnits);

/// Non-equality comparison with any @p Enum type having the MaxTessEvaluationTextureImageUnits value.
/** Instances of the @c smart_enums::MaxTessEvaluationTextureImageUnits type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxTessEvaluationTextureImageUnits value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxTessEvaluationTextureImageUnits);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxTessEvaluationUniformBlocks value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_TESS_EVALUATION_UNIFORM_BLOCKS}
 *
 *  @ingroup smart_enums
 */
struct MaxTessEvaluationUniformBlocks {

/// Conversion to any @p Enum type having the MaxTessEvaluationUniformBlocks value.
/** Instances of the @ref oglplus::smart_enums::MaxTessEvaluationUniformBlocks "MaxTessEvaluationUniformBlocks"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxTessEvaluationUniformBlocks value.
 */
template <typename Enum, Enum = Enum::MaxTessEvaluationUniformBlocks> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxTessEvaluationUniformBlocks value.
/** Instances of the @c smart_enums::MaxTessEvaluationUniformBlocks type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxTessEvaluationUniformBlocks value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxTessEvaluationUniformBlocks);

/// Non-equality comparison with any @p Enum type having the MaxTessEvaluationUniformBlocks value.
/** Instances of the @c smart_enums::MaxTessEvaluationUniformBlocks type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxTessEvaluationUniformBlocks value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxTessEvaluationUniformBlocks);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxTessEvaluationUniformComponents value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_TESS_EVALUATION_UNIFORM_COMPONENTS}
 *
 *  @ingroup smart_enums
 */
struct MaxTessEvaluationUniformComponents {

/// Conversion to any @p Enum type having the MaxTessEvaluationUniformComponents value.
/** Instances of the @ref oglplus::smart_enums::MaxTessEvaluationUniformComponents "MaxTessEvaluationUniformComponents"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxTessEvaluationUniformComponents value.
 */
template <typename Enum, Enum = Enum::MaxTessEvaluationUniformComponents> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxTessEvaluationUniformComponents value.
/** Instances of the @c smart_enums::MaxTessEvaluationUniformComponents type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxTessEvaluationUniformComponents value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxTessEvaluationUniformComponents);

/// Non-equality comparison with any @p Enum type having the MaxTessEvaluationUniformComponents value.
/** Instances of the @c smart_enums::MaxTessEvaluationUniformComponents type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxTessEvaluationUniformComponents value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxTessEvaluationUniformComponents);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxTessGenLevel value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_TESS_GEN_LEVEL}
 *
 *  @ingroup smart_enums
 */
struct MaxTessGenLevel {

/// Conversion to any @p Enum type having the MaxTessGenLevel value.
/** Instances of the @ref oglplus::smart_enums::MaxTessGenLevel "MaxTessGenLevel"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxTessGenLevel value.
 */
template <typename Enum, Enum = Enum::MaxTessGenLevel> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxTessGenLevel value.
/** Instances of the @c smart_enums::MaxTessGenLevel type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxTessGenLevel value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxTessGenLevel);

/// Non-equality comparison with any @p Enum type having the MaxTessGenLevel value.
/** Instances of the @c smart_enums::MaxTessGenLevel type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxTessGenLevel value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxTessGenLevel);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxTessPatchComponents value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_TESS_PATCH_COMPONENTS}
 *
 *  @ingroup smart_enums
 */
struct MaxTessPatchComponents {

/// Conversion to any @p Enum type having the MaxTessPatchComponents value.
/** Instances of the @ref oglplus::smart_enums::MaxTessPatchComponents "MaxTessPatchComponents"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxTessPatchComponents value.
 */
template <typename Enum, Enum = Enum::MaxTessPatchComponents> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxTessPatchComponents value.
/** Instances of the @c smart_enums::MaxTessPatchComponents type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxTessPatchComponents value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxTessPatchComponents);

/// Non-equality comparison with any @p Enum type having the MaxTessPatchComponents value.
/** Instances of the @c smart_enums::MaxTessPatchComponents type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxTessPatchComponents value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxTessPatchComponents);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxTextureBufferSize value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_TEXTURE_BUFFER_SIZE}
 *
 *  @ingroup smart_enums
 */
struct MaxTextureBufferSize {

/// Conversion to any @p Enum type having the MaxTextureBufferSize value.
/** Instances of the @ref oglplus::smart_enums::MaxTextureBufferSize "MaxTextureBufferSize"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxTextureBufferSize value.
 */
template <typename Enum, Enum = Enum::MaxTextureBufferSize> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxTextureBufferSize value.
/** Instances of the @c smart_enums::MaxTextureBufferSize type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxTextureBufferSize value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxTextureBufferSize);

/// Non-equality comparison with any @p Enum type having the MaxTextureBufferSize value.
/** Instances of the @c smart_enums::MaxTextureBufferSize type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxTextureBufferSize value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxTextureBufferSize);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxTextureImageUnits value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_TEXTURE_IMAGE_UNITS}
 *
 *  @ingroup smart_enums
 */
struct MaxTextureImageUnits {

/// Conversion to any @p Enum type having the MaxTextureImageUnits value.
/** Instances of the @ref oglplus::smart_enums::MaxTextureImageUnits "MaxTextureImageUnits"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxTextureImageUnits value.
 */
template <typename Enum, Enum = Enum::MaxTextureImageUnits> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxTextureImageUnits value.
/** Instances of the @c smart_enums::MaxTextureImageUnits type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxTextureImageUnits value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxTextureImageUnits);

/// Non-equality comparison with any @p Enum type having the MaxTextureImageUnits value.
/** Instances of the @c smart_enums::MaxTextureImageUnits type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxTextureImageUnits value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxTextureImageUnits);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxTextureLodBias value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_TEXTURE_LOD_BIAS}
 *
 *  @ingroup smart_enums
 */
struct MaxTextureLodBias {

/// Conversion to any @p Enum type having the MaxTextureLodBias value.
/** Instances of the @ref oglplus::smart_enums::MaxTextureLodBias "MaxTextureLodBias"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxTextureLodBias value.
 */
template <typename Enum, Enum = Enum::MaxTextureLodBias> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxTextureLodBias value.
/** Instances of the @c smart_enums::MaxTextureLodBias type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxTextureLodBias value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxTextureLodBias);

/// Non-equality comparison with any @p Enum type having the MaxTextureLodBias value.
/** Instances of the @c smart_enums::MaxTextureLodBias type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxTextureLodBias value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxTextureLodBias);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxTextureSize value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_TEXTURE_SIZE}
 *
 *  @ingroup smart_enums
 */
struct MaxTextureSize {

/// Conversion to any @p Enum type having the MaxTextureSize value.
/** Instances of the @ref oglplus::smart_enums::MaxTextureSize "MaxTextureSize"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxTextureSize value.
 */
template <typename Enum, Enum = Enum::MaxTextureSize> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxTextureSize value.
/** Instances of the @c smart_enums::MaxTextureSize type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxTextureSize value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxTextureSize);

/// Non-equality comparison with any @p Enum type having the MaxTextureSize value.
/** Instances of the @c smart_enums::MaxTextureSize type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxTextureSize value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxTextureSize);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxTransformFeedbackBuffers value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_TRANSFORM_FEEDBACK_BUFFERS}
 *
 *  @ingroup smart_enums
 */
struct MaxTransformFeedbackBuffers {

/// Conversion to any @p Enum type having the MaxTransformFeedbackBuffers value.
/** Instances of the @ref oglplus::smart_enums::MaxTransformFeedbackBuffers "MaxTransformFeedbackBuffers"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxTransformFeedbackBuffers value.
 */
template <typename Enum, Enum = Enum::MaxTransformFeedbackBuffers> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxTransformFeedbackBuffers value.
/** Instances of the @c smart_enums::MaxTransformFeedbackBuffers type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxTransformFeedbackBuffers value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxTransformFeedbackBuffers);

/// Non-equality comparison with any @p Enum type having the MaxTransformFeedbackBuffers value.
/** Instances of the @c smart_enums::MaxTransformFeedbackBuffers type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxTransformFeedbackBuffers value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxTransformFeedbackBuffers);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxTransformFeedbackInterleavedComponents value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS}
 *
 *  @ingroup smart_enums
 */
struct MaxTransformFeedbackInterleavedComponents {

/// Conversion to any @p Enum type having the MaxTransformFeedbackInterleavedComponents value.
/** Instances of the @ref oglplus::smart_enums::MaxTransformFeedbackInterleavedComponents "MaxTransformFeedbackInterleavedComponents"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxTransformFeedbackInterleavedComponents value.
 */
template <typename Enum, Enum = Enum::MaxTransformFeedbackInterleavedComponents> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxTransformFeedbackInterleavedComponents value.
/** Instances of the @c smart_enums::MaxTransformFeedbackInterleavedComponents type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxTransformFeedbackInterleavedComponents value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxTransformFeedbackInterleavedComponents);

/// Non-equality comparison with any @p Enum type having the MaxTransformFeedbackInterleavedComponents value.
/** Instances of the @c smart_enums::MaxTransformFeedbackInterleavedComponents type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxTransformFeedbackInterleavedComponents value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxTransformFeedbackInterleavedComponents);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxTransformFeedbackSeparateAttribs value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS}
 *
 *  @ingroup smart_enums
 */
struct MaxTransformFeedbackSeparateAttribs {

/// Conversion to any @p Enum type having the MaxTransformFeedbackSeparateAttribs value.
/** Instances of the @ref oglplus::smart_enums::MaxTransformFeedbackSeparateAttribs "MaxTransformFeedbackSeparateAttribs"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxTransformFeedbackSeparateAttribs value.
 */
template <typename Enum, Enum = Enum::MaxTransformFeedbackSeparateAttribs> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxTransformFeedbackSeparateAttribs value.
/** Instances of the @c smart_enums::MaxTransformFeedbackSeparateAttribs type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxTransformFeedbackSeparateAttribs value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxTransformFeedbackSeparateAttribs);

/// Non-equality comparison with any @p Enum type having the MaxTransformFeedbackSeparateAttribs value.
/** Instances of the @c smart_enums::MaxTransformFeedbackSeparateAttribs type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxTransformFeedbackSeparateAttribs value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxTransformFeedbackSeparateAttribs);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxTransformFeedbackSeparateComponents value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS}
 *
 *  @ingroup smart_enums
 */
struct MaxTransformFeedbackSeparateComponents {

/// Conversion to any @p Enum type having the MaxTransformFeedbackSeparateComponents value.
/** Instances of the @ref oglplus::smart_enums::MaxTransformFeedbackSeparateComponents "MaxTransformFeedbackSeparateComponents"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxTransformFeedbackSeparateComponents value.
 */
template <typename Enum, Enum = Enum::MaxTransformFeedbackSeparateComponents> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxTransformFeedbackSeparateComponents value.
/** Instances of the @c smart_enums::MaxTransformFeedbackSeparateComponents type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxTransformFeedbackSeparateComponents value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxTransformFeedbackSeparateComponents);

/// Non-equality comparison with any @p Enum type having the MaxTransformFeedbackSeparateComponents value.
/** Instances of the @c smart_enums::MaxTransformFeedbackSeparateComponents type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxTransformFeedbackSeparateComponents value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxTransformFeedbackSeparateComponents);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxUniformBlockSize value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_UNIFORM_BLOCK_SIZE}
 *
 *  @ingroup smart_enums
 */
struct MaxUniformBlockSize {

/// Conversion to any @p Enum type having the MaxUniformBlockSize value.
/** Instances of the @ref oglplus::smart_enums::MaxUniformBlockSize "MaxUniformBlockSize"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxUniformBlockSize value.
 */
template <typename Enum, Enum = Enum::MaxUniformBlockSize> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxUniformBlockSize value.
/** Instances of the @c smart_enums::MaxUniformBlockSize type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxUniformBlockSize value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxUniformBlockSize);

/// Non-equality comparison with any @p Enum type having the MaxUniformBlockSize value.
/** Instances of the @c smart_enums::MaxUniformBlockSize type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxUniformBlockSize value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxUniformBlockSize);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxUniformBufferBindings value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_UNIFORM_BUFFER_BINDINGS}
 *
 *  @ingroup smart_enums
 */
struct MaxUniformBufferBindings {

/// Conversion to any @p Enum type having the MaxUniformBufferBindings value.
/** Instances of the @ref oglplus::smart_enums::MaxUniformBufferBindings "MaxUniformBufferBindings"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxUniformBufferBindings value.
 */
template <typename Enum, Enum = Enum::MaxUniformBufferBindings> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxUniformBufferBindings value.
/** Instances of the @c smart_enums::MaxUniformBufferBindings type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxUniformBufferBindings value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxUniformBufferBindings);

/// Non-equality comparison with any @p Enum type having the MaxUniformBufferBindings value.
/** Instances of the @c smart_enums::MaxUniformBufferBindings type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxUniformBufferBindings value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxUniformBufferBindings);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxVaryingComponents value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_VARYING_COMPONENTS}
 *
 *  @ingroup smart_enums
 */
struct MaxVaryingComponents {

/// Conversion to any @p Enum type having the MaxVaryingComponents value.
/** Instances of the @ref oglplus::smart_enums::MaxVaryingComponents "MaxVaryingComponents"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxVaryingComponents value.
 */
template <typename Enum, Enum = Enum::MaxVaryingComponents> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxVaryingComponents value.
/** Instances of the @c smart_enums::MaxVaryingComponents type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxVaryingComponents value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxVaryingComponents);

/// Non-equality comparison with any @p Enum type having the MaxVaryingComponents value.
/** Instances of the @c smart_enums::MaxVaryingComponents type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxVaryingComponents value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxVaryingComponents);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxVaryingVectors value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_VARYING_VECTORS}
 *
 *  @ingroup smart_enums
 */
struct MaxVaryingVectors {

/// Conversion to any @p Enum type having the MaxVaryingVectors value.
/** Instances of the @ref oglplus::smart_enums::MaxVaryingVectors "MaxVaryingVectors"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxVaryingVectors value.
 */
template <typename Enum, Enum = Enum::MaxVaryingVectors> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxVaryingVectors value.
/** Instances of the @c smart_enums::MaxVaryingVectors type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxVaryingVectors value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxVaryingVectors);

/// Non-equality comparison with any @p Enum type having the MaxVaryingVectors value.
/** Instances of the @c smart_enums::MaxVaryingVectors type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxVaryingVectors value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxVaryingVectors);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxVertexAtomicCounterBuffers value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_VERTEX_ATOMIC_COUNTER_BUFFERS}
 *
 *  @ingroup smart_enums
 */
struct MaxVertexAtomicCounterBuffers {

/// Conversion to any @p Enum type having the MaxVertexAtomicCounterBuffers value.
/** Instances of the @ref oglplus::smart_enums::MaxVertexAtomicCounterBuffers "MaxVertexAtomicCounterBuffers"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxVertexAtomicCounterBuffers value.
 */
template <typename Enum, Enum = Enum::MaxVertexAtomicCounterBuffers> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxVertexAtomicCounterBuffers value.
/** Instances of the @c smart_enums::MaxVertexAtomicCounterBuffers type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxVertexAtomicCounterBuffers value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxVertexAtomicCounterBuffers);

/// Non-equality comparison with any @p Enum type having the MaxVertexAtomicCounterBuffers value.
/** Instances of the @c smart_enums::MaxVertexAtomicCounterBuffers type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxVertexAtomicCounterBuffers value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxVertexAtomicCounterBuffers);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxVertexAtomicCounters value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_VERTEX_ATOMIC_COUNTERS}
 *
 *  @ingroup smart_enums
 */
struct MaxVertexAtomicCounters {

/// Conversion to any @p Enum type having the MaxVertexAtomicCounters value.
/** Instances of the @ref oglplus::smart_enums::MaxVertexAtomicCounters "MaxVertexAtomicCounters"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxVertexAtomicCounters value.
 */
template <typename Enum, Enum = Enum::MaxVertexAtomicCounters> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxVertexAtomicCounters value.
/** Instances of the @c smart_enums::MaxVertexAtomicCounters type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxVertexAtomicCounters value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxVertexAtomicCounters);

/// Non-equality comparison with any @p Enum type having the MaxVertexAtomicCounters value.
/** Instances of the @c smart_enums::MaxVertexAtomicCounters type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxVertexAtomicCounters value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxVertexAtomicCounters);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxVertexAttribs value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_VERTEX_ATTRIBS}
 *
 *  @ingroup smart_enums
 */
struct MaxVertexAttribs {

/// Conversion to any @p Enum type having the MaxVertexAttribs value.
/** Instances of the @ref oglplus::smart_enums::MaxVertexAttribs "MaxVertexAttribs"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxVertexAttribs value.
 */
template <typename Enum, Enum = Enum::MaxVertexAttribs> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxVertexAttribs value.
/** Instances of the @c smart_enums::MaxVertexAttribs type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxVertexAttribs value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxVertexAttribs);

/// Non-equality comparison with any @p Enum type having the MaxVertexAttribs value.
/** Instances of the @c smart_enums::MaxVertexAttribs type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxVertexAttribs value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxVertexAttribs);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxVertexImageUniforms value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_VERTEX_IMAGE_UNIFORMS}
 *
 *  @ingroup smart_enums
 */
struct MaxVertexImageUniforms {

/// Conversion to any @p Enum type having the MaxVertexImageUniforms value.
/** Instances of the @ref oglplus::smart_enums::MaxVertexImageUniforms "MaxVertexImageUniforms"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxVertexImageUniforms value.
 */
template <typename Enum, Enum = Enum::MaxVertexImageUniforms> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxVertexImageUniforms value.
/** Instances of the @c smart_enums::MaxVertexImageUniforms type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxVertexImageUniforms value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxVertexImageUniforms);

/// Non-equality comparison with any @p Enum type having the MaxVertexImageUniforms value.
/** Instances of the @c smart_enums::MaxVertexImageUniforms type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxVertexImageUniforms value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxVertexImageUniforms);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxVertexOutputComponents value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_VERTEX_OUTPUT_COMPONENTS}
 *
 *  @ingroup smart_enums
 */
struct MaxVertexOutputComponents {

/// Conversion to any @p Enum type having the MaxVertexOutputComponents value.
/** Instances of the @ref oglplus::smart_enums::MaxVertexOutputComponents "MaxVertexOutputComponents"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxVertexOutputComponents value.
 */
template <typename Enum, Enum = Enum::MaxVertexOutputComponents> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxVertexOutputComponents value.
/** Instances of the @c smart_enums::MaxVertexOutputComponents type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxVertexOutputComponents value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxVertexOutputComponents);

/// Non-equality comparison with any @p Enum type having the MaxVertexOutputComponents value.
/** Instances of the @c smart_enums::MaxVertexOutputComponents type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxVertexOutputComponents value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxVertexOutputComponents);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxVertexStreams value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_VERTEX_STREAMS}
 *
 *  @ingroup smart_enums
 */
struct MaxVertexStreams {

/// Conversion to any @p Enum type having the MaxVertexStreams value.
/** Instances of the @ref oglplus::smart_enums::MaxVertexStreams "MaxVertexStreams"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxVertexStreams value.
 */
template <typename Enum, Enum = Enum::MaxVertexStreams> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxVertexStreams value.
/** Instances of the @c smart_enums::MaxVertexStreams type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxVertexStreams value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxVertexStreams);

/// Non-equality comparison with any @p Enum type having the MaxVertexStreams value.
/** Instances of the @c smart_enums::MaxVertexStreams type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxVertexStreams value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxVertexStreams);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxVertexTextureImageUnits value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_VERTEX_TEXTURE_IMAGE_UNITS}
 *
 *  @ingroup smart_enums
 */
struct MaxVertexTextureImageUnits {

/// Conversion to any @p Enum type having the MaxVertexTextureImageUnits value.
/** Instances of the @ref oglplus::smart_enums::MaxVertexTextureImageUnits "MaxVertexTextureImageUnits"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxVertexTextureImageUnits value.
 */
template <typename Enum, Enum = Enum::MaxVertexTextureImageUnits> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxVertexTextureImageUnits value.
/** Instances of the @c smart_enums::MaxVertexTextureImageUnits type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxVertexTextureImageUnits value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxVertexTextureImageUnits);

/// Non-equality comparison with any @p Enum type having the MaxVertexTextureImageUnits value.
/** Instances of the @c smart_enums::MaxVertexTextureImageUnits type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxVertexTextureImageUnits value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxVertexTextureImageUnits);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxVertexUniformBlocks value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_VERTEX_UNIFORM_BLOCKS}
 *
 *  @ingroup smart_enums
 */
struct MaxVertexUniformBlocks {

/// Conversion to any @p Enum type having the MaxVertexUniformBlocks value.
/** Instances of the @ref oglplus::smart_enums::MaxVertexUniformBlocks "MaxVertexUniformBlocks"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxVertexUniformBlocks value.
 */
template <typename Enum, Enum = Enum::MaxVertexUniformBlocks> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxVertexUniformBlocks value.
/** Instances of the @c smart_enums::MaxVertexUniformBlocks type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxVertexUniformBlocks value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxVertexUniformBlocks);

/// Non-equality comparison with any @p Enum type having the MaxVertexUniformBlocks value.
/** Instances of the @c smart_enums::MaxVertexUniformBlocks type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxVertexUniformBlocks value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxVertexUniformBlocks);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxVertexUniformComponents value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_VERTEX_UNIFORM_COMPONENTS}
 *
 *  @ingroup smart_enums
 */
struct MaxVertexUniformComponents {

/// Conversion to any @p Enum type having the MaxVertexUniformComponents value.
/** Instances of the @ref oglplus::smart_enums::MaxVertexUniformComponents "MaxVertexUniformComponents"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxVertexUniformComponents value.
 */
template <typename Enum, Enum = Enum::MaxVertexUniformComponents> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxVertexUniformComponents value.
/** Instances of the @c smart_enums::MaxVertexUniformComponents type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxVertexUniformComponents value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxVertexUniformComponents);

/// Non-equality comparison with any @p Enum type having the MaxVertexUniformComponents value.
/** Instances of the @c smart_enums::MaxVertexUniformComponents type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxVertexUniformComponents value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxVertexUniformComponents);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxVertexUniformVectors value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_VERTEX_UNIFORM_VECTORS}
 *
 *  @ingroup smart_enums
 */
struct MaxVertexUniformVectors {

/// Conversion to any @p Enum type having the MaxVertexUniformVectors value.
/** Instances of the @ref oglplus::smart_enums::MaxVertexUniformVectors "MaxVertexUniformVectors"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxVertexUniformVectors value.
 */
template <typename Enum, Enum = Enum::MaxVertexUniformVectors> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxVertexUniformVectors value.
/** Instances of the @c smart_enums::MaxVertexUniformVectors type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxVertexUniformVectors value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxVertexUniformVectors);

/// Non-equality comparison with any @p Enum type having the MaxVertexUniformVectors value.
/** Instances of the @c smart_enums::MaxVertexUniformVectors type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxVertexUniformVectors value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxVertexUniformVectors);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxViewportDims value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_VIEWPORT_DIMS}
 *
 *  @ingroup smart_enums
 */
struct MaxViewportDims {

/// Conversion to any @p Enum type having the MaxViewportDims value.
/** Instances of the @ref oglplus::smart_enums::MaxViewportDims "MaxViewportDims"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxViewportDims value.
 */
template <typename Enum, Enum = Enum::MaxViewportDims> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxViewportDims value.
/** Instances of the @c smart_enums::MaxViewportDims type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxViewportDims value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxViewportDims);

/// Non-equality comparison with any @p Enum type having the MaxViewportDims value.
/** Instances of the @c smart_enums::MaxViewportDims type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxViewportDims value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxViewportDims);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MaxViewports value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MAX_VIEWPORTS}
 *
 *  @ingroup smart_enums
 */
struct MaxViewports {

/// Conversion to any @p Enum type having the MaxViewports value.
/** Instances of the @ref oglplus::smart_enums::MaxViewports "MaxViewports"
 *  type are convertible to instances of any enumeration type having
 *  the @c MaxViewports value.
 */
template <typename Enum, Enum = Enum::MaxViewports> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MaxViewports value.
/** Instances of the @c smart_enums::MaxViewports type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MaxViewports value.
 */
template <typename Enum> friend bool operator==(Enum value, MaxViewports);

/// Non-equality comparison with any @p Enum type having the MaxViewports value.
/** Instances of the @c smart_enums::MaxViewports type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MaxViewports value.
 */
template <typename Enum> friend bool operator!=(Enum value, MaxViewports);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Medium value.
/**
 *  @see @ref oglplus::DebugOutputARBSeverity "DebugOutputARBSeverity"
 *  @see @ref oglplus::DebugOutputSeverity "DebugOutputSeverity"
 *  @see @ref oglplus::DebugSeverity "DebugSeverity"
 *
 *  @glsymbols
 *  @gldefref{DEBUG_SEVERITY_MEDIUM}
 *  @gldefref{DEBUG_SEVERITY_MEDIUM_ARB}
 *
 *  @ingroup smart_enums
 */
struct Medium {

/// Conversion to any @p Enum type having the Medium value.
/** Instances of the @ref oglplus::smart_enums::Medium "Medium"
 *  type are convertible to instances of any enumeration type having
 *  the @c Medium value.
 */
template <typename Enum, Enum = Enum::Medium> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Medium value.
/** Instances of the @c smart_enums::Medium type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Medium value.
 */
template <typename Enum> friend bool operator==(Enum value, Medium);

/// Non-equality comparison with any @p Enum type having the Medium value.
/** Instances of the @c smart_enums::Medium type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Medium value.
 */
template <typename Enum> friend bool operator!=(Enum value, Medium);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MediumFloat value.
/**
 *  @see @ref oglplus::PrecisionType "PrecisionType"
 *
 *  @glsymbols
 *  @gldefref{MEDIUM_FLOAT}
 *
 *  @ingroup smart_enums
 */
struct MediumFloat {

/// Conversion to any @p Enum type having the MediumFloat value.
/** Instances of the @ref oglplus::smart_enums::MediumFloat "MediumFloat"
 *  type are convertible to instances of any enumeration type having
 *  the @c MediumFloat value.
 */
template <typename Enum, Enum = Enum::MediumFloat> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MediumFloat value.
/** Instances of the @c smart_enums::MediumFloat type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MediumFloat value.
 */
template <typename Enum> friend bool operator==(Enum value, MediumFloat);

/// Non-equality comparison with any @p Enum type having the MediumFloat value.
/** Instances of the @c smart_enums::MediumFloat type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MediumFloat value.
 */
template <typename Enum> friend bool operator!=(Enum value, MediumFloat);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MediumInt value.
/**
 *  @see @ref oglplus::PrecisionType "PrecisionType"
 *
 *  @glsymbols
 *  @gldefref{MEDIUM_INT}
 *
 *  @ingroup smart_enums
 */
struct MediumInt {

/// Conversion to any @p Enum type having the MediumInt value.
/** Instances of the @ref oglplus::smart_enums::MediumInt "MediumInt"
 *  type are convertible to instances of any enumeration type having
 *  the @c MediumInt value.
 */
template <typename Enum, Enum = Enum::MediumInt> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MediumInt value.
/** Instances of the @c smart_enums::MediumInt type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MediumInt value.
 */
template <typename Enum> friend bool operator==(Enum value, MediumInt);

/// Non-equality comparison with any @p Enum type having the MediumInt value.
/** Instances of the @c smart_enums::MediumInt type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MediumInt value.
 */
template <typename Enum> friend bool operator!=(Enum value, MediumInt);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Min value.
/**
 *  @see @ref oglplus::BlendEquation "BlendEquation"
 *
 *  @glsymbols
 *  @gldefref{MIN}
 *
 *  @ingroup smart_enums
 */
struct Min {

/// Conversion to any @p Enum type having the Min value.
/** Instances of the @ref oglplus::smart_enums::Min "Min"
 *  type are convertible to instances of any enumeration type having
 *  the @c Min value.
 */
template <typename Enum, Enum = Enum::Min> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Min value.
/** Instances of the @c smart_enums::Min type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Min value.
 */
template <typename Enum> friend bool operator==(Enum value, Min);

/// Non-equality comparison with any @p Enum type having the Min value.
/** Instances of the @c smart_enums::Min type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Min value.
 */
template <typename Enum> friend bool operator!=(Enum value, Min);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MinFragmentInterpolationOffset value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MIN_FRAGMENT_INTERPOLATION_OFFSET}
 *
 *  @ingroup smart_enums
 */
struct MinFragmentInterpolationOffset {

/// Conversion to any @p Enum type having the MinFragmentInterpolationOffset value.
/** Instances of the @ref oglplus::smart_enums::MinFragmentInterpolationOffset "MinFragmentInterpolationOffset"
 *  type are convertible to instances of any enumeration type having
 *  the @c MinFragmentInterpolationOffset value.
 */
template <typename Enum, Enum = Enum::MinFragmentInterpolationOffset> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MinFragmentInterpolationOffset value.
/** Instances of the @c smart_enums::MinFragmentInterpolationOffset type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MinFragmentInterpolationOffset value.
 */
template <typename Enum> friend bool operator==(Enum value, MinFragmentInterpolationOffset);

/// Non-equality comparison with any @p Enum type having the MinFragmentInterpolationOffset value.
/** Instances of the @c smart_enums::MinFragmentInterpolationOffset type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MinFragmentInterpolationOffset value.
 */
template <typename Enum> friend bool operator!=(Enum value, MinFragmentInterpolationOffset);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MinMapBufferAlignment value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MIN_MAP_BUFFER_ALIGNMENT}
 *
 *  @ingroup smart_enums
 */
struct MinMapBufferAlignment {

/// Conversion to any @p Enum type having the MinMapBufferAlignment value.
/** Instances of the @ref oglplus::smart_enums::MinMapBufferAlignment "MinMapBufferAlignment"
 *  type are convertible to instances of any enumeration type having
 *  the @c MinMapBufferAlignment value.
 */
template <typename Enum, Enum = Enum::MinMapBufferAlignment> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MinMapBufferAlignment value.
/** Instances of the @c smart_enums::MinMapBufferAlignment type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MinMapBufferAlignment value.
 */
template <typename Enum> friend bool operator==(Enum value, MinMapBufferAlignment);

/// Non-equality comparison with any @p Enum type having the MinMapBufferAlignment value.
/** Instances of the @c smart_enums::MinMapBufferAlignment type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MinMapBufferAlignment value.
 */
template <typename Enum> friend bool operator!=(Enum value, MinMapBufferAlignment);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MinProgramTexelOffset value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MIN_PROGRAM_TEXEL_OFFSET}
 *
 *  @ingroup smart_enums
 */
struct MinProgramTexelOffset {

/// Conversion to any @p Enum type having the MinProgramTexelOffset value.
/** Instances of the @ref oglplus::smart_enums::MinProgramTexelOffset "MinProgramTexelOffset"
 *  type are convertible to instances of any enumeration type having
 *  the @c MinProgramTexelOffset value.
 */
template <typename Enum, Enum = Enum::MinProgramTexelOffset> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MinProgramTexelOffset value.
/** Instances of the @c smart_enums::MinProgramTexelOffset type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MinProgramTexelOffset value.
 */
template <typename Enum> friend bool operator==(Enum value, MinProgramTexelOffset);

/// Non-equality comparison with any @p Enum type having the MinProgramTexelOffset value.
/** Instances of the @c smart_enums::MinProgramTexelOffset type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MinProgramTexelOffset value.
 */
template <typename Enum> friend bool operator!=(Enum value, MinProgramTexelOffset);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MinProgramTextureGatherOffset value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MIN_PROGRAM_TEXTURE_GATHER_OFFSET}
 *
 *  @ingroup smart_enums
 */
struct MinProgramTextureGatherOffset {

/// Conversion to any @p Enum type having the MinProgramTextureGatherOffset value.
/** Instances of the @ref oglplus::smart_enums::MinProgramTextureGatherOffset "MinProgramTextureGatherOffset"
 *  type are convertible to instances of any enumeration type having
 *  the @c MinProgramTextureGatherOffset value.
 */
template <typename Enum, Enum = Enum::MinProgramTextureGatherOffset> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MinProgramTextureGatherOffset value.
/** Instances of the @c smart_enums::MinProgramTextureGatherOffset type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MinProgramTextureGatherOffset value.
 */
template <typename Enum> friend bool operator==(Enum value, MinProgramTextureGatherOffset);

/// Non-equality comparison with any @p Enum type having the MinProgramTextureGatherOffset value.
/** Instances of the @c smart_enums::MinProgramTextureGatherOffset type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MinProgramTextureGatherOffset value.
 */
template <typename Enum> friend bool operator!=(Enum value, MinProgramTextureGatherOffset);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MinSampleShadingValue value.
/**
 *  @see @ref oglplus::LimitQuery "LimitQuery"
 *
 *  @glsymbols
 *  @gldefref{MIN_SAMPLE_SHADING_VALUE}
 *
 *  @ingroup smart_enums
 */
struct MinSampleShadingValue {

/// Conversion to any @p Enum type having the MinSampleShadingValue value.
/** Instances of the @ref oglplus::smart_enums::MinSampleShadingValue "MinSampleShadingValue"
 *  type are convertible to instances of any enumeration type having
 *  the @c MinSampleShadingValue value.
 */
template <typename Enum, Enum = Enum::MinSampleShadingValue> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MinSampleShadingValue value.
/** Instances of the @c smart_enums::MinSampleShadingValue type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MinSampleShadingValue value.
 */
template <typename Enum> friend bool operator==(Enum value, MinSampleShadingValue);

/// Non-equality comparison with any @p Enum type having the MinSampleShadingValue value.
/** Instances of the @c smart_enums::MinSampleShadingValue type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MinSampleShadingValue value.
 */
template <typename Enum> friend bool operator!=(Enum value, MinSampleShadingValue);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MirrorClampToEdge value.
/**
 *  @see @ref oglplus::TextureWrap "TextureWrap"
 *
 *  @glsymbols
 *  @gldefref{MIRROR_CLAMP_TO_EDGE}
 *
 *  @ingroup smart_enums
 */
struct MirrorClampToEdge {

/// Conversion to any @p Enum type having the MirrorClampToEdge value.
/** Instances of the @ref oglplus::smart_enums::MirrorClampToEdge "MirrorClampToEdge"
 *  type are convertible to instances of any enumeration type having
 *  the @c MirrorClampToEdge value.
 */
template <typename Enum, Enum = Enum::MirrorClampToEdge> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MirrorClampToEdge value.
/** Instances of the @c smart_enums::MirrorClampToEdge type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MirrorClampToEdge value.
 */
template <typename Enum> friend bool operator==(Enum value, MirrorClampToEdge);

/// Non-equality comparison with any @p Enum type having the MirrorClampToEdge value.
/** Instances of the @c smart_enums::MirrorClampToEdge type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MirrorClampToEdge value.
 */
template <typename Enum> friend bool operator!=(Enum value, MirrorClampToEdge);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MirroredRepeat value.
/**
 *  @see @ref oglplus::TextureWrap "TextureWrap"
 *
 *  @glsymbols
 *  @gldefref{MIRRORED_REPEAT}
 *
 *  @ingroup smart_enums
 */
struct MirroredRepeat {

/// Conversion to any @p Enum type having the MirroredRepeat value.
/** Instances of the @ref oglplus::smart_enums::MirroredRepeat "MirroredRepeat"
 *  type are convertible to instances of any enumeration type having
 *  the @c MirroredRepeat value.
 */
template <typename Enum, Enum = Enum::MirroredRepeat> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MirroredRepeat value.
/** Instances of the @c smart_enums::MirroredRepeat type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MirroredRepeat value.
 */
template <typename Enum> friend bool operator==(Enum value, MirroredRepeat);

/// Non-equality comparison with any @p Enum type having the MirroredRepeat value.
/** Instances of the @c smart_enums::MirroredRepeat type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MirroredRepeat value.
 */
template <typename Enum> friend bool operator!=(Enum value, MirroredRepeat);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MiterRevert value.
/**
 *  @see @ref oglplus::PathNVJoinStyle "PathNVJoinStyle"
 *
 *  @glsymbols
 *  @gldefref{MITER_REVERT_NV}
 *
 *  @ingroup smart_enums
 */
struct MiterRevert {

/// Conversion to any @p Enum type having the MiterRevert value.
/** Instances of the @ref oglplus::smart_enums::MiterRevert "MiterRevert"
 *  type are convertible to instances of any enumeration type having
 *  the @c MiterRevert value.
 */
template <typename Enum, Enum = Enum::MiterRevert> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MiterRevert value.
/** Instances of the @c smart_enums::MiterRevert type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MiterRevert value.
 */
template <typename Enum> friend bool operator==(Enum value, MiterRevert);

/// Non-equality comparison with any @p Enum type having the MiterRevert value.
/** Instances of the @c smart_enums::MiterRevert type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MiterRevert value.
 */
template <typename Enum> friend bool operator!=(Enum value, MiterRevert);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MiterTruncate value.
/**
 *  @see @ref oglplus::PathNVJoinStyle "PathNVJoinStyle"
 *
 *  @glsymbols
 *  @gldefref{MITER_TRUNCATE_NV}
 *
 *  @ingroup smart_enums
 */
struct MiterTruncate {

/// Conversion to any @p Enum type having the MiterTruncate value.
/** Instances of the @ref oglplus::smart_enums::MiterTruncate "MiterTruncate"
 *  type are convertible to instances of any enumeration type having
 *  the @c MiterTruncate value.
 */
template <typename Enum, Enum = Enum::MiterTruncate> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MiterTruncate value.
/** Instances of the @c smart_enums::MiterTruncate type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MiterTruncate value.
 */
template <typename Enum> friend bool operator==(Enum value, MiterTruncate);

/// Non-equality comparison with any @p Enum type having the MiterTruncate value.
/** Instances of the @c smart_enums::MiterTruncate type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MiterTruncate value.
 */
template <typename Enum> friend bool operator!=(Enum value, MiterTruncate);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Modelview value.
/**
 *  @see @ref oglplus::CompatibilityMatrixMode "CompatibilityMatrixMode"
 *
 *  @glsymbols
 *  @gldefref{MODELVIEW}
 *
 *  @ingroup smart_enums
 */
struct Modelview {

/// Conversion to any @p Enum type having the Modelview value.
/** Instances of the @ref oglplus::smart_enums::Modelview "Modelview"
 *  type are convertible to instances of any enumeration type having
 *  the @c Modelview value.
 */
template <typename Enum, Enum = Enum::Modelview> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Modelview value.
/** Instances of the @c smart_enums::Modelview type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Modelview value.
 */
template <typename Enum> friend bool operator==(Enum value, Modelview);

/// Non-equality comparison with any @p Enum type having the Modelview value.
/** Instances of the @c smart_enums::Modelview type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Modelview value.
 */
template <typename Enum> friend bool operator!=(Enum value, Modelview);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MoveTo value.
/**
 *  @see @ref oglplus::PathNVCommand "PathNVCommand"
 *
 *  @glsymbols
 *  @gldefref{MOVE_TO_NV}
 *
 *  @ingroup smart_enums
 */
struct MoveTo {

/// Conversion to any @p Enum type having the MoveTo value.
/** Instances of the @ref oglplus::smart_enums::MoveTo "MoveTo"
 *  type are convertible to instances of any enumeration type having
 *  the @c MoveTo value.
 */
template <typename Enum, Enum = Enum::MoveTo> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MoveTo value.
/** Instances of the @c smart_enums::MoveTo type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MoveTo value.
 */
template <typename Enum> friend bool operator==(Enum value, MoveTo);

/// Non-equality comparison with any @p Enum type having the MoveTo value.
/** Instances of the @c smart_enums::MoveTo type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MoveTo value.
 */
template <typename Enum> friend bool operator!=(Enum value, MoveTo);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MoveToContinues value.
/**
 *  @see @ref oglplus::PathNVDashOffsetReset "PathNVDashOffsetReset"
 *
 *  @glsymbols
 *  @gldefref{MOVE_TO_CONTINUES_NV}
 *
 *  @ingroup smart_enums
 */
struct MoveToContinues {

/// Conversion to any @p Enum type having the MoveToContinues value.
/** Instances of the @ref oglplus::smart_enums::MoveToContinues "MoveToContinues"
 *  type are convertible to instances of any enumeration type having
 *  the @c MoveToContinues value.
 */
template <typename Enum, Enum = Enum::MoveToContinues> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MoveToContinues value.
/** Instances of the @c smart_enums::MoveToContinues type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MoveToContinues value.
 */
template <typename Enum> friend bool operator==(Enum value, MoveToContinues);

/// Non-equality comparison with any @p Enum type having the MoveToContinues value.
/** Instances of the @c smart_enums::MoveToContinues type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MoveToContinues value.
 */
template <typename Enum> friend bool operator!=(Enum value, MoveToContinues);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c MoveToReset value.
/**
 *  @see @ref oglplus::PathNVDashOffsetReset "PathNVDashOffsetReset"
 *
 *  @glsymbols
 *  @gldefref{MOVE_TO_RESET_NV}
 *
 *  @ingroup smart_enums
 */
struct MoveToReset {

/// Conversion to any @p Enum type having the MoveToReset value.
/** Instances of the @ref oglplus::smart_enums::MoveToReset "MoveToReset"
 *  type are convertible to instances of any enumeration type having
 *  the @c MoveToReset value.
 */
template <typename Enum, Enum = Enum::MoveToReset> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the MoveToReset value.
/** Instances of the @c smart_enums::MoveToReset type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c MoveToReset value.
 */
template <typename Enum> friend bool operator==(Enum value, MoveToReset);

/// Non-equality comparison with any @p Enum type having the MoveToReset value.
/** Instances of the @c smart_enums::MoveToReset type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c MoveToReset value.
 */
template <typename Enum> friend bool operator!=(Enum value, MoveToReset);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Multisample value.
/**
 *  @see @ref oglplus::Capability "Capability"
 *  @see @ref oglplus::CompatibilityAttributeGroup "CompatibilityAttributeGroup"
 *
 *  @glsymbols
 *  @gldefref{MULTISAMPLE}
 *  @gldefref{MULTISAMPLE_BIT}
 *
 *  @ingroup smart_enums
 */
struct Multisample {

/// Conversion to any @p Enum type having the Multisample value.
/** Instances of the @ref oglplus::smart_enums::Multisample "Multisample"
 *  type are convertible to instances of any enumeration type having
 *  the @c Multisample value.
 */
template <typename Enum, Enum = Enum::Multisample> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Multisample value.
/** Instances of the @c smart_enums::Multisample type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Multisample value.
 */
template <typename Enum> friend bool operator==(Enum value, Multisample);

/// Non-equality comparison with any @p Enum type having the Multisample value.
/** Instances of the @c smart_enums::Multisample type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Multisample value.
 */
template <typename Enum> friend bool operator!=(Enum value, Multisample);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Nand value.
/**
 *  @see @ref oglplus::ColorLogicOperation "ColorLogicOperation"
 *
 *  @glsymbols
 *  @gldefref{NAND}
 *
 *  @ingroup smart_enums
 */
struct Nand {

/// Conversion to any @p Enum type having the Nand value.
/** Instances of the @ref oglplus::smart_enums::Nand "Nand"
 *  type are convertible to instances of any enumeration type having
 *  the @c Nand value.
 */
template <typename Enum, Enum = Enum::Nand> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Nand value.
/** Instances of the @c smart_enums::Nand type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Nand value.
 */
template <typename Enum> friend bool operator==(Enum value, Nand);

/// Non-equality comparison with any @p Enum type having the Nand value.
/** Instances of the @c smart_enums::Nand type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Nand value.
 */
template <typename Enum> friend bool operator!=(Enum value, Nand);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Nearest value.
/**
 *  @see @ref oglplus::BlitFilter "BlitFilter"
 *  @see @ref oglplus::TextureFilter "TextureFilter"
 *  @see @ref oglplus::TextureMagFilter "TextureMagFilter"
 *  @see @ref oglplus::TextureMinFilter "TextureMinFilter"
 *
 *  @glsymbols
 *  @gldefref{NEAREST}
 *
 *  @ingroup smart_enums
 */
struct Nearest {

/// Conversion to any @p Enum type having the Nearest value.
/** Instances of the @ref oglplus::smart_enums::Nearest "Nearest"
 *  type are convertible to instances of any enumeration type having
 *  the @c Nearest value.
 */
template <typename Enum, Enum = Enum::Nearest> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Nearest value.
/** Instances of the @c smart_enums::Nearest type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Nearest value.
 */
template <typename Enum> friend bool operator==(Enum value, Nearest);

/// Non-equality comparison with any @p Enum type having the Nearest value.
/** Instances of the @c smart_enums::Nearest type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Nearest value.
 */
template <typename Enum> friend bool operator!=(Enum value, Nearest);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c NearestMipmapLinear value.
/**
 *  @see @ref oglplus::TextureMinFilter "TextureMinFilter"
 *
 *  @glsymbols
 *  @gldefref{NEAREST_MIPMAP_LINEAR}
 *
 *  @ingroup smart_enums
 */
struct NearestMipmapLinear {

/// Conversion to any @p Enum type having the NearestMipmapLinear value.
/** Instances of the @ref oglplus::smart_enums::NearestMipmapLinear "NearestMipmapLinear"
 *  type are convertible to instances of any enumeration type having
 *  the @c NearestMipmapLinear value.
 */
template <typename Enum, Enum = Enum::NearestMipmapLinear> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the NearestMipmapLinear value.
/** Instances of the @c smart_enums::NearestMipmapLinear type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c NearestMipmapLinear value.
 */
template <typename Enum> friend bool operator==(Enum value, NearestMipmapLinear);

/// Non-equality comparison with any @p Enum type having the NearestMipmapLinear value.
/** Instances of the @c smart_enums::NearestMipmapLinear type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c NearestMipmapLinear value.
 */
template <typename Enum> friend bool operator!=(Enum value, NearestMipmapLinear);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c NearestMipmapNearest value.
/**
 *  @see @ref oglplus::TextureMinFilter "TextureMinFilter"
 *
 *  @glsymbols
 *  @gldefref{NEAREST_MIPMAP_NEAREST}
 *
 *  @ingroup smart_enums
 */
struct NearestMipmapNearest {

/// Conversion to any @p Enum type having the NearestMipmapNearest value.
/** Instances of the @ref oglplus::smart_enums::NearestMipmapNearest "NearestMipmapNearest"
 *  type are convertible to instances of any enumeration type having
 *  the @c NearestMipmapNearest value.
 */
template <typename Enum, Enum = Enum::NearestMipmapNearest> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the NearestMipmapNearest value.
/** Instances of the @c smart_enums::NearestMipmapNearest type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c NearestMipmapNearest value.
 */
template <typename Enum> friend bool operator==(Enum value, NearestMipmapNearest);

/// Non-equality comparison with any @p Enum type having the NearestMipmapNearest value.
/** Instances of the @c smart_enums::NearestMipmapNearest type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c NearestMipmapNearest value.
 */
template <typename Enum> friend bool operator!=(Enum value, NearestMipmapNearest);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Never value.
/**
 *  @see @ref oglplus::CompareFunction "CompareFunction"
 *
 *  @glsymbols
 *  @gldefref{NEVER}
 *
 *  @ingroup smart_enums
 */
struct Never {

/// Conversion to any @p Enum type having the Never value.
/** Instances of the @ref oglplus::smart_enums::Never "Never"
 *  type are convertible to instances of any enumeration type having
 *  the @c Never value.
 */
template <typename Enum, Enum = Enum::Never> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Never value.
/** Instances of the @c smart_enums::Never type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Never value.
 */
template <typename Enum> friend bool operator==(Enum value, Never);

/// Non-equality comparison with any @p Enum type having the Never value.
/** Instances of the @c smart_enums::Never type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Never value.
 */
template <typename Enum> friend bool operator!=(Enum value, Never);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Nicest value.
/**
 *  @see @ref oglplus::HintOption "HintOption"
 *
 *  @glsymbols
 *  @gldefref{NICEST}
 *
 *  @ingroup smart_enums
 */
struct Nicest {

/// Conversion to any @p Enum type having the Nicest value.
/** Instances of the @ref oglplus::smart_enums::Nicest "Nicest"
 *  type are convertible to instances of any enumeration type having
 *  the @c Nicest value.
 */
template <typename Enum, Enum = Enum::Nicest> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Nicest value.
/** Instances of the @c smart_enums::Nicest type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Nicest value.
 */
template <typename Enum> friend bool operator==(Enum value, Nicest);

/// Non-equality comparison with any @p Enum type having the Nicest value.
/** Instances of the @c smart_enums::Nicest type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Nicest value.
 */
template <typename Enum> friend bool operator!=(Enum value, Nicest);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c NoError value.
/**
 *  @see @ref oglplus::ErrorCode "ErrorCode"
 *  @see @ref oglplus::GraphicsResetStatus "GraphicsResetStatus"
 *
 *  @glsymbols
 *  @gldefref{NO_ERROR}
 *
 *  @ingroup smart_enums
 */
struct NoError {

/// Conversion to any @p Enum type having the NoError value.
/** Instances of the @ref oglplus::smart_enums::NoError "NoError"
 *  type are convertible to instances of any enumeration type having
 *  the @c NoError value.
 */
template <typename Enum, Enum = Enum::NoError> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the NoError value.
/** Instances of the @c smart_enums::NoError type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c NoError value.
 */
template <typename Enum> friend bool operator==(Enum value, NoError);

/// Non-equality comparison with any @p Enum type having the NoError value.
/** Instances of the @c smart_enums::NoError type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c NoError value.
 */
template <typename Enum> friend bool operator!=(Enum value, NoError);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c None value.
/**
 *  @see @ref oglplus::ColorBuffer "ColorBuffer"
 *  @see @ref oglplus::ObjectType "ObjectType"
 *  @see @ref oglplus::PathNVGenMode "PathNVGenMode"
 *  @see @ref oglplus::PathNVJoinStyle "PathNVJoinStyle"
 *  @see @ref oglplus::PathNVTransformType "PathNVTransformType"
 *  @see @ref oglplus::SLDataType "SLDataType"
 *  @see @ref oglplus::TextureCompareMode "TextureCompareMode"
 *
 *  @glsymbols
 *  @gldefref{NONE}
 *
 *  @ingroup smart_enums
 */
struct None {

/// Conversion to any @p Enum type having the None value.
/** Instances of the @ref oglplus::smart_enums::None "None"
 *  type are convertible to instances of any enumeration type having
 *  the @c None value.
 */
template <typename Enum, Enum = Enum::None> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the None value.
/** Instances of the @c smart_enums::None type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c None value.
 */
template <typename Enum> friend bool operator==(Enum value, None);

/// Non-equality comparison with any @p Enum type having the None value.
/** Instances of the @c smart_enums::None type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c None value.
 */
template <typename Enum> friend bool operator!=(Enum value, None);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Noop value.
/**
 *  @see @ref oglplus::ColorLogicOperation "ColorLogicOperation"
 *
 *  @glsymbols
 *  @gldefref{NOOP}
 *
 *  @ingroup smart_enums
 */
struct Noop {

/// Conversion to any @p Enum type having the Noop value.
/** Instances of the @ref oglplus::smart_enums::Noop "Noop"
 *  type are convertible to instances of any enumeration type having
 *  the @c Noop value.
 */
template <typename Enum, Enum = Enum::Noop> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Noop value.
/** Instances of the @c smart_enums::Noop type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Noop value.
 */
template <typename Enum> friend bool operator==(Enum value, Noop);

/// Non-equality comparison with any @p Enum type having the Noop value.
/** Instances of the @c smart_enums::Noop type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Noop value.
 */
template <typename Enum> friend bool operator!=(Enum value, Noop);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Nor value.
/**
 *  @see @ref oglplus::ColorLogicOperation "ColorLogicOperation"
 *
 *  @glsymbols
 *  @gldefref{NOR}
 *
 *  @ingroup smart_enums
 */
struct Nor {

/// Conversion to any @p Enum type having the Nor value.
/** Instances of the @ref oglplus::smart_enums::Nor "Nor"
 *  type are convertible to instances of any enumeration type having
 *  the @c Nor value.
 */
template <typename Enum, Enum = Enum::Nor> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Nor value.
/** Instances of the @c smart_enums::Nor type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Nor value.
 */
template <typename Enum> friend bool operator==(Enum value, Nor);

/// Non-equality comparison with any @p Enum type having the Nor value.
/** Instances of the @c smart_enums::Nor type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Nor value.
 */
template <typename Enum> friend bool operator!=(Enum value, Nor);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c NoResetNotification value.
/**
 *  @see @ref oglplus::ResetNotificationStrategy "ResetNotificationStrategy"
 *
 *  @glsymbols
 *  @gldefref{NO_RESET_NOTIFICATION_ARB}
 *
 *  @ingroup smart_enums
 */
struct NoResetNotification {

/// Conversion to any @p Enum type having the NoResetNotification value.
/** Instances of the @ref oglplus::smart_enums::NoResetNotification "NoResetNotification"
 *  type are convertible to instances of any enumeration type having
 *  the @c NoResetNotification value.
 */
template <typename Enum, Enum = Enum::NoResetNotification> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the NoResetNotification value.
/** Instances of the @c smart_enums::NoResetNotification type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c NoResetNotification value.
 */
template <typename Enum> friend bool operator==(Enum value, NoResetNotification);

/// Non-equality comparison with any @p Enum type having the NoResetNotification value.
/** Instances of the @c smart_enums::NoResetNotification type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c NoResetNotification value.
 */
template <typename Enum> friend bool operator!=(Enum value, NoResetNotification);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c NotEqual value.
/**
 *  @see @ref oglplus::CompareFunction "CompareFunction"
 *
 *  @glsymbols
 *  @gldefref{NOTEQUAL}
 *
 *  @ingroup smart_enums
 */
struct NotEqual {

/// Conversion to any @p Enum type having the NotEqual value.
/** Instances of the @ref oglplus::smart_enums::NotEqual "NotEqual"
 *  type are convertible to instances of any enumeration type having
 *  the @c NotEqual value.
 */
template <typename Enum, Enum = Enum::NotEqual> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the NotEqual value.
/** Instances of the @c smart_enums::NotEqual type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c NotEqual value.
 */
template <typename Enum> friend bool operator==(Enum value, NotEqual);

/// Non-equality comparison with any @p Enum type having the NotEqual value.
/** Instances of the @c smart_enums::NotEqual type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c NotEqual value.
 */
template <typename Enum> friend bool operator!=(Enum value, NotEqual);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Notification value.
/**
 *  @see @ref oglplus::DebugOutputSeverity "DebugOutputSeverity"
 *  @see @ref oglplus::DebugSeverity "DebugSeverity"
 *
 *  @glsymbols
 *  @gldefref{DEBUG_SEVERITY_NOTIFICATION}
 *
 *  @ingroup smart_enums
 */
struct Notification {

/// Conversion to any @p Enum type having the Notification value.
/** Instances of the @ref oglplus::smart_enums::Notification "Notification"
 *  type are convertible to instances of any enumeration type having
 *  the @c Notification value.
 */
template <typename Enum, Enum = Enum::Notification> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Notification value.
/** Instances of the @c smart_enums::Notification type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Notification value.
 */
template <typename Enum> friend bool operator==(Enum value, Notification);

/// Non-equality comparison with any @p Enum type having the Notification value.
/** Instances of the @c smart_enums::Notification type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Notification value.
 */
template <typename Enum> friend bool operator!=(Enum value, Notification);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c NumActiveVariables value.
/**
 *  @see @ref oglplus::ProgramResourceProperty "ProgramResourceProperty"
 *
 *  @glsymbols
 *  @gldefref{NUM_ACTIVE_VARIABLES}
 *
 *  @ingroup smart_enums
 */
struct NumActiveVariables {

/// Conversion to any @p Enum type having the NumActiveVariables value.
/** Instances of the @ref oglplus::smart_enums::NumActiveVariables "NumActiveVariables"
 *  type are convertible to instances of any enumeration type having
 *  the @c NumActiveVariables value.
 */
template <typename Enum, Enum = Enum::NumActiveVariables> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the NumActiveVariables value.
/** Instances of the @c smart_enums::NumActiveVariables type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c NumActiveVariables value.
 */
template <typename Enum> friend bool operator==(Enum value, NumActiveVariables);

/// Non-equality comparison with any @p Enum type having the NumActiveVariables value.
/** Instances of the @c smart_enums::NumActiveVariables type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c NumActiveVariables value.
 */
template <typename Enum> friend bool operator!=(Enum value, NumActiveVariables);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c NumCompatibleSubroutines value.
/**
 *  @see @ref oglplus::ProgramResourceProperty "ProgramResourceProperty"
 *
 *  @glsymbols
 *  @gldefref{NUM_COMPATIBLE_SUBROUTINES}
 *
 *  @ingroup smart_enums
 */
struct NumCompatibleSubroutines {

/// Conversion to any @p Enum type having the NumCompatibleSubroutines value.
/** Instances of the @ref oglplus::smart_enums::NumCompatibleSubroutines "NumCompatibleSubroutines"
 *  type are convertible to instances of any enumeration type having
 *  the @c NumCompatibleSubroutines value.
 */
template <typename Enum, Enum = Enum::NumCompatibleSubroutines> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the NumCompatibleSubroutines value.
/** Instances of the @c smart_enums::NumCompatibleSubroutines type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c NumCompatibleSubroutines value.
 */
template <typename Enum> friend bool operator==(Enum value, NumCompatibleSubroutines);

/// Non-equality comparison with any @p Enum type having the NumCompatibleSubroutines value.
/** Instances of the @c smart_enums::NumCompatibleSubroutines type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c NumCompatibleSubroutines value.
 */
template <typename Enum> friend bool operator!=(Enum value, NumCompatibleSubroutines);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ObjectBoundingBox value.
/**
 *  @see @ref oglplus::PathNVGenMode "PathNVGenMode"
 *
 *  @glsymbols
 *  @gldefref{PATH_OBJECT_BOUNDING_BOX_NV}
 *
 *  @ingroup smart_enums
 */
struct ObjectBoundingBox {

/// Conversion to any @p Enum type having the ObjectBoundingBox value.
/** Instances of the @ref oglplus::smart_enums::ObjectBoundingBox "ObjectBoundingBox"
 *  type are convertible to instances of any enumeration type having
 *  the @c ObjectBoundingBox value.
 */
template <typename Enum, Enum = Enum::ObjectBoundingBox> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ObjectBoundingBox value.
/** Instances of the @c smart_enums::ObjectBoundingBox type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ObjectBoundingBox value.
 */
template <typename Enum> friend bool operator==(Enum value, ObjectBoundingBox);

/// Non-equality comparison with any @p Enum type having the ObjectBoundingBox value.
/** Instances of the @c smart_enums::ObjectBoundingBox type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ObjectBoundingBox value.
 */
template <typename Enum> friend bool operator!=(Enum value, ObjectBoundingBox);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ObjectLinear value.
/**
 *  @see @ref oglplus::PathNVGenMode "PathNVGenMode"
 *
 *  @glsymbols
 *  @gldefref{OBJECT_LINEAR}
 *
 *  @ingroup smart_enums
 */
struct ObjectLinear {

/// Conversion to any @p Enum type having the ObjectLinear value.
/** Instances of the @ref oglplus::smart_enums::ObjectLinear "ObjectLinear"
 *  type are convertible to instances of any enumeration type having
 *  the @c ObjectLinear value.
 */
template <typename Enum, Enum = Enum::ObjectLinear> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ObjectLinear value.
/** Instances of the @c smart_enums::ObjectLinear type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ObjectLinear value.
 */
template <typename Enum> friend bool operator==(Enum value, ObjectLinear);

/// Non-equality comparison with any @p Enum type having the ObjectLinear value.
/** Instances of the @c smart_enums::ObjectLinear type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ObjectLinear value.
 */
template <typename Enum> friend bool operator!=(Enum value, ObjectLinear);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Offset value.
/**
 *  @see @ref oglplus::ProgramResourceProperty "ProgramResourceProperty"
 *
 *  @glsymbols
 *  @gldefref{OFFSET}
 *
 *  @ingroup smart_enums
 */
struct Offset {

/// Conversion to any @p Enum type having the Offset value.
/** Instances of the @ref oglplus::smart_enums::Offset "Offset"
 *  type are convertible to instances of any enumeration type having
 *  the @c Offset value.
 */
template <typename Enum, Enum = Enum::Offset> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Offset value.
/** Instances of the @c smart_enums::Offset type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Offset value.
 */
template <typename Enum> friend bool operator==(Enum value, Offset);

/// Non-equality comparison with any @p Enum type having the Offset value.
/** Instances of the @c smart_enums::Offset type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Offset value.
 */
template <typename Enum> friend bool operator!=(Enum value, Offset);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c One value.
/**
 *  @see @ref oglplus::BlendFunction "BlendFunction"
 *  @see @ref oglplus::TextureSwizzle "TextureSwizzle"
 *
 *  @glsymbols
 *  @gldefref{ONE}
 *
 *  @ingroup smart_enums
 */
struct One {

/// Conversion to any @p Enum type having the One value.
/** Instances of the @ref oglplus::smart_enums::One "One"
 *  type are convertible to instances of any enumeration type having
 *  the @c One value.
 */
template <typename Enum, Enum = Enum::One> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the One value.
/** Instances of the @c smart_enums::One type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c One value.
 */
template <typename Enum> friend bool operator==(Enum value, One);

/// Non-equality comparison with any @p Enum type having the One value.
/** Instances of the @c smart_enums::One type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c One value.
 */
template <typename Enum> friend bool operator!=(Enum value, One);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c OneMinusConstantAlpha value.
/**
 *  @see @ref oglplus::BlendFunction "BlendFunction"
 *
 *  @glsymbols
 *  @gldefref{ONE_MINUS_CONSTANT_ALPHA}
 *
 *  @ingroup smart_enums
 */
struct OneMinusConstantAlpha {

/// Conversion to any @p Enum type having the OneMinusConstantAlpha value.
/** Instances of the @ref oglplus::smart_enums::OneMinusConstantAlpha "OneMinusConstantAlpha"
 *  type are convertible to instances of any enumeration type having
 *  the @c OneMinusConstantAlpha value.
 */
template <typename Enum, Enum = Enum::OneMinusConstantAlpha> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the OneMinusConstantAlpha value.
/** Instances of the @c smart_enums::OneMinusConstantAlpha type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c OneMinusConstantAlpha value.
 */
template <typename Enum> friend bool operator==(Enum value, OneMinusConstantAlpha);

/// Non-equality comparison with any @p Enum type having the OneMinusConstantAlpha value.
/** Instances of the @c smart_enums::OneMinusConstantAlpha type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c OneMinusConstantAlpha value.
 */
template <typename Enum> friend bool operator!=(Enum value, OneMinusConstantAlpha);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c OneMinusConstantColor value.
/**
 *  @see @ref oglplus::BlendFunction "BlendFunction"
 *
 *  @glsymbols
 *  @gldefref{ONE_MINUS_CONSTANT_COLOR}
 *
 *  @ingroup smart_enums
 */
struct OneMinusConstantColor {

/// Conversion to any @p Enum type having the OneMinusConstantColor value.
/** Instances of the @ref oglplus::smart_enums::OneMinusConstantColor "OneMinusConstantColor"
 *  type are convertible to instances of any enumeration type having
 *  the @c OneMinusConstantColor value.
 */
template <typename Enum, Enum = Enum::OneMinusConstantColor> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the OneMinusConstantColor value.
/** Instances of the @c smart_enums::OneMinusConstantColor type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c OneMinusConstantColor value.
 */
template <typename Enum> friend bool operator==(Enum value, OneMinusConstantColor);

/// Non-equality comparison with any @p Enum type having the OneMinusConstantColor value.
/** Instances of the @c smart_enums::OneMinusConstantColor type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c OneMinusConstantColor value.
 */
template <typename Enum> friend bool operator!=(Enum value, OneMinusConstantColor);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c OneMinusDstAlpha value.
/**
 *  @see @ref oglplus::BlendFunction "BlendFunction"
 *
 *  @glsymbols
 *  @gldefref{ONE_MINUS_DST_ALPHA}
 *
 *  @ingroup smart_enums
 */
struct OneMinusDstAlpha {

/// Conversion to any @p Enum type having the OneMinusDstAlpha value.
/** Instances of the @ref oglplus::smart_enums::OneMinusDstAlpha "OneMinusDstAlpha"
 *  type are convertible to instances of any enumeration type having
 *  the @c OneMinusDstAlpha value.
 */
template <typename Enum, Enum = Enum::OneMinusDstAlpha> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the OneMinusDstAlpha value.
/** Instances of the @c smart_enums::OneMinusDstAlpha type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c OneMinusDstAlpha value.
 */
template <typename Enum> friend bool operator==(Enum value, OneMinusDstAlpha);

/// Non-equality comparison with any @p Enum type having the OneMinusDstAlpha value.
/** Instances of the @c smart_enums::OneMinusDstAlpha type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c OneMinusDstAlpha value.
 */
template <typename Enum> friend bool operator!=(Enum value, OneMinusDstAlpha);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c OneMinusDstColor value.
/**
 *  @see @ref oglplus::BlendFunction "BlendFunction"
 *
 *  @glsymbols
 *  @gldefref{ONE_MINUS_DST_COLOR}
 *
 *  @ingroup smart_enums
 */
struct OneMinusDstColor {

/// Conversion to any @p Enum type having the OneMinusDstColor value.
/** Instances of the @ref oglplus::smart_enums::OneMinusDstColor "OneMinusDstColor"
 *  type are convertible to instances of any enumeration type having
 *  the @c OneMinusDstColor value.
 */
template <typename Enum, Enum = Enum::OneMinusDstColor> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the OneMinusDstColor value.
/** Instances of the @c smart_enums::OneMinusDstColor type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c OneMinusDstColor value.
 */
template <typename Enum> friend bool operator==(Enum value, OneMinusDstColor);

/// Non-equality comparison with any @p Enum type having the OneMinusDstColor value.
/** Instances of the @c smart_enums::OneMinusDstColor type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c OneMinusDstColor value.
 */
template <typename Enum> friend bool operator!=(Enum value, OneMinusDstColor);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c OneMinusSrc1Alpha value.
/**
 *  @see @ref oglplus::BlendFunction "BlendFunction"
 *
 *  @glsymbols
 *  @gldefref{ONE_MINUS_SRC1_ALPHA}
 *
 *  @ingroup smart_enums
 */
struct OneMinusSrc1Alpha {

/// Conversion to any @p Enum type having the OneMinusSrc1Alpha value.
/** Instances of the @ref oglplus::smart_enums::OneMinusSrc1Alpha "OneMinusSrc1Alpha"
 *  type are convertible to instances of any enumeration type having
 *  the @c OneMinusSrc1Alpha value.
 */
template <typename Enum, Enum = Enum::OneMinusSrc1Alpha> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the OneMinusSrc1Alpha value.
/** Instances of the @c smart_enums::OneMinusSrc1Alpha type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c OneMinusSrc1Alpha value.
 */
template <typename Enum> friend bool operator==(Enum value, OneMinusSrc1Alpha);

/// Non-equality comparison with any @p Enum type having the OneMinusSrc1Alpha value.
/** Instances of the @c smart_enums::OneMinusSrc1Alpha type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c OneMinusSrc1Alpha value.
 */
template <typename Enum> friend bool operator!=(Enum value, OneMinusSrc1Alpha);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c OneMinusSrc1Color value.
/**
 *  @see @ref oglplus::BlendFunction "BlendFunction"
 *
 *  @glsymbols
 *  @gldefref{ONE_MINUS_SRC1_COLOR}
 *
 *  @ingroup smart_enums
 */
struct OneMinusSrc1Color {

/// Conversion to any @p Enum type having the OneMinusSrc1Color value.
/** Instances of the @ref oglplus::smart_enums::OneMinusSrc1Color "OneMinusSrc1Color"
 *  type are convertible to instances of any enumeration type having
 *  the @c OneMinusSrc1Color value.
 */
template <typename Enum, Enum = Enum::OneMinusSrc1Color> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the OneMinusSrc1Color value.
/** Instances of the @c smart_enums::OneMinusSrc1Color type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c OneMinusSrc1Color value.
 */
template <typename Enum> friend bool operator==(Enum value, OneMinusSrc1Color);

/// Non-equality comparison with any @p Enum type having the OneMinusSrc1Color value.
/** Instances of the @c smart_enums::OneMinusSrc1Color type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c OneMinusSrc1Color value.
 */
template <typename Enum> friend bool operator!=(Enum value, OneMinusSrc1Color);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c OneMinusSrcAlpha value.
/**
 *  @see @ref oglplus::BlendFunction "BlendFunction"
 *
 *  @glsymbols
 *  @gldefref{ONE_MINUS_SRC_ALPHA}
 *
 *  @ingroup smart_enums
 */
struct OneMinusSrcAlpha {

/// Conversion to any @p Enum type having the OneMinusSrcAlpha value.
/** Instances of the @ref oglplus::smart_enums::OneMinusSrcAlpha "OneMinusSrcAlpha"
 *  type are convertible to instances of any enumeration type having
 *  the @c OneMinusSrcAlpha value.
 */
template <typename Enum, Enum = Enum::OneMinusSrcAlpha> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the OneMinusSrcAlpha value.
/** Instances of the @c smart_enums::OneMinusSrcAlpha type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c OneMinusSrcAlpha value.
 */
template <typename Enum> friend bool operator==(Enum value, OneMinusSrcAlpha);

/// Non-equality comparison with any @p Enum type having the OneMinusSrcAlpha value.
/** Instances of the @c smart_enums::OneMinusSrcAlpha type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c OneMinusSrcAlpha value.
 */
template <typename Enum> friend bool operator!=(Enum value, OneMinusSrcAlpha);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c OneMinusSrcColor value.
/**
 *  @see @ref oglplus::BlendFunction "BlendFunction"
 *
 *  @glsymbols
 *  @gldefref{ONE_MINUS_SRC_COLOR}
 *
 *  @ingroup smart_enums
 */
struct OneMinusSrcColor {

/// Conversion to any @p Enum type having the OneMinusSrcColor value.
/** Instances of the @ref oglplus::smart_enums::OneMinusSrcColor "OneMinusSrcColor"
 *  type are convertible to instances of any enumeration type having
 *  the @c OneMinusSrcColor value.
 */
template <typename Enum, Enum = Enum::OneMinusSrcColor> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the OneMinusSrcColor value.
/** Instances of the @c smart_enums::OneMinusSrcColor type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c OneMinusSrcColor value.
 */
template <typename Enum> friend bool operator==(Enum value, OneMinusSrcColor);

/// Non-equality comparison with any @p Enum type having the OneMinusSrcColor value.
/** Instances of the @c smart_enums::OneMinusSrcColor type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c OneMinusSrcColor value.
 */
template <typename Enum> friend bool operator!=(Enum value, OneMinusSrcColor);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Or value.
/**
 *  @see @ref oglplus::ColorLogicOperation "ColorLogicOperation"
 *
 *  @glsymbols
 *  @gldefref{OR}
 *
 *  @ingroup smart_enums
 */
struct Or {

/// Conversion to any @p Enum type having the Or value.
/** Instances of the @ref oglplus::smart_enums::Or "Or"
 *  type are convertible to instances of any enumeration type having
 *  the @c Or value.
 */
template <typename Enum, Enum = Enum::Or> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Or value.
/** Instances of the @c smart_enums::Or type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Or value.
 */
template <typename Enum> friend bool operator==(Enum value, Or);

/// Non-equality comparison with any @p Enum type having the Or value.
/** Instances of the @c smart_enums::Or type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Or value.
 */
template <typename Enum> friend bool operator!=(Enum value, Or);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c OrInverted value.
/**
 *  @see @ref oglplus::ColorLogicOperation "ColorLogicOperation"
 *
 *  @glsymbols
 *  @gldefref{OR_INVERTED}
 *
 *  @ingroup smart_enums
 */
struct OrInverted {

/// Conversion to any @p Enum type having the OrInverted value.
/** Instances of the @ref oglplus::smart_enums::OrInverted "OrInverted"
 *  type are convertible to instances of any enumeration type having
 *  the @c OrInverted value.
 */
template <typename Enum, Enum = Enum::OrInverted> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the OrInverted value.
/** Instances of the @c smart_enums::OrInverted type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c OrInverted value.
 */
template <typename Enum> friend bool operator==(Enum value, OrInverted);

/// Non-equality comparison with any @p Enum type having the OrInverted value.
/** Instances of the @c smart_enums::OrInverted type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c OrInverted value.
 */
template <typename Enum> friend bool operator!=(Enum value, OrInverted);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c OrReverse value.
/**
 *  @see @ref oglplus::ColorLogicOperation "ColorLogicOperation"
 *
 *  @glsymbols
 *  @gldefref{OR_REVERSE}
 *
 *  @ingroup smart_enums
 */
struct OrReverse {

/// Conversion to any @p Enum type having the OrReverse value.
/** Instances of the @ref oglplus::smart_enums::OrReverse "OrReverse"
 *  type are convertible to instances of any enumeration type having
 *  the @c OrReverse value.
 */
template <typename Enum, Enum = Enum::OrReverse> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the OrReverse value.
/** Instances of the @c smart_enums::OrReverse type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c OrReverse value.
 */
template <typename Enum> friend bool operator==(Enum value, OrReverse);

/// Non-equality comparison with any @p Enum type having the OrReverse value.
/** Instances of the @c smart_enums::OrReverse type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c OrReverse value.
 */
template <typename Enum> friend bool operator!=(Enum value, OrReverse);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Other value.
/**
 *  @see @ref oglplus::DebugOutputARBSource "DebugOutputARBSource"
 *  @see @ref oglplus::DebugOutputARBType "DebugOutputARBType"
 *  @see @ref oglplus::DebugOutputSource "DebugOutputSource"
 *  @see @ref oglplus::DebugOutputType "DebugOutputType"
 *  @see @ref oglplus::DebugSource "DebugSource"
 *  @see @ref oglplus::DebugType "DebugType"
 *
 *  @glsymbols
 *  @gldefref{DEBUG_SOURCE_OTHER}
 *  @gldefref{DEBUG_SOURCE_OTHER_ARB}
 *  @gldefref{DEBUG_TYPE_OTHER}
 *  @gldefref{DEBUG_TYPE_OTHER_ARB}
 *
 *  @ingroup smart_enums
 */
struct Other {

/// Conversion to any @p Enum type having the Other value.
/** Instances of the @ref oglplus::smart_enums::Other "Other"
 *  type are convertible to instances of any enumeration type having
 *  the @c Other value.
 */
template <typename Enum, Enum = Enum::Other> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Other value.
/** Instances of the @c smart_enums::Other type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Other value.
 */
template <typename Enum> friend bool operator==(Enum value, Other);

/// Non-equality comparison with any @p Enum type having the Other value.
/** Instances of the @c smart_enums::Other type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Other value.
 */
template <typename Enum> friend bool operator!=(Enum value, Other);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c OutOfMemory value.
/**
 *  @see @ref oglplus::ErrorCode "ErrorCode"
 *
 *  @glsymbols
 *  @gldefref{OUT_OF_MEMORY}
 *
 *  @ingroup smart_enums
 */
struct OutOfMemory {

/// Conversion to any @p Enum type having the OutOfMemory value.
/** Instances of the @ref oglplus::smart_enums::OutOfMemory "OutOfMemory"
 *  type are convertible to instances of any enumeration type having
 *  the @c OutOfMemory value.
 */
template <typename Enum, Enum = Enum::OutOfMemory> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the OutOfMemory value.
/** Instances of the @c smart_enums::OutOfMemory type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c OutOfMemory value.
 */
template <typename Enum> friend bool operator==(Enum value, OutOfMemory);

/// Non-equality comparison with any @p Enum type having the OutOfMemory value.
/** Instances of the @c smart_enums::OutOfMemory type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c OutOfMemory value.
 */
template <typename Enum> friend bool operator!=(Enum value, OutOfMemory);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c PackAlignment value.
/**
 *  @see @ref oglplus::PixelStorageMode "PixelStorageMode"
 *
 *  @glsymbols
 *  @gldefref{PACK_ALIGNMENT}
 *
 *  @ingroup smart_enums
 */
struct PackAlignment {

/// Conversion to any @p Enum type having the PackAlignment value.
/** Instances of the @ref oglplus::smart_enums::PackAlignment "PackAlignment"
 *  type are convertible to instances of any enumeration type having
 *  the @c PackAlignment value.
 */
template <typename Enum, Enum = Enum::PackAlignment> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the PackAlignment value.
/** Instances of the @c smart_enums::PackAlignment type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c PackAlignment value.
 */
template <typename Enum> friend bool operator==(Enum value, PackAlignment);

/// Non-equality comparison with any @p Enum type having the PackAlignment value.
/** Instances of the @c smart_enums::PackAlignment type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c PackAlignment value.
 */
template <typename Enum> friend bool operator!=(Enum value, PackAlignment);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c PackCompressedBlockDepth value.
/**
 *  @see @ref oglplus::PixelStorageMode "PixelStorageMode"
 *
 *  @glsymbols
 *  @gldefref{PACK_COMPRESSED_BLOCK_DEPTH}
 *
 *  @ingroup smart_enums
 */
struct PackCompressedBlockDepth {

/// Conversion to any @p Enum type having the PackCompressedBlockDepth value.
/** Instances of the @ref oglplus::smart_enums::PackCompressedBlockDepth "PackCompressedBlockDepth"
 *  type are convertible to instances of any enumeration type having
 *  the @c PackCompressedBlockDepth value.
 */
template <typename Enum, Enum = Enum::PackCompressedBlockDepth> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the PackCompressedBlockDepth value.
/** Instances of the @c smart_enums::PackCompressedBlockDepth type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c PackCompressedBlockDepth value.
 */
template <typename Enum> friend bool operator==(Enum value, PackCompressedBlockDepth);

/// Non-equality comparison with any @p Enum type having the PackCompressedBlockDepth value.
/** Instances of the @c smart_enums::PackCompressedBlockDepth type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c PackCompressedBlockDepth value.
 */
template <typename Enum> friend bool operator!=(Enum value, PackCompressedBlockDepth);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c PackCompressedBlockHeight value.
/**
 *  @see @ref oglplus::PixelStorageMode "PixelStorageMode"
 *
 *  @glsymbols
 *  @gldefref{PACK_COMPRESSED_BLOCK_HEIGHT}
 *
 *  @ingroup smart_enums
 */
struct PackCompressedBlockHeight {

/// Conversion to any @p Enum type having the PackCompressedBlockHeight value.
/** Instances of the @ref oglplus::smart_enums::PackCompressedBlockHeight "PackCompressedBlockHeight"
 *  type are convertible to instances of any enumeration type having
 *  the @c PackCompressedBlockHeight value.
 */
template <typename Enum, Enum = Enum::PackCompressedBlockHeight> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the PackCompressedBlockHeight value.
/** Instances of the @c smart_enums::PackCompressedBlockHeight type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c PackCompressedBlockHeight value.
 */
template <typename Enum> friend bool operator==(Enum value, PackCompressedBlockHeight);

/// Non-equality comparison with any @p Enum type having the PackCompressedBlockHeight value.
/** Instances of the @c smart_enums::PackCompressedBlockHeight type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c PackCompressedBlockHeight value.
 */
template <typename Enum> friend bool operator!=(Enum value, PackCompressedBlockHeight);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c PackCompressedBlockSize value.
/**
 *  @see @ref oglplus::PixelStorageMode "PixelStorageMode"
 *
 *  @glsymbols
 *  @gldefref{PACK_COMPRESSED_BLOCK_SIZE}
 *
 *  @ingroup smart_enums
 */
struct PackCompressedBlockSize {

/// Conversion to any @p Enum type having the PackCompressedBlockSize value.
/** Instances of the @ref oglplus::smart_enums::PackCompressedBlockSize "PackCompressedBlockSize"
 *  type are convertible to instances of any enumeration type having
 *  the @c PackCompressedBlockSize value.
 */
template <typename Enum, Enum = Enum::PackCompressedBlockSize> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the PackCompressedBlockSize value.
/** Instances of the @c smart_enums::PackCompressedBlockSize type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c PackCompressedBlockSize value.
 */
template <typename Enum> friend bool operator==(Enum value, PackCompressedBlockSize);

/// Non-equality comparison with any @p Enum type having the PackCompressedBlockSize value.
/** Instances of the @c smart_enums::PackCompressedBlockSize type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c PackCompressedBlockSize value.
 */
template <typename Enum> friend bool operator!=(Enum value, PackCompressedBlockSize);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c PackCompressedBlockWidth value.
/**
 *  @see @ref oglplus::PixelStorageMode "PixelStorageMode"
 *
 *  @glsymbols
 *  @gldefref{PACK_COMPRESSED_BLOCK_WIDTH}
 *
 *  @ingroup smart_enums
 */
struct PackCompressedBlockWidth {

/// Conversion to any @p Enum type having the PackCompressedBlockWidth value.
/** Instances of the @ref oglplus::smart_enums::PackCompressedBlockWidth "PackCompressedBlockWidth"
 *  type are convertible to instances of any enumeration type having
 *  the @c PackCompressedBlockWidth value.
 */
template <typename Enum, Enum = Enum::PackCompressedBlockWidth> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the PackCompressedBlockWidth value.
/** Instances of the @c smart_enums::PackCompressedBlockWidth type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c PackCompressedBlockWidth value.
 */
template <typename Enum> friend bool operator==(Enum value, PackCompressedBlockWidth);

/// Non-equality comparison with any @p Enum type having the PackCompressedBlockWidth value.
/** Instances of the @c smart_enums::PackCompressedBlockWidth type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c PackCompressedBlockWidth value.
 */
template <typename Enum> friend bool operator!=(Enum value, PackCompressedBlockWidth);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c PackImageHeight value.
/**
 *  @see @ref oglplus::PixelStorageMode "PixelStorageMode"
 *
 *  @glsymbols
 *  @gldefref{PACK_IMAGE_HEIGHT}
 *
 *  @ingroup smart_enums
 */
struct PackImageHeight {

/// Conversion to any @p Enum type having the PackImageHeight value.
/** Instances of the @ref oglplus::smart_enums::PackImageHeight "PackImageHeight"
 *  type are convertible to instances of any enumeration type having
 *  the @c PackImageHeight value.
 */
template <typename Enum, Enum = Enum::PackImageHeight> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the PackImageHeight value.
/** Instances of the @c smart_enums::PackImageHeight type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c PackImageHeight value.
 */
template <typename Enum> friend bool operator==(Enum value, PackImageHeight);

/// Non-equality comparison with any @p Enum type having the PackImageHeight value.
/** Instances of the @c smart_enums::PackImageHeight type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c PackImageHeight value.
 */
template <typename Enum> friend bool operator!=(Enum value, PackImageHeight);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c PackLsbFirst value.
/**
 *  @see @ref oglplus::PixelStorageMode "PixelStorageMode"
 *
 *  @glsymbols
 *  @gldefref{PACK_LSB_FIRST}
 *
 *  @ingroup smart_enums
 */
struct PackLsbFirst {

/// Conversion to any @p Enum type having the PackLsbFirst value.
/** Instances of the @ref oglplus::smart_enums::PackLsbFirst "PackLsbFirst"
 *  type are convertible to instances of any enumeration type having
 *  the @c PackLsbFirst value.
 */
template <typename Enum, Enum = Enum::PackLsbFirst> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the PackLsbFirst value.
/** Instances of the @c smart_enums::PackLsbFirst type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c PackLsbFirst value.
 */
template <typename Enum> friend bool operator==(Enum value, PackLsbFirst);

/// Non-equality comparison with any @p Enum type having the PackLsbFirst value.
/** Instances of the @c smart_enums::PackLsbFirst type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c PackLsbFirst value.
 */
template <typename Enum> friend bool operator!=(Enum value, PackLsbFirst);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c PackRowLength value.
/**
 *  @see @ref oglplus::PixelStorageMode "PixelStorageMode"
 *
 *  @glsymbols
 *  @gldefref{PACK_ROW_LENGTH}
 *
 *  @ingroup smart_enums
 */
struct PackRowLength {

/// Conversion to any @p Enum type having the PackRowLength value.
/** Instances of the @ref oglplus::smart_enums::PackRowLength "PackRowLength"
 *  type are convertible to instances of any enumeration type having
 *  the @c PackRowLength value.
 */
template <typename Enum, Enum = Enum::PackRowLength> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the PackRowLength value.
/** Instances of the @c smart_enums::PackRowLength type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c PackRowLength value.
 */
template <typename Enum> friend bool operator==(Enum value, PackRowLength);

/// Non-equality comparison with any @p Enum type having the PackRowLength value.
/** Instances of the @c smart_enums::PackRowLength type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c PackRowLength value.
 */
template <typename Enum> friend bool operator!=(Enum value, PackRowLength);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c PackSkipImages value.
/**
 *  @see @ref oglplus::PixelStorageMode "PixelStorageMode"
 *
 *  @glsymbols
 *  @gldefref{PACK_SKIP_IMAGES}
 *
 *  @ingroup smart_enums
 */
struct PackSkipImages {

/// Conversion to any @p Enum type having the PackSkipImages value.
/** Instances of the @ref oglplus::smart_enums::PackSkipImages "PackSkipImages"
 *  type are convertible to instances of any enumeration type having
 *  the @c PackSkipImages value.
 */
template <typename Enum, Enum = Enum::PackSkipImages> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the PackSkipImages value.
/** Instances of the @c smart_enums::PackSkipImages type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c PackSkipImages value.
 */
template <typename Enum> friend bool operator==(Enum value, PackSkipImages);

/// Non-equality comparison with any @p Enum type having the PackSkipImages value.
/** Instances of the @c smart_enums::PackSkipImages type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c PackSkipImages value.
 */
template <typename Enum> friend bool operator!=(Enum value, PackSkipImages);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c PackSkipPixels value.
/**
 *  @see @ref oglplus::PixelStorageMode "PixelStorageMode"
 *
 *  @glsymbols
 *  @gldefref{PACK_SKIP_PIXELS}
 *
 *  @ingroup smart_enums
 */
struct PackSkipPixels {

/// Conversion to any @p Enum type having the PackSkipPixels value.
/** Instances of the @ref oglplus::smart_enums::PackSkipPixels "PackSkipPixels"
 *  type are convertible to instances of any enumeration type having
 *  the @c PackSkipPixels value.
 */
template <typename Enum, Enum = Enum::PackSkipPixels> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the PackSkipPixels value.
/** Instances of the @c smart_enums::PackSkipPixels type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c PackSkipPixels value.
 */
template <typename Enum> friend bool operator==(Enum value, PackSkipPixels);

/// Non-equality comparison with any @p Enum type having the PackSkipPixels value.
/** Instances of the @c smart_enums::PackSkipPixels type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c PackSkipPixels value.
 */
template <typename Enum> friend bool operator!=(Enum value, PackSkipPixels);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c PackSkipRows value.
/**
 *  @see @ref oglplus::PixelStorageMode "PixelStorageMode"
 *
 *  @glsymbols
 *  @gldefref{PACK_SKIP_ROWS}
 *
 *  @ingroup smart_enums
 */
struct PackSkipRows {

/// Conversion to any @p Enum type having the PackSkipRows value.
/** Instances of the @ref oglplus::smart_enums::PackSkipRows "PackSkipRows"
 *  type are convertible to instances of any enumeration type having
 *  the @c PackSkipRows value.
 */
template <typename Enum, Enum = Enum::PackSkipRows> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the PackSkipRows value.
/** Instances of the @c smart_enums::PackSkipRows type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c PackSkipRows value.
 */
template <typename Enum> friend bool operator==(Enum value, PackSkipRows);

/// Non-equality comparison with any @p Enum type having the PackSkipRows value.
/** Instances of the @c smart_enums::PackSkipRows type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c PackSkipRows value.
 */
template <typename Enum> friend bool operator!=(Enum value, PackSkipRows);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c PackSwapBytes value.
/**
 *  @see @ref oglplus::PixelStorageMode "PixelStorageMode"
 *
 *  @glsymbols
 *  @gldefref{PACK_SWAP_BYTES}
 *
 *  @ingroup smart_enums
 */
struct PackSwapBytes {

/// Conversion to any @p Enum type having the PackSwapBytes value.
/** Instances of the @ref oglplus::smart_enums::PackSwapBytes "PackSwapBytes"
 *  type are convertible to instances of any enumeration type having
 *  the @c PackSwapBytes value.
 */
template <typename Enum, Enum = Enum::PackSwapBytes> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the PackSwapBytes value.
/** Instances of the @c smart_enums::PackSwapBytes type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c PackSwapBytes value.
 */
template <typename Enum> friend bool operator==(Enum value, PackSwapBytes);

/// Non-equality comparison with any @p Enum type having the PackSwapBytes value.
/** Instances of the @c smart_enums::PackSwapBytes type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c PackSwapBytes value.
 */
template <typename Enum> friend bool operator!=(Enum value, PackSwapBytes);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Parameter value.
/**
 *  @see @ref oglplus::BufferTarget "BufferTarget"
 *
 *  @glsymbols
 *  @gldefref{PARAMETER_BUFFER_ARB}
 *
 *  @ingroup smart_enums
 */
struct Parameter {

/// Conversion to any @p Enum type having the Parameter value.
/** Instances of the @ref oglplus::smart_enums::Parameter "Parameter"
 *  type are convertible to instances of any enumeration type having
 *  the @c Parameter value.
 */
template <typename Enum, Enum = Enum::Parameter> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Parameter value.
/** Instances of the @c smart_enums::Parameter type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Parameter value.
 */
template <typename Enum> friend bool operator==(Enum value, Parameter);

/// Non-equality comparison with any @p Enum type having the Parameter value.
/** Instances of the @c smart_enums::Parameter type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Parameter value.
 */
template <typename Enum> friend bool operator!=(Enum value, Parameter);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c PatchDefaultInnerLevel value.
/**
 *  @see @ref oglplus::PatchParameter "PatchParameter"
 *
 *  @glsymbols
 *  @gldefref{PATCH_DEFAULT_INNER_LEVEL}
 *
 *  @ingroup smart_enums
 */
struct PatchDefaultInnerLevel {

/// Conversion to any @p Enum type having the PatchDefaultInnerLevel value.
/** Instances of the @ref oglplus::smart_enums::PatchDefaultInnerLevel "PatchDefaultInnerLevel"
 *  type are convertible to instances of any enumeration type having
 *  the @c PatchDefaultInnerLevel value.
 */
template <typename Enum, Enum = Enum::PatchDefaultInnerLevel> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the PatchDefaultInnerLevel value.
/** Instances of the @c smart_enums::PatchDefaultInnerLevel type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c PatchDefaultInnerLevel value.
 */
template <typename Enum> friend bool operator==(Enum value, PatchDefaultInnerLevel);

/// Non-equality comparison with any @p Enum type having the PatchDefaultInnerLevel value.
/** Instances of the @c smart_enums::PatchDefaultInnerLevel type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c PatchDefaultInnerLevel value.
 */
template <typename Enum> friend bool operator!=(Enum value, PatchDefaultInnerLevel);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c PatchDefaultOuterLevel value.
/**
 *  @see @ref oglplus::PatchParameter "PatchParameter"
 *
 *  @glsymbols
 *  @gldefref{PATCH_DEFAULT_OUTER_LEVEL}
 *
 *  @ingroup smart_enums
 */
struct PatchDefaultOuterLevel {

/// Conversion to any @p Enum type having the PatchDefaultOuterLevel value.
/** Instances of the @ref oglplus::smart_enums::PatchDefaultOuterLevel "PatchDefaultOuterLevel"
 *  type are convertible to instances of any enumeration type having
 *  the @c PatchDefaultOuterLevel value.
 */
template <typename Enum, Enum = Enum::PatchDefaultOuterLevel> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the PatchDefaultOuterLevel value.
/** Instances of the @c smart_enums::PatchDefaultOuterLevel type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c PatchDefaultOuterLevel value.
 */
template <typename Enum> friend bool operator==(Enum value, PatchDefaultOuterLevel);

/// Non-equality comparison with any @p Enum type having the PatchDefaultOuterLevel value.
/** Instances of the @c smart_enums::PatchDefaultOuterLevel type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c PatchDefaultOuterLevel value.
 */
template <typename Enum> friend bool operator!=(Enum value, PatchDefaultOuterLevel);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Patches value.
/**
 *  @see @ref oglplus::PrimitiveType "PrimitiveType"
 *
 *  @glsymbols
 *  @gldefref{PATCHES}
 *
 *  @ingroup smart_enums
 */
struct Patches {

/// Conversion to any @p Enum type having the Patches value.
/** Instances of the @ref oglplus::smart_enums::Patches "Patches"
 *  type are convertible to instances of any enumeration type having
 *  the @c Patches value.
 */
template <typename Enum, Enum = Enum::Patches> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Patches value.
/** Instances of the @c smart_enums::Patches type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Patches value.
 */
template <typename Enum> friend bool operator==(Enum value, Patches);

/// Non-equality comparison with any @p Enum type having the Patches value.
/** Instances of the @c smart_enums::Patches type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Patches value.
 */
template <typename Enum> friend bool operator!=(Enum value, Patches);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c PatchVertices value.
/**
 *  @see @ref oglplus::PatchParameter "PatchParameter"
 *
 *  @glsymbols
 *  @gldefref{PATCH_VERTICES}
 *
 *  @ingroup smart_enums
 */
struct PatchVertices {

/// Conversion to any @p Enum type having the PatchVertices value.
/** Instances of the @ref oglplus::smart_enums::PatchVertices "PatchVertices"
 *  type are convertible to instances of any enumeration type having
 *  the @c PatchVertices value.
 */
template <typename Enum, Enum = Enum::PatchVertices> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the PatchVertices value.
/** Instances of the @c smart_enums::PatchVertices type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c PatchVertices value.
 */
template <typename Enum> friend bool operator==(Enum value, PatchVertices);

/// Non-equality comparison with any @p Enum type having the PatchVertices value.
/** Instances of the @c smart_enums::PatchVertices type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c PatchVertices value.
 */
template <typename Enum> friend bool operator!=(Enum value, PatchVertices);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Percentage value.
/**
 *  @see @ref oglplus::PerfMonitorAMDType "PerfMonitorAMDType"
 *
 *  @glsymbols
 *  @gldefref{PERCENTAGE_AMD}
 *
 *  @ingroup smart_enums
 */
struct Percentage {

/// Conversion to any @p Enum type having the Percentage value.
/** Instances of the @ref oglplus::smart_enums::Percentage "Percentage"
 *  type are convertible to instances of any enumeration type having
 *  the @c Percentage value.
 */
template <typename Enum, Enum = Enum::Percentage> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Percentage value.
/** Instances of the @c smart_enums::Percentage type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Percentage value.
 */
template <typename Enum> friend bool operator==(Enum value, Percentage);

/// Non-equality comparison with any @p Enum type having the Percentage value.
/** Instances of the @c smart_enums::Percentage type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Percentage value.
 */
template <typename Enum> friend bool operator!=(Enum value, Percentage);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Performance value.
/**
 *  @see @ref oglplus::DebugOutputARBType "DebugOutputARBType"
 *  @see @ref oglplus::DebugOutputType "DebugOutputType"
 *  @see @ref oglplus::DebugType "DebugType"
 *
 *  @glsymbols
 *  @gldefref{DEBUG_TYPE_PERFORMANCE}
 *  @gldefref{DEBUG_TYPE_PERFORMANCE_ARB}
 *
 *  @ingroup smart_enums
 */
struct Performance {

/// Conversion to any @p Enum type having the Performance value.
/** Instances of the @ref oglplus::smart_enums::Performance "Performance"
 *  type are convertible to instances of any enumeration type having
 *  the @c Performance value.
 */
template <typename Enum, Enum = Enum::Performance> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Performance value.
/** Instances of the @c smart_enums::Performance type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Performance value.
 */
template <typename Enum> friend bool operator==(Enum value, Performance);

/// Non-equality comparison with any @p Enum type having the Performance value.
/** Instances of the @c smart_enums::Performance type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Performance value.
 */
template <typename Enum> friend bool operator!=(Enum value, Performance);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Persistent value.
/**
 *  @see @ref oglplus::BufferMapAccess "BufferMapAccess"
 *
 *  @glsymbols
 *  @gldefref{MAP_PERSISTENT_BIT}
 *
 *  @ingroup smart_enums
 */
struct Persistent {

/// Conversion to any @p Enum type having the Persistent value.
/** Instances of the @ref oglplus::smart_enums::Persistent "Persistent"
 *  type are convertible to instances of any enumeration type having
 *  the @c Persistent value.
 */
template <typename Enum, Enum = Enum::Persistent> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Persistent value.
/** Instances of the @c smart_enums::Persistent type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Persistent value.
 */
template <typename Enum> friend bool operator==(Enum value, Persistent);

/// Non-equality comparison with any @p Enum type having the Persistent value.
/** Instances of the @c smart_enums::Persistent type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Persistent value.
 */
template <typename Enum> friend bool operator!=(Enum value, Persistent);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c PixelBuffer value.
/**
 *  @see @ref oglplus::MemoryBarrierBit "MemoryBarrierBit"
 *
 *  @glsymbols
 *  @gldefref{PIXEL_BUFFER_BARRIER_BIT}
 *
 *  @ingroup smart_enums
 */
struct PixelBuffer {

/// Conversion to any @p Enum type having the PixelBuffer value.
/** Instances of the @ref oglplus::smart_enums::PixelBuffer "PixelBuffer"
 *  type are convertible to instances of any enumeration type having
 *  the @c PixelBuffer value.
 */
template <typename Enum, Enum = Enum::PixelBuffer> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the PixelBuffer value.
/** Instances of the @c smart_enums::PixelBuffer type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c PixelBuffer value.
 */
template <typename Enum> friend bool operator==(Enum value, PixelBuffer);

/// Non-equality comparison with any @p Enum type having the PixelBuffer value.
/** Instances of the @c smart_enums::PixelBuffer type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c PixelBuffer value.
 */
template <typename Enum> friend bool operator!=(Enum value, PixelBuffer);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c PixelMode value.
/**
 *  @see @ref oglplus::CompatibilityAttributeGroup "CompatibilityAttributeGroup"
 *
 *  @glsymbols
 *  @gldefref{PIXEL_MODE_BIT}
 *
 *  @ingroup smart_enums
 */
struct PixelMode {

/// Conversion to any @p Enum type having the PixelMode value.
/** Instances of the @ref oglplus::smart_enums::PixelMode "PixelMode"
 *  type are convertible to instances of any enumeration type having
 *  the @c PixelMode value.
 */
template <typename Enum, Enum = Enum::PixelMode> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the PixelMode value.
/** Instances of the @c smart_enums::PixelMode type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c PixelMode value.
 */
template <typename Enum> friend bool operator==(Enum value, PixelMode);

/// Non-equality comparison with any @p Enum type having the PixelMode value.
/** Instances of the @c smart_enums::PixelMode type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c PixelMode value.
 */
template <typename Enum> friend bool operator!=(Enum value, PixelMode);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c PixelPack value.
/**
 *  @see @ref oglplus::BufferTarget "BufferTarget"
 *
 *  @glsymbols
 *  @gldefref{PIXEL_PACK_BUFFER}
 *
 *  @ingroup smart_enums
 */
struct PixelPack {

/// Conversion to any @p Enum type having the PixelPack value.
/** Instances of the @ref oglplus::smart_enums::PixelPack "PixelPack"
 *  type are convertible to instances of any enumeration type having
 *  the @c PixelPack value.
 */
template <typename Enum, Enum = Enum::PixelPack> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the PixelPack value.
/** Instances of the @c smart_enums::PixelPack type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c PixelPack value.
 */
template <typename Enum> friend bool operator==(Enum value, PixelPack);

/// Non-equality comparison with any @p Enum type having the PixelPack value.
/** Instances of the @c smart_enums::PixelPack type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c PixelPack value.
 */
template <typename Enum> friend bool operator!=(Enum value, PixelPack);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c PixelStore value.
/**
 *  @see @ref oglplus::CompatibilityClientAttributeGroup "CompatibilityClientAttributeGroup"
 *
 *  @glsymbols
 *  @gldefref{CLIENT_PIXEL_STORE_BIT}
 *
 *  @ingroup smart_enums
 */
struct PixelStore {

/// Conversion to any @p Enum type having the PixelStore value.
/** Instances of the @ref oglplus::smart_enums::PixelStore "PixelStore"
 *  type are convertible to instances of any enumeration type having
 *  the @c PixelStore value.
 */
template <typename Enum, Enum = Enum::PixelStore> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the PixelStore value.
/** Instances of the @c smart_enums::PixelStore type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c PixelStore value.
 */
template <typename Enum> friend bool operator==(Enum value, PixelStore);

/// Non-equality comparison with any @p Enum type having the PixelStore value.
/** Instances of the @c smart_enums::PixelStore type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c PixelStore value.
 */
template <typename Enum> friend bool operator!=(Enum value, PixelStore);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c PixelUnpack value.
/**
 *  @see @ref oglplus::BufferTarget "BufferTarget"
 *
 *  @glsymbols
 *  @gldefref{PIXEL_UNPACK_BUFFER}
 *
 *  @ingroup smart_enums
 */
struct PixelUnpack {

/// Conversion to any @p Enum type having the PixelUnpack value.
/** Instances of the @ref oglplus::smart_enums::PixelUnpack "PixelUnpack"
 *  type are convertible to instances of any enumeration type having
 *  the @c PixelUnpack value.
 */
template <typename Enum, Enum = Enum::PixelUnpack> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the PixelUnpack value.
/** Instances of the @c smart_enums::PixelUnpack type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c PixelUnpack value.
 */
template <typename Enum> friend bool operator==(Enum value, PixelUnpack);

/// Non-equality comparison with any @p Enum type having the PixelUnpack value.
/** Instances of the @c smart_enums::PixelUnpack type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c PixelUnpack value.
 */
template <typename Enum> friend bool operator!=(Enum value, PixelUnpack);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Point value.
/**
 *  @see @ref oglplus::CompatibilityAttributeGroup "CompatibilityAttributeGroup"
 *  @see @ref oglplus::PolygonMode "PolygonMode"
 *
 *  @glsymbols
 *  @gldefref{POINT}
 *  @gldefref{POINT_BIT}
 *
 *  @ingroup smart_enums
 */
struct Point {

/// Conversion to any @p Enum type having the Point value.
/** Instances of the @ref oglplus::smart_enums::Point "Point"
 *  type are convertible to instances of any enumeration type having
 *  the @c Point value.
 */
template <typename Enum, Enum = Enum::Point> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Point value.
/** Instances of the @c smart_enums::Point type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Point value.
 */
template <typename Enum> friend bool operator==(Enum value, Point);

/// Non-equality comparison with any @p Enum type having the Point value.
/** Instances of the @c smart_enums::Point type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Point value.
 */
template <typename Enum> friend bool operator!=(Enum value, Point);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Points value.
/**
 *  @see @ref oglplus::CompatibilityPrimitiveType "CompatibilityPrimitiveType"
 *  @see @ref oglplus::PrimitiveType "PrimitiveType"
 *  @see @ref oglplus::TransformFeedbackPrimitiveType "TransformFeedbackPrimitiveType"
 *
 *  @glsymbols
 *  @gldefref{POINTS}
 *
 *  @ingroup smart_enums
 */
struct Points {

/// Conversion to any @p Enum type having the Points value.
/** Instances of the @ref oglplus::smart_enums::Points "Points"
 *  type are convertible to instances of any enumeration type having
 *  the @c Points value.
 */
template <typename Enum, Enum = Enum::Points> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Points value.
/** Instances of the @c smart_enums::Points type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Points value.
 */
template <typename Enum> friend bool operator==(Enum value, Points);

/// Non-equality comparison with any @p Enum type having the Points value.
/** Instances of the @c smart_enums::Points type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Points value.
 */
template <typename Enum> friend bool operator!=(Enum value, Points);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Polygon value.
/**
 *  @see @ref oglplus::CompatibilityAttributeGroup "CompatibilityAttributeGroup"
 *  @see @ref oglplus::CompatibilityPrimitiveType "CompatibilityPrimitiveType"
 *
 *  @glsymbols
 *  @gldefref{POLYGON}
 *  @gldefref{POLYGON_BIT}
 *
 *  @ingroup smart_enums
 */
struct Polygon {

/// Conversion to any @p Enum type having the Polygon value.
/** Instances of the @ref oglplus::smart_enums::Polygon "Polygon"
 *  type are convertible to instances of any enumeration type having
 *  the @c Polygon value.
 */
template <typename Enum, Enum = Enum::Polygon> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Polygon value.
/** Instances of the @c smart_enums::Polygon type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Polygon value.
 */
template <typename Enum> friend bool operator==(Enum value, Polygon);

/// Non-equality comparison with any @p Enum type having the Polygon value.
/** Instances of the @c smart_enums::Polygon type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Polygon value.
 */
template <typename Enum> friend bool operator!=(Enum value, Polygon);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c PolygonOffsetFill value.
/**
 *  @see @ref oglplus::Capability "Capability"
 *
 *  @glsymbols
 *  @gldefref{POLYGON_OFFSET_FILL}
 *
 *  @ingroup smart_enums
 */
struct PolygonOffsetFill {

/// Conversion to any @p Enum type having the PolygonOffsetFill value.
/** Instances of the @ref oglplus::smart_enums::PolygonOffsetFill "PolygonOffsetFill"
 *  type are convertible to instances of any enumeration type having
 *  the @c PolygonOffsetFill value.
 */
template <typename Enum, Enum = Enum::PolygonOffsetFill> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the PolygonOffsetFill value.
/** Instances of the @c smart_enums::PolygonOffsetFill type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c PolygonOffsetFill value.
 */
template <typename Enum> friend bool operator==(Enum value, PolygonOffsetFill);

/// Non-equality comparison with any @p Enum type having the PolygonOffsetFill value.
/** Instances of the @c smart_enums::PolygonOffsetFill type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c PolygonOffsetFill value.
 */
template <typename Enum> friend bool operator!=(Enum value, PolygonOffsetFill);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c PolygonOffsetLine value.
/**
 *  @see @ref oglplus::Capability "Capability"
 *
 *  @glsymbols
 *  @gldefref{POLYGON_OFFSET_LINE}
 *
 *  @ingroup smart_enums
 */
struct PolygonOffsetLine {

/// Conversion to any @p Enum type having the PolygonOffsetLine value.
/** Instances of the @ref oglplus::smart_enums::PolygonOffsetLine "PolygonOffsetLine"
 *  type are convertible to instances of any enumeration type having
 *  the @c PolygonOffsetLine value.
 */
template <typename Enum, Enum = Enum::PolygonOffsetLine> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the PolygonOffsetLine value.
/** Instances of the @c smart_enums::PolygonOffsetLine type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c PolygonOffsetLine value.
 */
template <typename Enum> friend bool operator==(Enum value, PolygonOffsetLine);

/// Non-equality comparison with any @p Enum type having the PolygonOffsetLine value.
/** Instances of the @c smart_enums::PolygonOffsetLine type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c PolygonOffsetLine value.
 */
template <typename Enum> friend bool operator!=(Enum value, PolygonOffsetLine);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c PolygonOffsetPoint value.
/**
 *  @see @ref oglplus::Capability "Capability"
 *
 *  @glsymbols
 *  @gldefref{POLYGON_OFFSET_POINT}
 *
 *  @ingroup smart_enums
 */
struct PolygonOffsetPoint {

/// Conversion to any @p Enum type having the PolygonOffsetPoint value.
/** Instances of the @ref oglplus::smart_enums::PolygonOffsetPoint "PolygonOffsetPoint"
 *  type are convertible to instances of any enumeration type having
 *  the @c PolygonOffsetPoint value.
 */
template <typename Enum, Enum = Enum::PolygonOffsetPoint> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the PolygonOffsetPoint value.
/** Instances of the @c smart_enums::PolygonOffsetPoint type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c PolygonOffsetPoint value.
 */
template <typename Enum> friend bool operator==(Enum value, PolygonOffsetPoint);

/// Non-equality comparison with any @p Enum type having the PolygonOffsetPoint value.
/** Instances of the @c smart_enums::PolygonOffsetPoint type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c PolygonOffsetPoint value.
 */
template <typename Enum> friend bool operator!=(Enum value, PolygonOffsetPoint);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c PolygonSmooth value.
/**
 *  @see @ref oglplus::Capability "Capability"
 *  @see @ref oglplus::HintTarget "HintTarget"
 *
 *  @glsymbols
 *  @gldefref{POLYGON_SMOOTH}
 *  @gldefref{POLYGON_SMOOTH_HINT}
 *
 *  @ingroup smart_enums
 */
struct PolygonSmooth {

/// Conversion to any @p Enum type having the PolygonSmooth value.
/** Instances of the @ref oglplus::smart_enums::PolygonSmooth "PolygonSmooth"
 *  type are convertible to instances of any enumeration type having
 *  the @c PolygonSmooth value.
 */
template <typename Enum, Enum = Enum::PolygonSmooth> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the PolygonSmooth value.
/** Instances of the @c smart_enums::PolygonSmooth type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c PolygonSmooth value.
 */
template <typename Enum> friend bool operator==(Enum value, PolygonSmooth);

/// Non-equality comparison with any @p Enum type having the PolygonSmooth value.
/** Instances of the @c smart_enums::PolygonSmooth type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c PolygonSmooth value.
 */
template <typename Enum> friend bool operator!=(Enum value, PolygonSmooth);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c PolygonStipple value.
/**
 *  @see @ref oglplus::CompatibilityAttributeGroup "CompatibilityAttributeGroup"
 *
 *  @glsymbols
 *  @gldefref{POLYGON_STIPPLE_BIT}
 *
 *  @ingroup smart_enums
 */
struct PolygonStipple {

/// Conversion to any @p Enum type having the PolygonStipple value.
/** Instances of the @ref oglplus::smart_enums::PolygonStipple "PolygonStipple"
 *  type are convertible to instances of any enumeration type having
 *  the @c PolygonStipple value.
 */
template <typename Enum, Enum = Enum::PolygonStipple> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the PolygonStipple value.
/** Instances of the @c smart_enums::PolygonStipple type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c PolygonStipple value.
 */
template <typename Enum> friend bool operator==(Enum value, PolygonStipple);

/// Non-equality comparison with any @p Enum type having the PolygonStipple value.
/** Instances of the @c smart_enums::PolygonStipple type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c PolygonStipple value.
 */
template <typename Enum> friend bool operator!=(Enum value, PolygonStipple);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c PopGroup value.
/**
 *  @see @ref oglplus::DebugOutputType "DebugOutputType"
 *  @see @ref oglplus::DebugType "DebugType"
 *
 *  @glsymbols
 *  @gldefref{DEBUG_TYPE_POP_GROUP}
 *
 *  @ingroup smart_enums
 */
struct PopGroup {

/// Conversion to any @p Enum type having the PopGroup value.
/** Instances of the @ref oglplus::smart_enums::PopGroup "PopGroup"
 *  type are convertible to instances of any enumeration type having
 *  the @c PopGroup value.
 */
template <typename Enum, Enum = Enum::PopGroup> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the PopGroup value.
/** Instances of the @c smart_enums::PopGroup type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c PopGroup value.
 */
template <typename Enum> friend bool operator==(Enum value, PopGroup);

/// Non-equality comparison with any @p Enum type having the PopGroup value.
/** Instances of the @c smart_enums::PopGroup type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c PopGroup value.
 */
template <typename Enum> friend bool operator!=(Enum value, PopGroup);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Portability value.
/**
 *  @see @ref oglplus::DebugOutputARBType "DebugOutputARBType"
 *  @see @ref oglplus::DebugOutputType "DebugOutputType"
 *  @see @ref oglplus::DebugType "DebugType"
 *
 *  @glsymbols
 *  @gldefref{DEBUG_TYPE_PORTABILITY}
 *  @gldefref{DEBUG_TYPE_PORTABILITY_ARB}
 *
 *  @ingroup smart_enums
 */
struct Portability {

/// Conversion to any @p Enum type having the Portability value.
/** Instances of the @ref oglplus::smart_enums::Portability "Portability"
 *  type are convertible to instances of any enumeration type having
 *  the @c Portability value.
 */
template <typename Enum, Enum = Enum::Portability> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Portability value.
/** Instances of the @c smart_enums::Portability type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Portability value.
 */
template <typename Enum> friend bool operator==(Enum value, Portability);

/// Non-equality comparison with any @p Enum type having the Portability value.
/** Instances of the @c smart_enums::Portability type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Portability value.
 */
template <typename Enum> friend bool operator!=(Enum value, Portability);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Primary value.
/**
 *  @see @ref oglplus::PathNVColor "PathNVColor"
 *
 *  @glsymbols
 *  @gldefref{PRIMARY_COLOR_NV}
 *
 *  @ingroup smart_enums
 */
struct Primary {

/// Conversion to any @p Enum type having the Primary value.
/** Instances of the @ref oglplus::smart_enums::Primary "Primary"
 *  type are convertible to instances of any enumeration type having
 *  the @c Primary value.
 */
template <typename Enum, Enum = Enum::Primary> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Primary value.
/** Instances of the @c smart_enums::Primary type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Primary value.
 */
template <typename Enum> friend bool operator==(Enum value, Primary);

/// Non-equality comparison with any @p Enum type having the Primary value.
/** Instances of the @c smart_enums::Primary type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Primary value.
 */
template <typename Enum> friend bool operator!=(Enum value, Primary);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c PrimitiveRestart value.
/**
 *  @see @ref oglplus::Capability "Capability"
 *
 *  @glsymbols
 *  @gldefref{PRIMITIVE_RESTART}
 *
 *  @ingroup smart_enums
 */
struct PrimitiveRestart {

/// Conversion to any @p Enum type having the PrimitiveRestart value.
/** Instances of the @ref oglplus::smart_enums::PrimitiveRestart "PrimitiveRestart"
 *  type are convertible to instances of any enumeration type having
 *  the @c PrimitiveRestart value.
 */
template <typename Enum, Enum = Enum::PrimitiveRestart> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the PrimitiveRestart value.
/** Instances of the @c smart_enums::PrimitiveRestart type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c PrimitiveRestart value.
 */
template <typename Enum> friend bool operator==(Enum value, PrimitiveRestart);

/// Non-equality comparison with any @p Enum type having the PrimitiveRestart value.
/** Instances of the @c smart_enums::PrimitiveRestart type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c PrimitiveRestart value.
 */
template <typename Enum> friend bool operator!=(Enum value, PrimitiveRestart);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c PrimitivesGenerated value.
/**
 *  @see @ref oglplus::QueryTarget "QueryTarget"
 *
 *  @glsymbols
 *  @gldefref{PRIMITIVES_GENERATED}
 *
 *  @ingroup smart_enums
 */
struct PrimitivesGenerated {

/// Conversion to any @p Enum type having the PrimitivesGenerated value.
/** Instances of the @ref oglplus::smart_enums::PrimitivesGenerated "PrimitivesGenerated"
 *  type are convertible to instances of any enumeration type having
 *  the @c PrimitivesGenerated value.
 */
template <typename Enum, Enum = Enum::PrimitivesGenerated> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the PrimitivesGenerated value.
/** Instances of the @c smart_enums::PrimitivesGenerated type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c PrimitivesGenerated value.
 */
template <typename Enum> friend bool operator==(Enum value, PrimitivesGenerated);

/// Non-equality comparison with any @p Enum type having the PrimitivesGenerated value.
/** Instances of the @c smart_enums::PrimitivesGenerated type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c PrimitivesGenerated value.
 */
template <typename Enum> friend bool operator!=(Enum value, PrimitivesGenerated);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Program value.
/**
 *  @see @ref oglplus::ObjectType "ObjectType"
 *
 *  @glsymbols
 *  @gldefref{PROGRAM}
 *
 *  @ingroup smart_enums
 */
struct Program {

/// Conversion to any @p Enum type having the Program value.
/** Instances of the @ref oglplus::smart_enums::Program "Program"
 *  type are convertible to instances of any enumeration type having
 *  the @c Program value.
 */
template <typename Enum, Enum = Enum::Program> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Program value.
/** Instances of the @c smart_enums::Program type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Program value.
 */
template <typename Enum> friend bool operator==(Enum value, Program);

/// Non-equality comparison with any @p Enum type having the Program value.
/** Instances of the @c smart_enums::Program type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Program value.
 */
template <typename Enum> friend bool operator!=(Enum value, Program);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ProgramInput value.
/**
 *  @see @ref oglplus::ProgramInterface "ProgramInterface"
 *
 *  @glsymbols
 *  @gldefref{PROGRAM_INPUT}
 *
 *  @ingroup smart_enums
 */
struct ProgramInput {

/// Conversion to any @p Enum type having the ProgramInput value.
/** Instances of the @ref oglplus::smart_enums::ProgramInput "ProgramInput"
 *  type are convertible to instances of any enumeration type having
 *  the @c ProgramInput value.
 */
template <typename Enum, Enum = Enum::ProgramInput> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ProgramInput value.
/** Instances of the @c smart_enums::ProgramInput type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ProgramInput value.
 */
template <typename Enum> friend bool operator==(Enum value, ProgramInput);

/// Non-equality comparison with any @p Enum type having the ProgramInput value.
/** Instances of the @c smart_enums::ProgramInput type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ProgramInput value.
 */
template <typename Enum> friend bool operator!=(Enum value, ProgramInput);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ProgramOutput value.
/**
 *  @see @ref oglplus::ProgramInterface "ProgramInterface"
 *
 *  @glsymbols
 *  @gldefref{PROGRAM_OUTPUT}
 *
 *  @ingroup smart_enums
 */
struct ProgramOutput {

/// Conversion to any @p Enum type having the ProgramOutput value.
/** Instances of the @ref oglplus::smart_enums::ProgramOutput "ProgramOutput"
 *  type are convertible to instances of any enumeration type having
 *  the @c ProgramOutput value.
 */
template <typename Enum, Enum = Enum::ProgramOutput> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ProgramOutput value.
/** Instances of the @c smart_enums::ProgramOutput type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ProgramOutput value.
 */
template <typename Enum> friend bool operator==(Enum value, ProgramOutput);

/// Non-equality comparison with any @p Enum type having the ProgramOutput value.
/** Instances of the @c smart_enums::ProgramOutput type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ProgramOutput value.
 */
template <typename Enum> friend bool operator!=(Enum value, ProgramOutput);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ProgramPipeline value.
/**
 *  @see @ref oglplus::ObjectType "ObjectType"
 *
 *  @glsymbols
 *  @gldefref{PROGRAM_PIPELINE}
 *
 *  @ingroup smart_enums
 */
struct ProgramPipeline {

/// Conversion to any @p Enum type having the ProgramPipeline value.
/** Instances of the @ref oglplus::smart_enums::ProgramPipeline "ProgramPipeline"
 *  type are convertible to instances of any enumeration type having
 *  the @c ProgramPipeline value.
 */
template <typename Enum, Enum = Enum::ProgramPipeline> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ProgramPipeline value.
/** Instances of the @c smart_enums::ProgramPipeline type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ProgramPipeline value.
 */
template <typename Enum> friend bool operator==(Enum value, ProgramPipeline);

/// Non-equality comparison with any @p Enum type having the ProgramPipeline value.
/** Instances of the @c smart_enums::ProgramPipeline type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ProgramPipeline value.
 */
template <typename Enum> friend bool operator!=(Enum value, ProgramPipeline);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ProgramPointSize value.
/**
 *  @see @ref oglplus::Capability "Capability"
 *
 *  @glsymbols
 *  @gldefref{PROGRAM_POINT_SIZE}
 *
 *  @ingroup smart_enums
 */
struct ProgramPointSize {

/// Conversion to any @p Enum type having the ProgramPointSize value.
/** Instances of the @ref oglplus::smart_enums::ProgramPointSize "ProgramPointSize"
 *  type are convertible to instances of any enumeration type having
 *  the @c ProgramPointSize value.
 */
template <typename Enum, Enum = Enum::ProgramPointSize> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ProgramPointSize value.
/** Instances of the @c smart_enums::ProgramPointSize type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ProgramPointSize value.
 */
template <typename Enum> friend bool operator==(Enum value, ProgramPointSize);

/// Non-equality comparison with any @p Enum type having the ProgramPointSize value.
/** Instances of the @c smart_enums::ProgramPointSize type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ProgramPointSize value.
 */
template <typename Enum> friend bool operator!=(Enum value, ProgramPointSize);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Projection value.
/**
 *  @see @ref oglplus::CompatibilityMatrixMode "CompatibilityMatrixMode"
 *
 *  @glsymbols
 *  @gldefref{PROJECTION}
 *
 *  @ingroup smart_enums
 */
struct Projection {

/// Conversion to any @p Enum type having the Projection value.
/** Instances of the @ref oglplus::smart_enums::Projection "Projection"
 *  type are convertible to instances of any enumeration type having
 *  the @c Projection value.
 */
template <typename Enum, Enum = Enum::Projection> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Projection value.
/** Instances of the @c smart_enums::Projection type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Projection value.
 */
template <typename Enum> friend bool operator==(Enum value, Projection);

/// Non-equality comparison with any @p Enum type having the Projection value.
/** Instances of the @c smart_enums::Projection type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Projection value.
 */
template <typename Enum> friend bool operator!=(Enum value, Projection);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c PS value.
/**
 *  @see @ref oglplus::PathNVFormat "PathNVFormat"
 *
 *  @glsymbols
 *  @gldefref{PATH_FORMAT_PS_NV}
 *
 *  @ingroup smart_enums
 */
struct PS {

/// Conversion to any @p Enum type having the PS value.
/** Instances of the @ref oglplus::smart_enums::PS "PS"
 *  type are convertible to instances of any enumeration type having
 *  the @c PS value.
 */
template <typename Enum, Enum = Enum::PS> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the PS value.
/** Instances of the @c smart_enums::PS type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c PS value.
 */
template <typename Enum> friend bool operator==(Enum value, PS);

/// Non-equality comparison with any @p Enum type having the PS value.
/** Instances of the @c smart_enums::PS type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c PS value.
 */
template <typename Enum> friend bool operator!=(Enum value, PS);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c PushGroup value.
/**
 *  @see @ref oglplus::DebugOutputType "DebugOutputType"
 *  @see @ref oglplus::DebugType "DebugType"
 *
 *  @glsymbols
 *  @gldefref{DEBUG_TYPE_PUSH_GROUP}
 *
 *  @ingroup smart_enums
 */
struct PushGroup {

/// Conversion to any @p Enum type having the PushGroup value.
/** Instances of the @ref oglplus::smart_enums::PushGroup "PushGroup"
 *  type are convertible to instances of any enumeration type having
 *  the @c PushGroup value.
 */
template <typename Enum, Enum = Enum::PushGroup> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the PushGroup value.
/** Instances of the @c smart_enums::PushGroup type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c PushGroup value.
 */
template <typename Enum> friend bool operator==(Enum value, PushGroup);

/// Non-equality comparison with any @p Enum type having the PushGroup value.
/** Instances of the @c smart_enums::PushGroup type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c PushGroup value.
 */
template <typename Enum> friend bool operator!=(Enum value, PushGroup);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c QuadraticCurveTo value.
/**
 *  @see @ref oglplus::PathNVCommand "PathNVCommand"
 *
 *  @glsymbols
 *  @gldefref{QUADRATIC_CURVE_TO_NV}
 *
 *  @ingroup smart_enums
 */
struct QuadraticCurveTo {

/// Conversion to any @p Enum type having the QuadraticCurveTo value.
/** Instances of the @ref oglplus::smart_enums::QuadraticCurveTo "QuadraticCurveTo"
 *  type are convertible to instances of any enumeration type having
 *  the @c QuadraticCurveTo value.
 */
template <typename Enum, Enum = Enum::QuadraticCurveTo> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the QuadraticCurveTo value.
/** Instances of the @c smart_enums::QuadraticCurveTo type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c QuadraticCurveTo value.
 */
template <typename Enum> friend bool operator==(Enum value, QuadraticCurveTo);

/// Non-equality comparison with any @p Enum type having the QuadraticCurveTo value.
/** Instances of the @c smart_enums::QuadraticCurveTo type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c QuadraticCurveTo value.
 */
template <typename Enum> friend bool operator!=(Enum value, QuadraticCurveTo);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Quads value.
/**
 *  @see @ref oglplus::CompatibilityPrimitiveType "CompatibilityPrimitiveType"
 *  @see @ref oglplus::TessGenPrimitiveType "TessGenPrimitiveType"
 *
 *  @glsymbols
 *  @gldefref{QUADS}
 *
 *  @ingroup smart_enums
 */
struct Quads {

/// Conversion to any @p Enum type having the Quads value.
/** Instances of the @ref oglplus::smart_enums::Quads "Quads"
 *  type are convertible to instances of any enumeration type having
 *  the @c Quads value.
 */
template <typename Enum, Enum = Enum::Quads> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Quads value.
/** Instances of the @c smart_enums::Quads type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Quads value.
 */
template <typename Enum> friend bool operator==(Enum value, Quads);

/// Non-equality comparison with any @p Enum type having the Quads value.
/** Instances of the @c smart_enums::Quads type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Quads value.
 */
template <typename Enum> friend bool operator!=(Enum value, Quads);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c QuadStrip value.
/**
 *  @see @ref oglplus::CompatibilityPrimitiveType "CompatibilityPrimitiveType"
 *
 *  @glsymbols
 *  @gldefref{QUAD_STRIP}
 *
 *  @ingroup smart_enums
 */
struct QuadStrip {

/// Conversion to any @p Enum type having the QuadStrip value.
/** Instances of the @ref oglplus::smart_enums::QuadStrip "QuadStrip"
 *  type are convertible to instances of any enumeration type having
 *  the @c QuadStrip value.
 */
template <typename Enum, Enum = Enum::QuadStrip> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the QuadStrip value.
/** Instances of the @c smart_enums::QuadStrip type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c QuadStrip value.
 */
template <typename Enum> friend bool operator==(Enum value, QuadStrip);

/// Non-equality comparison with any @p Enum type having the QuadStrip value.
/** Instances of the @c smart_enums::QuadStrip type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c QuadStrip value.
 */
template <typename Enum> friend bool operator!=(Enum value, QuadStrip);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Query value.
/**
 *  @see @ref oglplus::BufferTarget "BufferTarget"
 *  @see @ref oglplus::ObjectType "ObjectType"
 *
 *  @glsymbols
 *  @gldefref{QUERY}
 *  @gldefref{QUERY_BUFFER}
 *
 *  @ingroup smart_enums
 */
struct Query {

/// Conversion to any @p Enum type having the Query value.
/** Instances of the @ref oglplus::smart_enums::Query "Query"
 *  type are convertible to instances of any enumeration type having
 *  the @c Query value.
 */
template <typename Enum, Enum = Enum::Query> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Query value.
/** Instances of the @c smart_enums::Query type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Query value.
 */
template <typename Enum> friend bool operator==(Enum value, Query);

/// Non-equality comparison with any @p Enum type having the Query value.
/** Instances of the @c smart_enums::Query type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Query value.
 */
template <typename Enum> friend bool operator!=(Enum value, Query);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c R value.
/**
 *  @see @ref oglplus::TextureSwizzleCoord "TextureSwizzleCoord"
 *  @see @ref oglplus::TextureWrapCoord "TextureWrapCoord"
 *
 *  @glsymbols
 *  @gldefref{TEXTURE_SWIZZLE_R}
 *  @gldefref{TEXTURE_WRAP_R}
 *
 *  @ingroup smart_enums
 */
struct R {

/// Conversion to any @p Enum type having the R value.
/** Instances of the @ref oglplus::smart_enums::R "R"
 *  type are convertible to instances of any enumeration type having
 *  the @c R value.
 */
template <typename Enum, Enum = Enum::R> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the R value.
/** Instances of the @c smart_enums::R type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c R value.
 */
template <typename Enum> friend bool operator==(Enum value, R);

/// Non-equality comparison with any @p Enum type having the R value.
/** Instances of the @c smart_enums::R type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c R value.
 */
template <typename Enum> friend bool operator!=(Enum value, R);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c R11FG11FB10F value.
/**
 *  @see @ref oglplus::ImageUnitFormat "ImageUnitFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{R11F_G11F_B10F}
 *
 *  @ingroup smart_enums
 */
struct R11FG11FB10F {

/// Conversion to any @p Enum type having the R11FG11FB10F value.
/** Instances of the @ref oglplus::smart_enums::R11FG11FB10F "R11FG11FB10F"
 *  type are convertible to instances of any enumeration type having
 *  the @c R11FG11FB10F value.
 */
template <typename Enum, Enum = Enum::R11FG11FB10F> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the R11FG11FB10F value.
/** Instances of the @c smart_enums::R11FG11FB10F type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c R11FG11FB10F value.
 */
template <typename Enum> friend bool operator==(Enum value, R11FG11FB10F);

/// Non-equality comparison with any @p Enum type having the R11FG11FB10F value.
/** Instances of the @c smart_enums::R11FG11FB10F type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c R11FG11FB10F value.
 */
template <typename Enum> friend bool operator!=(Enum value, R11FG11FB10F);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c R16 value.
/**
 *  @see @ref oglplus::ImageUnitFormat "ImageUnitFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{R16}
 *
 *  @ingroup smart_enums
 */
struct R16 {

/// Conversion to any @p Enum type having the R16 value.
/** Instances of the @ref oglplus::smart_enums::R16 "R16"
 *  type are convertible to instances of any enumeration type having
 *  the @c R16 value.
 */
template <typename Enum, Enum = Enum::R16> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the R16 value.
/** Instances of the @c smart_enums::R16 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c R16 value.
 */
template <typename Enum> friend bool operator==(Enum value, R16);

/// Non-equality comparison with any @p Enum type having the R16 value.
/** Instances of the @c smart_enums::R16 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c R16 value.
 */
template <typename Enum> friend bool operator!=(Enum value, R16);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c R16F value.
/**
 *  @see @ref oglplus::ImageUnitFormat "ImageUnitFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{R16F}
 *
 *  @ingroup smart_enums
 */
struct R16F {

/// Conversion to any @p Enum type having the R16F value.
/** Instances of the @ref oglplus::smart_enums::R16F "R16F"
 *  type are convertible to instances of any enumeration type having
 *  the @c R16F value.
 */
template <typename Enum, Enum = Enum::R16F> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the R16F value.
/** Instances of the @c smart_enums::R16F type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c R16F value.
 */
template <typename Enum> friend bool operator==(Enum value, R16F);

/// Non-equality comparison with any @p Enum type having the R16F value.
/** Instances of the @c smart_enums::R16F type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c R16F value.
 */
template <typename Enum> friend bool operator!=(Enum value, R16F);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c R16I value.
/**
 *  @see @ref oglplus::ImageUnitFormat "ImageUnitFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{R16I}
 *
 *  @ingroup smart_enums
 */
struct R16I {

/// Conversion to any @p Enum type having the R16I value.
/** Instances of the @ref oglplus::smart_enums::R16I "R16I"
 *  type are convertible to instances of any enumeration type having
 *  the @c R16I value.
 */
template <typename Enum, Enum = Enum::R16I> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the R16I value.
/** Instances of the @c smart_enums::R16I type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c R16I value.
 */
template <typename Enum> friend bool operator==(Enum value, R16I);

/// Non-equality comparison with any @p Enum type having the R16I value.
/** Instances of the @c smart_enums::R16I type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c R16I value.
 */
template <typename Enum> friend bool operator!=(Enum value, R16I);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c R16SNorm value.
/**
 *  @see @ref oglplus::ImageUnitFormat "ImageUnitFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{R16_SNORM}
 *
 *  @ingroup smart_enums
 */
struct R16SNorm {

/// Conversion to any @p Enum type having the R16SNorm value.
/** Instances of the @ref oglplus::smart_enums::R16SNorm "R16SNorm"
 *  type are convertible to instances of any enumeration type having
 *  the @c R16SNorm value.
 */
template <typename Enum, Enum = Enum::R16SNorm> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the R16SNorm value.
/** Instances of the @c smart_enums::R16SNorm type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c R16SNorm value.
 */
template <typename Enum> friend bool operator==(Enum value, R16SNorm);

/// Non-equality comparison with any @p Enum type having the R16SNorm value.
/** Instances of the @c smart_enums::R16SNorm type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c R16SNorm value.
 */
template <typename Enum> friend bool operator!=(Enum value, R16SNorm);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c R16UI value.
/**
 *  @see @ref oglplus::ImageUnitFormat "ImageUnitFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{R16UI}
 *
 *  @ingroup smart_enums
 */
struct R16UI {

/// Conversion to any @p Enum type having the R16UI value.
/** Instances of the @ref oglplus::smart_enums::R16UI "R16UI"
 *  type are convertible to instances of any enumeration type having
 *  the @c R16UI value.
 */
template <typename Enum, Enum = Enum::R16UI> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the R16UI value.
/** Instances of the @c smart_enums::R16UI type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c R16UI value.
 */
template <typename Enum> friend bool operator==(Enum value, R16UI);

/// Non-equality comparison with any @p Enum type having the R16UI value.
/** Instances of the @c smart_enums::R16UI type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c R16UI value.
 */
template <typename Enum> friend bool operator!=(Enum value, R16UI);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c R32F value.
/**
 *  @see @ref oglplus::ImageUnitFormat "ImageUnitFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{R32F}
 *
 *  @ingroup smart_enums
 */
struct R32F {

/// Conversion to any @p Enum type having the R32F value.
/** Instances of the @ref oglplus::smart_enums::R32F "R32F"
 *  type are convertible to instances of any enumeration type having
 *  the @c R32F value.
 */
template <typename Enum, Enum = Enum::R32F> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the R32F value.
/** Instances of the @c smart_enums::R32F type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c R32F value.
 */
template <typename Enum> friend bool operator==(Enum value, R32F);

/// Non-equality comparison with any @p Enum type having the R32F value.
/** Instances of the @c smart_enums::R32F type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c R32F value.
 */
template <typename Enum> friend bool operator!=(Enum value, R32F);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c R32I value.
/**
 *  @see @ref oglplus::ImageUnitFormat "ImageUnitFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{R32I}
 *
 *  @ingroup smart_enums
 */
struct R32I {

/// Conversion to any @p Enum type having the R32I value.
/** Instances of the @ref oglplus::smart_enums::R32I "R32I"
 *  type are convertible to instances of any enumeration type having
 *  the @c R32I value.
 */
template <typename Enum, Enum = Enum::R32I> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the R32I value.
/** Instances of the @c smart_enums::R32I type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c R32I value.
 */
template <typename Enum> friend bool operator==(Enum value, R32I);

/// Non-equality comparison with any @p Enum type having the R32I value.
/** Instances of the @c smart_enums::R32I type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c R32I value.
 */
template <typename Enum> friend bool operator!=(Enum value, R32I);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c R32UI value.
/**
 *  @see @ref oglplus::ImageUnitFormat "ImageUnitFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{R32UI}
 *
 *  @ingroup smart_enums
 */
struct R32UI {

/// Conversion to any @p Enum type having the R32UI value.
/** Instances of the @ref oglplus::smart_enums::R32UI "R32UI"
 *  type are convertible to instances of any enumeration type having
 *  the @c R32UI value.
 */
template <typename Enum, Enum = Enum::R32UI> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the R32UI value.
/** Instances of the @c smart_enums::R32UI type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c R32UI value.
 */
template <typename Enum> friend bool operator==(Enum value, R32UI);

/// Non-equality comparison with any @p Enum type having the R32UI value.
/** Instances of the @c smart_enums::R32UI type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c R32UI value.
 */
template <typename Enum> friend bool operator!=(Enum value, R32UI);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c R3G3B2 value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{R3_G3_B2}
 *
 *  @ingroup smart_enums
 */
struct R3G3B2 {

/// Conversion to any @p Enum type having the R3G3B2 value.
/** Instances of the @ref oglplus::smart_enums::R3G3B2 "R3G3B2"
 *  type are convertible to instances of any enumeration type having
 *  the @c R3G3B2 value.
 */
template <typename Enum, Enum = Enum::R3G3B2> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the R3G3B2 value.
/** Instances of the @c smart_enums::R3G3B2 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c R3G3B2 value.
 */
template <typename Enum> friend bool operator==(Enum value, R3G3B2);

/// Non-equality comparison with any @p Enum type having the R3G3B2 value.
/** Instances of the @c smart_enums::R3G3B2 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c R3G3B2 value.
 */
template <typename Enum> friend bool operator!=(Enum value, R3G3B2);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c R8 value.
/**
 *  @see @ref oglplus::ImageUnitFormat "ImageUnitFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{R8}
 *
 *  @ingroup smart_enums
 */
struct R8 {

/// Conversion to any @p Enum type having the R8 value.
/** Instances of the @ref oglplus::smart_enums::R8 "R8"
 *  type are convertible to instances of any enumeration type having
 *  the @c R8 value.
 */
template <typename Enum, Enum = Enum::R8> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the R8 value.
/** Instances of the @c smart_enums::R8 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c R8 value.
 */
template <typename Enum> friend bool operator==(Enum value, R8);

/// Non-equality comparison with any @p Enum type having the R8 value.
/** Instances of the @c smart_enums::R8 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c R8 value.
 */
template <typename Enum> friend bool operator!=(Enum value, R8);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c R8I value.
/**
 *  @see @ref oglplus::ImageUnitFormat "ImageUnitFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{R8I}
 *
 *  @ingroup smart_enums
 */
struct R8I {

/// Conversion to any @p Enum type having the R8I value.
/** Instances of the @ref oglplus::smart_enums::R8I "R8I"
 *  type are convertible to instances of any enumeration type having
 *  the @c R8I value.
 */
template <typename Enum, Enum = Enum::R8I> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the R8I value.
/** Instances of the @c smart_enums::R8I type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c R8I value.
 */
template <typename Enum> friend bool operator==(Enum value, R8I);

/// Non-equality comparison with any @p Enum type having the R8I value.
/** Instances of the @c smart_enums::R8I type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c R8I value.
 */
template <typename Enum> friend bool operator!=(Enum value, R8I);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c R8SNorm value.
/**
 *  @see @ref oglplus::ImageUnitFormat "ImageUnitFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{R8_SNORM}
 *
 *  @ingroup smart_enums
 */
struct R8SNorm {

/// Conversion to any @p Enum type having the R8SNorm value.
/** Instances of the @ref oglplus::smart_enums::R8SNorm "R8SNorm"
 *  type are convertible to instances of any enumeration type having
 *  the @c R8SNorm value.
 */
template <typename Enum, Enum = Enum::R8SNorm> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the R8SNorm value.
/** Instances of the @c smart_enums::R8SNorm type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c R8SNorm value.
 */
template <typename Enum> friend bool operator==(Enum value, R8SNorm);

/// Non-equality comparison with any @p Enum type having the R8SNorm value.
/** Instances of the @c smart_enums::R8SNorm type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c R8SNorm value.
 */
template <typename Enum> friend bool operator!=(Enum value, R8SNorm);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c R8UI value.
/**
 *  @see @ref oglplus::ImageUnitFormat "ImageUnitFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{R8UI}
 *
 *  @ingroup smart_enums
 */
struct R8UI {

/// Conversion to any @p Enum type having the R8UI value.
/** Instances of the @ref oglplus::smart_enums::R8UI "R8UI"
 *  type are convertible to instances of any enumeration type having
 *  the @c R8UI value.
 */
template <typename Enum, Enum = Enum::R8UI> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the R8UI value.
/** Instances of the @c smart_enums::R8UI type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c R8UI value.
 */
template <typename Enum> friend bool operator==(Enum value, R8UI);

/// Non-equality comparison with any @p Enum type having the R8UI value.
/** Instances of the @c smart_enums::R8UI type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c R8UI value.
 */
template <typename Enum> friend bool operator!=(Enum value, R8UI);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RasterizerDiscard value.
/**
 *  @see @ref oglplus::Capability "Capability"
 *
 *  @glsymbols
 *  @gldefref{RASTERIZER_DISCARD}
 *
 *  @ingroup smart_enums
 */
struct RasterizerDiscard {

/// Conversion to any @p Enum type having the RasterizerDiscard value.
/** Instances of the @ref oglplus::smart_enums::RasterizerDiscard "RasterizerDiscard"
 *  type are convertible to instances of any enumeration type having
 *  the @c RasterizerDiscard value.
 */
template <typename Enum, Enum = Enum::RasterizerDiscard> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RasterizerDiscard value.
/** Instances of the @c smart_enums::RasterizerDiscard type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RasterizerDiscard value.
 */
template <typename Enum> friend bool operator==(Enum value, RasterizerDiscard);

/// Non-equality comparison with any @p Enum type having the RasterizerDiscard value.
/** Instances of the @c smart_enums::RasterizerDiscard type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RasterizerDiscard value.
 */
template <typename Enum> friend bool operator!=(Enum value, RasterizerDiscard);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Read value.
/**
 *  @see @ref oglplus::BufferMapAccess "BufferMapAccess"
 *  @see @ref oglplus::FramebufferTarget "FramebufferTarget"
 *
 *  @glsymbols
 *  @gldefref{MAP_READ_BIT}
 *  @gldefref{READ_FRAMEBUFFER}
 *
 *  @ingroup smart_enums
 */
struct Read {

/// Conversion to any @p Enum type having the Read value.
/** Instances of the @ref oglplus::smart_enums::Read "Read"
 *  type are convertible to instances of any enumeration type having
 *  the @c Read value.
 */
template <typename Enum, Enum = Enum::Read> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Read value.
/** Instances of the @c smart_enums::Read type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Read value.
 */
template <typename Enum> friend bool operator==(Enum value, Read);

/// Non-equality comparison with any @p Enum type having the Read value.
/** Instances of the @c smart_enums::Read type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Read value.
 */
template <typename Enum> friend bool operator!=(Enum value, Read);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ReadOnly value.
/**
 *  @see @ref oglplus::AccessSpecifier "AccessSpecifier"
 *
 *  @glsymbols
 *  @gldefref{READ_ONLY}
 *
 *  @ingroup smart_enums
 */
struct ReadOnly {

/// Conversion to any @p Enum type having the ReadOnly value.
/** Instances of the @ref oglplus::smart_enums::ReadOnly "ReadOnly"
 *  type are convertible to instances of any enumeration type having
 *  the @c ReadOnly value.
 */
template <typename Enum, Enum = Enum::ReadOnly> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ReadOnly value.
/** Instances of the @c smart_enums::ReadOnly type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ReadOnly value.
 */
template <typename Enum> friend bool operator==(Enum value, ReadOnly);

/// Non-equality comparison with any @p Enum type having the ReadOnly value.
/** Instances of the @c smart_enums::ReadOnly type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ReadOnly value.
 */
template <typename Enum> friend bool operator!=(Enum value, ReadOnly);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ReadWrite value.
/**
 *  @see @ref oglplus::AccessSpecifier "AccessSpecifier"
 *
 *  @glsymbols
 *  @gldefref{READ_WRITE}
 *
 *  @ingroup smart_enums
 */
struct ReadWrite {

/// Conversion to any @p Enum type having the ReadWrite value.
/** Instances of the @ref oglplus::smart_enums::ReadWrite "ReadWrite"
 *  type are convertible to instances of any enumeration type having
 *  the @c ReadWrite value.
 */
template <typename Enum, Enum = Enum::ReadWrite> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ReadWrite value.
/** Instances of the @c smart_enums::ReadWrite type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ReadWrite value.
 */
template <typename Enum> friend bool operator==(Enum value, ReadWrite);

/// Non-equality comparison with any @p Enum type having the ReadWrite value.
/** Instances of the @c smart_enums::ReadWrite type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ReadWrite value.
 */
template <typename Enum> friend bool operator!=(Enum value, ReadWrite);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Rect value.
/**
 *  @see @ref oglplus::PathNVCommand "PathNVCommand"
 *
 *  @glsymbols
 *  @gldefref{RECT_NV}
 *
 *  @ingroup smart_enums
 */
struct Rect {

/// Conversion to any @p Enum type having the Rect value.
/** Instances of the @ref oglplus::smart_enums::Rect "Rect"
 *  type are convertible to instances of any enumeration type having
 *  the @c Rect value.
 */
template <typename Enum, Enum = Enum::Rect> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Rect value.
/** Instances of the @c smart_enums::Rect type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Rect value.
 */
template <typename Enum> friend bool operator==(Enum value, Rect);

/// Non-equality comparison with any @p Enum type having the Rect value.
/** Instances of the @c smart_enums::Rect type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Rect value.
 */
template <typename Enum> friend bool operator!=(Enum value, Rect);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Rectangle value.
/**
 *  @see @ref oglplus::TextureTarget "TextureTarget"
 *
 *  @glsymbols
 *  @gldefref{TEXTURE_RECTANGLE}
 *
 *  @ingroup smart_enums
 */
struct Rectangle {

/// Conversion to any @p Enum type having the Rectangle value.
/** Instances of the @ref oglplus::smart_enums::Rectangle "Rectangle"
 *  type are convertible to instances of any enumeration type having
 *  the @c Rectangle value.
 */
template <typename Enum, Enum = Enum::Rectangle> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Rectangle value.
/** Instances of the @c smart_enums::Rectangle type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Rectangle value.
 */
template <typename Enum> friend bool operator==(Enum value, Rectangle);

/// Non-equality comparison with any @p Enum type having the Rectangle value.
/** Instances of the @c smart_enums::Rectangle type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Rectangle value.
 */
template <typename Enum> friend bool operator!=(Enum value, Rectangle);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Red value.
/**
 *  @see @ref oglplus::PixelDataFormat "PixelDataFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *  @see @ref oglplus::TextureSwizzle "TextureSwizzle"
 *
 *  @glsymbols
 *  @gldefref{RED}
 *
 *  @ingroup smart_enums
 */
struct Red {

/// Conversion to any @p Enum type having the Red value.
/** Instances of the @ref oglplus::smart_enums::Red "Red"
 *  type are convertible to instances of any enumeration type having
 *  the @c Red value.
 */
template <typename Enum, Enum = Enum::Red> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Red value.
/** Instances of the @c smart_enums::Red type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Red value.
 */
template <typename Enum> friend bool operator==(Enum value, Red);

/// Non-equality comparison with any @p Enum type having the Red value.
/** Instances of the @c smart_enums::Red type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Red value.
 */
template <typename Enum> friend bool operator!=(Enum value, Red);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RedInteger value.
/**
 *  @see @ref oglplus::PixelDataFormat "PixelDataFormat"
 *
 *  @glsymbols
 *  @gldefref{RED_INTEGER}
 *
 *  @ingroup smart_enums
 */
struct RedInteger {

/// Conversion to any @p Enum type having the RedInteger value.
/** Instances of the @ref oglplus::smart_enums::RedInteger "RedInteger"
 *  type are convertible to instances of any enumeration type having
 *  the @c RedInteger value.
 */
template <typename Enum, Enum = Enum::RedInteger> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RedInteger value.
/** Instances of the @c smart_enums::RedInteger type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RedInteger value.
 */
template <typename Enum> friend bool operator==(Enum value, RedInteger);

/// Non-equality comparison with any @p Enum type having the RedInteger value.
/** Instances of the @c smart_enums::RedInteger type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RedInteger value.
 */
template <typename Enum> friend bool operator!=(Enum value, RedInteger);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ReferencedByComputeShader value.
/**
 *  @see @ref oglplus::ProgramResourceProperty "ProgramResourceProperty"
 *
 *  @glsymbols
 *  @gldefref{REFERENCED_BY_COMPUTE_SHADER}
 *
 *  @ingroup smart_enums
 */
struct ReferencedByComputeShader {

/// Conversion to any @p Enum type having the ReferencedByComputeShader value.
/** Instances of the @ref oglplus::smart_enums::ReferencedByComputeShader "ReferencedByComputeShader"
 *  type are convertible to instances of any enumeration type having
 *  the @c ReferencedByComputeShader value.
 */
template <typename Enum, Enum = Enum::ReferencedByComputeShader> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ReferencedByComputeShader value.
/** Instances of the @c smart_enums::ReferencedByComputeShader type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ReferencedByComputeShader value.
 */
template <typename Enum> friend bool operator==(Enum value, ReferencedByComputeShader);

/// Non-equality comparison with any @p Enum type having the ReferencedByComputeShader value.
/** Instances of the @c smart_enums::ReferencedByComputeShader type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ReferencedByComputeShader value.
 */
template <typename Enum> friend bool operator!=(Enum value, ReferencedByComputeShader);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ReferencedByFragmentShader value.
/**
 *  @see @ref oglplus::ProgramResourceProperty "ProgramResourceProperty"
 *
 *  @glsymbols
 *  @gldefref{REFERENCED_BY_FRAGMENT_SHADER}
 *
 *  @ingroup smart_enums
 */
struct ReferencedByFragmentShader {

/// Conversion to any @p Enum type having the ReferencedByFragmentShader value.
/** Instances of the @ref oglplus::smart_enums::ReferencedByFragmentShader "ReferencedByFragmentShader"
 *  type are convertible to instances of any enumeration type having
 *  the @c ReferencedByFragmentShader value.
 */
template <typename Enum, Enum = Enum::ReferencedByFragmentShader> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ReferencedByFragmentShader value.
/** Instances of the @c smart_enums::ReferencedByFragmentShader type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ReferencedByFragmentShader value.
 */
template <typename Enum> friend bool operator==(Enum value, ReferencedByFragmentShader);

/// Non-equality comparison with any @p Enum type having the ReferencedByFragmentShader value.
/** Instances of the @c smart_enums::ReferencedByFragmentShader type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ReferencedByFragmentShader value.
 */
template <typename Enum> friend bool operator!=(Enum value, ReferencedByFragmentShader);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ReferencedByGeometryShader value.
/**
 *  @see @ref oglplus::ProgramResourceProperty "ProgramResourceProperty"
 *
 *  @glsymbols
 *  @gldefref{REFERENCED_BY_GEOMETRY_SHADER}
 *
 *  @ingroup smart_enums
 */
struct ReferencedByGeometryShader {

/// Conversion to any @p Enum type having the ReferencedByGeometryShader value.
/** Instances of the @ref oglplus::smart_enums::ReferencedByGeometryShader "ReferencedByGeometryShader"
 *  type are convertible to instances of any enumeration type having
 *  the @c ReferencedByGeometryShader value.
 */
template <typename Enum, Enum = Enum::ReferencedByGeometryShader> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ReferencedByGeometryShader value.
/** Instances of the @c smart_enums::ReferencedByGeometryShader type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ReferencedByGeometryShader value.
 */
template <typename Enum> friend bool operator==(Enum value, ReferencedByGeometryShader);

/// Non-equality comparison with any @p Enum type having the ReferencedByGeometryShader value.
/** Instances of the @c smart_enums::ReferencedByGeometryShader type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ReferencedByGeometryShader value.
 */
template <typename Enum> friend bool operator!=(Enum value, ReferencedByGeometryShader);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ReferencedByTessControlShader value.
/**
 *  @see @ref oglplus::ProgramResourceProperty "ProgramResourceProperty"
 *
 *  @glsymbols
 *  @gldefref{REFERENCED_BY_TESS_CONTROL_SHADER}
 *
 *  @ingroup smart_enums
 */
struct ReferencedByTessControlShader {

/// Conversion to any @p Enum type having the ReferencedByTessControlShader value.
/** Instances of the @ref oglplus::smart_enums::ReferencedByTessControlShader "ReferencedByTessControlShader"
 *  type are convertible to instances of any enumeration type having
 *  the @c ReferencedByTessControlShader value.
 */
template <typename Enum, Enum = Enum::ReferencedByTessControlShader> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ReferencedByTessControlShader value.
/** Instances of the @c smart_enums::ReferencedByTessControlShader type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ReferencedByTessControlShader value.
 */
template <typename Enum> friend bool operator==(Enum value, ReferencedByTessControlShader);

/// Non-equality comparison with any @p Enum type having the ReferencedByTessControlShader value.
/** Instances of the @c smart_enums::ReferencedByTessControlShader type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ReferencedByTessControlShader value.
 */
template <typename Enum> friend bool operator!=(Enum value, ReferencedByTessControlShader);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ReferencedByTessEvaluationShader value.
/**
 *  @see @ref oglplus::ProgramResourceProperty "ProgramResourceProperty"
 *
 *  @glsymbols
 *  @gldefref{REFERENCED_BY_TESS_EVALUATION_SHADER}
 *
 *  @ingroup smart_enums
 */
struct ReferencedByTessEvaluationShader {

/// Conversion to any @p Enum type having the ReferencedByTessEvaluationShader value.
/** Instances of the @ref oglplus::smart_enums::ReferencedByTessEvaluationShader "ReferencedByTessEvaluationShader"
 *  type are convertible to instances of any enumeration type having
 *  the @c ReferencedByTessEvaluationShader value.
 */
template <typename Enum, Enum = Enum::ReferencedByTessEvaluationShader> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ReferencedByTessEvaluationShader value.
/** Instances of the @c smart_enums::ReferencedByTessEvaluationShader type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ReferencedByTessEvaluationShader value.
 */
template <typename Enum> friend bool operator==(Enum value, ReferencedByTessEvaluationShader);

/// Non-equality comparison with any @p Enum type having the ReferencedByTessEvaluationShader value.
/** Instances of the @c smart_enums::ReferencedByTessEvaluationShader type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ReferencedByTessEvaluationShader value.
 */
template <typename Enum> friend bool operator!=(Enum value, ReferencedByTessEvaluationShader);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ReferencedByVertexShader value.
/**
 *  @see @ref oglplus::ProgramResourceProperty "ProgramResourceProperty"
 *
 *  @glsymbols
 *  @gldefref{REFERENCED_BY_VERTEX_SHADER}
 *
 *  @ingroup smart_enums
 */
struct ReferencedByVertexShader {

/// Conversion to any @p Enum type having the ReferencedByVertexShader value.
/** Instances of the @ref oglplus::smart_enums::ReferencedByVertexShader "ReferencedByVertexShader"
 *  type are convertible to instances of any enumeration type having
 *  the @c ReferencedByVertexShader value.
 */
template <typename Enum, Enum = Enum::ReferencedByVertexShader> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ReferencedByVertexShader value.
/** Instances of the @c smart_enums::ReferencedByVertexShader type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ReferencedByVertexShader value.
 */
template <typename Enum> friend bool operator==(Enum value, ReferencedByVertexShader);

/// Non-equality comparison with any @p Enum type having the ReferencedByVertexShader value.
/** Instances of the @c smart_enums::ReferencedByVertexShader type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ReferencedByVertexShader value.
 */
template <typename Enum> friend bool operator!=(Enum value, ReferencedByVertexShader);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RelativeArcTo value.
/**
 *  @see @ref oglplus::PathNVCommand "PathNVCommand"
 *
 *  @glsymbols
 *  @gldefref{RELATIVE_ARC_TO_NV}
 *
 *  @ingroup smart_enums
 */
struct RelativeArcTo {

/// Conversion to any @p Enum type having the RelativeArcTo value.
/** Instances of the @ref oglplus::smart_enums::RelativeArcTo "RelativeArcTo"
 *  type are convertible to instances of any enumeration type having
 *  the @c RelativeArcTo value.
 */
template <typename Enum, Enum = Enum::RelativeArcTo> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RelativeArcTo value.
/** Instances of the @c smart_enums::RelativeArcTo type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RelativeArcTo value.
 */
template <typename Enum> friend bool operator==(Enum value, RelativeArcTo);

/// Non-equality comparison with any @p Enum type having the RelativeArcTo value.
/** Instances of the @c smart_enums::RelativeArcTo type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RelativeArcTo value.
 */
template <typename Enum> friend bool operator!=(Enum value, RelativeArcTo);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RelativeCubicCurveTo value.
/**
 *  @see @ref oglplus::PathNVCommand "PathNVCommand"
 *
 *  @glsymbols
 *  @gldefref{RELATIVE_CUBIC_CURVE_TO_NV}
 *
 *  @ingroup smart_enums
 */
struct RelativeCubicCurveTo {

/// Conversion to any @p Enum type having the RelativeCubicCurveTo value.
/** Instances of the @ref oglplus::smart_enums::RelativeCubicCurveTo "RelativeCubicCurveTo"
 *  type are convertible to instances of any enumeration type having
 *  the @c RelativeCubicCurveTo value.
 */
template <typename Enum, Enum = Enum::RelativeCubicCurveTo> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RelativeCubicCurveTo value.
/** Instances of the @c smart_enums::RelativeCubicCurveTo type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RelativeCubicCurveTo value.
 */
template <typename Enum> friend bool operator==(Enum value, RelativeCubicCurveTo);

/// Non-equality comparison with any @p Enum type having the RelativeCubicCurveTo value.
/** Instances of the @c smart_enums::RelativeCubicCurveTo type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RelativeCubicCurveTo value.
 */
template <typename Enum> friend bool operator!=(Enum value, RelativeCubicCurveTo);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RelativeHorizontalLineTo value.
/**
 *  @see @ref oglplus::PathNVCommand "PathNVCommand"
 *
 *  @glsymbols
 *  @gldefref{RELATIVE_HORIZONTAL_LINE_TO_NV}
 *
 *  @ingroup smart_enums
 */
struct RelativeHorizontalLineTo {

/// Conversion to any @p Enum type having the RelativeHorizontalLineTo value.
/** Instances of the @ref oglplus::smart_enums::RelativeHorizontalLineTo "RelativeHorizontalLineTo"
 *  type are convertible to instances of any enumeration type having
 *  the @c RelativeHorizontalLineTo value.
 */
template <typename Enum, Enum = Enum::RelativeHorizontalLineTo> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RelativeHorizontalLineTo value.
/** Instances of the @c smart_enums::RelativeHorizontalLineTo type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RelativeHorizontalLineTo value.
 */
template <typename Enum> friend bool operator==(Enum value, RelativeHorizontalLineTo);

/// Non-equality comparison with any @p Enum type having the RelativeHorizontalLineTo value.
/** Instances of the @c smart_enums::RelativeHorizontalLineTo type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RelativeHorizontalLineTo value.
 */
template <typename Enum> friend bool operator!=(Enum value, RelativeHorizontalLineTo);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RelativeLargeCCWArcTo value.
/**
 *  @see @ref oglplus::PathNVCommand "PathNVCommand"
 *
 *  @glsymbols
 *  @gldefref{RELATIVE_LARGE_CCW_ARC_TO_NV}
 *
 *  @ingroup smart_enums
 */
struct RelativeLargeCCWArcTo {

/// Conversion to any @p Enum type having the RelativeLargeCCWArcTo value.
/** Instances of the @ref oglplus::smart_enums::RelativeLargeCCWArcTo "RelativeLargeCCWArcTo"
 *  type are convertible to instances of any enumeration type having
 *  the @c RelativeLargeCCWArcTo value.
 */
template <typename Enum, Enum = Enum::RelativeLargeCCWArcTo> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RelativeLargeCCWArcTo value.
/** Instances of the @c smart_enums::RelativeLargeCCWArcTo type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RelativeLargeCCWArcTo value.
 */
template <typename Enum> friend bool operator==(Enum value, RelativeLargeCCWArcTo);

/// Non-equality comparison with any @p Enum type having the RelativeLargeCCWArcTo value.
/** Instances of the @c smart_enums::RelativeLargeCCWArcTo type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RelativeLargeCCWArcTo value.
 */
template <typename Enum> friend bool operator!=(Enum value, RelativeLargeCCWArcTo);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RelativeLargeCWArcTo value.
/**
 *  @see @ref oglplus::PathNVCommand "PathNVCommand"
 *
 *  @glsymbols
 *  @gldefref{RELATIVE_LARGE_CW_ARC_TO_NV}
 *
 *  @ingroup smart_enums
 */
struct RelativeLargeCWArcTo {

/// Conversion to any @p Enum type having the RelativeLargeCWArcTo value.
/** Instances of the @ref oglplus::smart_enums::RelativeLargeCWArcTo "RelativeLargeCWArcTo"
 *  type are convertible to instances of any enumeration type having
 *  the @c RelativeLargeCWArcTo value.
 */
template <typename Enum, Enum = Enum::RelativeLargeCWArcTo> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RelativeLargeCWArcTo value.
/** Instances of the @c smart_enums::RelativeLargeCWArcTo type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RelativeLargeCWArcTo value.
 */
template <typename Enum> friend bool operator==(Enum value, RelativeLargeCWArcTo);

/// Non-equality comparison with any @p Enum type having the RelativeLargeCWArcTo value.
/** Instances of the @c smart_enums::RelativeLargeCWArcTo type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RelativeLargeCWArcTo value.
 */
template <typename Enum> friend bool operator!=(Enum value, RelativeLargeCWArcTo);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RelativeLineTo value.
/**
 *  @see @ref oglplus::PathNVCommand "PathNVCommand"
 *
 *  @glsymbols
 *  @gldefref{RELATIVE_LINE_TO_NV}
 *
 *  @ingroup smart_enums
 */
struct RelativeLineTo {

/// Conversion to any @p Enum type having the RelativeLineTo value.
/** Instances of the @ref oglplus::smart_enums::RelativeLineTo "RelativeLineTo"
 *  type are convertible to instances of any enumeration type having
 *  the @c RelativeLineTo value.
 */
template <typename Enum, Enum = Enum::RelativeLineTo> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RelativeLineTo value.
/** Instances of the @c smart_enums::RelativeLineTo type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RelativeLineTo value.
 */
template <typename Enum> friend bool operator==(Enum value, RelativeLineTo);

/// Non-equality comparison with any @p Enum type having the RelativeLineTo value.
/** Instances of the @c smart_enums::RelativeLineTo type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RelativeLineTo value.
 */
template <typename Enum> friend bool operator!=(Enum value, RelativeLineTo);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RelativeMoveTo value.
/**
 *  @see @ref oglplus::PathNVCommand "PathNVCommand"
 *
 *  @glsymbols
 *  @gldefref{RELATIVE_MOVE_TO_NV}
 *
 *  @ingroup smart_enums
 */
struct RelativeMoveTo {

/// Conversion to any @p Enum type having the RelativeMoveTo value.
/** Instances of the @ref oglplus::smart_enums::RelativeMoveTo "RelativeMoveTo"
 *  type are convertible to instances of any enumeration type having
 *  the @c RelativeMoveTo value.
 */
template <typename Enum, Enum = Enum::RelativeMoveTo> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RelativeMoveTo value.
/** Instances of the @c smart_enums::RelativeMoveTo type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RelativeMoveTo value.
 */
template <typename Enum> friend bool operator==(Enum value, RelativeMoveTo);

/// Non-equality comparison with any @p Enum type having the RelativeMoveTo value.
/** Instances of the @c smart_enums::RelativeMoveTo type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RelativeMoveTo value.
 */
template <typename Enum> friend bool operator!=(Enum value, RelativeMoveTo);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RelativeQuadraticCurveTo value.
/**
 *  @see @ref oglplus::PathNVCommand "PathNVCommand"
 *
 *  @glsymbols
 *  @gldefref{RELATIVE_QUADRATIC_CURVE_TO_NV}
 *
 *  @ingroup smart_enums
 */
struct RelativeQuadraticCurveTo {

/// Conversion to any @p Enum type having the RelativeQuadraticCurveTo value.
/** Instances of the @ref oglplus::smart_enums::RelativeQuadraticCurveTo "RelativeQuadraticCurveTo"
 *  type are convertible to instances of any enumeration type having
 *  the @c RelativeQuadraticCurveTo value.
 */
template <typename Enum, Enum = Enum::RelativeQuadraticCurveTo> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RelativeQuadraticCurveTo value.
/** Instances of the @c smart_enums::RelativeQuadraticCurveTo type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RelativeQuadraticCurveTo value.
 */
template <typename Enum> friend bool operator==(Enum value, RelativeQuadraticCurveTo);

/// Non-equality comparison with any @p Enum type having the RelativeQuadraticCurveTo value.
/** Instances of the @c smart_enums::RelativeQuadraticCurveTo type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RelativeQuadraticCurveTo value.
 */
template <typename Enum> friend bool operator!=(Enum value, RelativeQuadraticCurveTo);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RelativeSmallCCWArcTo value.
/**
 *  @see @ref oglplus::PathNVCommand "PathNVCommand"
 *
 *  @glsymbols
 *  @gldefref{RELATIVE_SMALL_CCW_ARC_TO_NV}
 *
 *  @ingroup smart_enums
 */
struct RelativeSmallCCWArcTo {

/// Conversion to any @p Enum type having the RelativeSmallCCWArcTo value.
/** Instances of the @ref oglplus::smart_enums::RelativeSmallCCWArcTo "RelativeSmallCCWArcTo"
 *  type are convertible to instances of any enumeration type having
 *  the @c RelativeSmallCCWArcTo value.
 */
template <typename Enum, Enum = Enum::RelativeSmallCCWArcTo> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RelativeSmallCCWArcTo value.
/** Instances of the @c smart_enums::RelativeSmallCCWArcTo type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RelativeSmallCCWArcTo value.
 */
template <typename Enum> friend bool operator==(Enum value, RelativeSmallCCWArcTo);

/// Non-equality comparison with any @p Enum type having the RelativeSmallCCWArcTo value.
/** Instances of the @c smart_enums::RelativeSmallCCWArcTo type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RelativeSmallCCWArcTo value.
 */
template <typename Enum> friend bool operator!=(Enum value, RelativeSmallCCWArcTo);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RelativeSmallCWArcTo value.
/**
 *  @see @ref oglplus::PathNVCommand "PathNVCommand"
 *
 *  @glsymbols
 *  @gldefref{RELATIVE_SMALL_CW_ARC_TO_NV}
 *
 *  @ingroup smart_enums
 */
struct RelativeSmallCWArcTo {

/// Conversion to any @p Enum type having the RelativeSmallCWArcTo value.
/** Instances of the @ref oglplus::smart_enums::RelativeSmallCWArcTo "RelativeSmallCWArcTo"
 *  type are convertible to instances of any enumeration type having
 *  the @c RelativeSmallCWArcTo value.
 */
template <typename Enum, Enum = Enum::RelativeSmallCWArcTo> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RelativeSmallCWArcTo value.
/** Instances of the @c smart_enums::RelativeSmallCWArcTo type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RelativeSmallCWArcTo value.
 */
template <typename Enum> friend bool operator==(Enum value, RelativeSmallCWArcTo);

/// Non-equality comparison with any @p Enum type having the RelativeSmallCWArcTo value.
/** Instances of the @c smart_enums::RelativeSmallCWArcTo type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RelativeSmallCWArcTo value.
 */
template <typename Enum> friend bool operator!=(Enum value, RelativeSmallCWArcTo);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RelativeSmoothCubicCurveTo value.
/**
 *  @see @ref oglplus::PathNVCommand "PathNVCommand"
 *
 *  @glsymbols
 *  @gldefref{RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV}
 *
 *  @ingroup smart_enums
 */
struct RelativeSmoothCubicCurveTo {

/// Conversion to any @p Enum type having the RelativeSmoothCubicCurveTo value.
/** Instances of the @ref oglplus::smart_enums::RelativeSmoothCubicCurveTo "RelativeSmoothCubicCurveTo"
 *  type are convertible to instances of any enumeration type having
 *  the @c RelativeSmoothCubicCurveTo value.
 */
template <typename Enum, Enum = Enum::RelativeSmoothCubicCurveTo> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RelativeSmoothCubicCurveTo value.
/** Instances of the @c smart_enums::RelativeSmoothCubicCurveTo type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RelativeSmoothCubicCurveTo value.
 */
template <typename Enum> friend bool operator==(Enum value, RelativeSmoothCubicCurveTo);

/// Non-equality comparison with any @p Enum type having the RelativeSmoothCubicCurveTo value.
/** Instances of the @c smart_enums::RelativeSmoothCubicCurveTo type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RelativeSmoothCubicCurveTo value.
 */
template <typename Enum> friend bool operator!=(Enum value, RelativeSmoothCubicCurveTo);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RelativeSmoothQuadraticCurveTo value.
/**
 *  @see @ref oglplus::PathNVCommand "PathNVCommand"
 *
 *  @glsymbols
 *  @gldefref{RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV}
 *
 *  @ingroup smart_enums
 */
struct RelativeSmoothQuadraticCurveTo {

/// Conversion to any @p Enum type having the RelativeSmoothQuadraticCurveTo value.
/** Instances of the @ref oglplus::smart_enums::RelativeSmoothQuadraticCurveTo "RelativeSmoothQuadraticCurveTo"
 *  type are convertible to instances of any enumeration type having
 *  the @c RelativeSmoothQuadraticCurveTo value.
 */
template <typename Enum, Enum = Enum::RelativeSmoothQuadraticCurveTo> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RelativeSmoothQuadraticCurveTo value.
/** Instances of the @c smart_enums::RelativeSmoothQuadraticCurveTo type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RelativeSmoothQuadraticCurveTo value.
 */
template <typename Enum> friend bool operator==(Enum value, RelativeSmoothQuadraticCurveTo);

/// Non-equality comparison with any @p Enum type having the RelativeSmoothQuadraticCurveTo value.
/** Instances of the @c smart_enums::RelativeSmoothQuadraticCurveTo type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RelativeSmoothQuadraticCurveTo value.
 */
template <typename Enum> friend bool operator!=(Enum value, RelativeSmoothQuadraticCurveTo);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RelativeVerticalLineTo value.
/**
 *  @see @ref oglplus::PathNVCommand "PathNVCommand"
 *
 *  @glsymbols
 *  @gldefref{RELATIVE_VERTICAL_LINE_TO_NV}
 *
 *  @ingroup smart_enums
 */
struct RelativeVerticalLineTo {

/// Conversion to any @p Enum type having the RelativeVerticalLineTo value.
/** Instances of the @ref oglplus::smart_enums::RelativeVerticalLineTo "RelativeVerticalLineTo"
 *  type are convertible to instances of any enumeration type having
 *  the @c RelativeVerticalLineTo value.
 */
template <typename Enum, Enum = Enum::RelativeVerticalLineTo> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RelativeVerticalLineTo value.
/** Instances of the @c smart_enums::RelativeVerticalLineTo type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RelativeVerticalLineTo value.
 */
template <typename Enum> friend bool operator==(Enum value, RelativeVerticalLineTo);

/// Non-equality comparison with any @p Enum type having the RelativeVerticalLineTo value.
/** Instances of the @c smart_enums::RelativeVerticalLineTo type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RelativeVerticalLineTo value.
 */
template <typename Enum> friend bool operator!=(Enum value, RelativeVerticalLineTo);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Renderbuffer value.
/**
 *  @see @ref oglplus::ObjectType "ObjectType"
 *  @see @ref oglplus::RenderbufferTarget "RenderbufferTarget"
 *
 *  @glsymbols
 *  @gldefref{RENDERBUFFER}
 *
 *  @ingroup smart_enums
 */
struct Renderbuffer {

/// Conversion to any @p Enum type having the Renderbuffer value.
/** Instances of the @ref oglplus::smart_enums::Renderbuffer "Renderbuffer"
 *  type are convertible to instances of any enumeration type having
 *  the @c Renderbuffer value.
 */
template <typename Enum, Enum = Enum::Renderbuffer> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Renderbuffer value.
/** Instances of the @c smart_enums::Renderbuffer type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Renderbuffer value.
 */
template <typename Enum> friend bool operator==(Enum value, Renderbuffer);

/// Non-equality comparison with any @p Enum type having the Renderbuffer value.
/** Instances of the @c smart_enums::Renderbuffer type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Renderbuffer value.
 */
template <typename Enum> friend bool operator!=(Enum value, Renderbuffer);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Renderer value.
/**
 *  @see @ref oglplus::StringQuery "StringQuery"
 *
 *  @glsymbols
 *  @gldefref{RENDERER}
 *
 *  @ingroup smart_enums
 */
struct Renderer {

/// Conversion to any @p Enum type having the Renderer value.
/** Instances of the @ref oglplus::smart_enums::Renderer "Renderer"
 *  type are convertible to instances of any enumeration type having
 *  the @c Renderer value.
 */
template <typename Enum, Enum = Enum::Renderer> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Renderer value.
/** Instances of the @c smart_enums::Renderer type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Renderer value.
 */
template <typename Enum> friend bool operator==(Enum value, Renderer);

/// Non-equality comparison with any @p Enum type having the Renderer value.
/** Instances of the @c smart_enums::Renderer type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Renderer value.
 */
template <typename Enum> friend bool operator!=(Enum value, Renderer);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Repeat value.
/**
 *  @see @ref oglplus::TextureWrap "TextureWrap"
 *
 *  @glsymbols
 *  @gldefref{REPEAT}
 *
 *  @ingroup smart_enums
 */
struct Repeat {

/// Conversion to any @p Enum type having the Repeat value.
/** Instances of the @ref oglplus::smart_enums::Repeat "Repeat"
 *  type are convertible to instances of any enumeration type having
 *  the @c Repeat value.
 */
template <typename Enum, Enum = Enum::Repeat> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Repeat value.
/** Instances of the @c smart_enums::Repeat type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Repeat value.
 */
template <typename Enum> friend bool operator==(Enum value, Repeat);

/// Non-equality comparison with any @p Enum type having the Repeat value.
/** Instances of the @c smart_enums::Repeat type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Repeat value.
 */
template <typename Enum> friend bool operator!=(Enum value, Repeat);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Replace value.
/**
 *  @see @ref oglplus::StencilOperation "StencilOperation"
 *
 *  @glsymbols
 *  @gldefref{REPLACE}
 *
 *  @ingroup smart_enums
 */
struct Replace {

/// Conversion to any @p Enum type having the Replace value.
/** Instances of the @ref oglplus::smart_enums::Replace "Replace"
 *  type are convertible to instances of any enumeration type having
 *  the @c Replace value.
 */
template <typename Enum, Enum = Enum::Replace> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Replace value.
/** Instances of the @c smart_enums::Replace type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Replace value.
 */
template <typename Enum> friend bool operator==(Enum value, Replace);

/// Non-equality comparison with any @p Enum type having the Replace value.
/** Instances of the @c smart_enums::Replace type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Replace value.
 */
template <typename Enum> friend bool operator!=(Enum value, Replace);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Restart value.
/**
 *  @see @ref oglplus::PathNVCommand "PathNVCommand"
 *
 *  @glsymbols
 *  @gldefref{RESTART_PATH_NV}
 *
 *  @ingroup smart_enums
 */
struct Restart {

/// Conversion to any @p Enum type having the Restart value.
/** Instances of the @ref oglplus::smart_enums::Restart "Restart"
 *  type are convertible to instances of any enumeration type having
 *  the @c Restart value.
 */
template <typename Enum, Enum = Enum::Restart> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Restart value.
/** Instances of the @c smart_enums::Restart type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Restart value.
 */
template <typename Enum> friend bool operator==(Enum value, Restart);

/// Non-equality comparison with any @p Enum type having the Restart value.
/** Instances of the @c smart_enums::Restart type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Restart value.
 */
template <typename Enum> friend bool operator!=(Enum value, Restart);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ReverseSubtract value.
/**
 *  @see @ref oglplus::BlendEquation "BlendEquation"
 *
 *  @glsymbols
 *  @gldefref{FUNC_REVERSE_SUBTRACT}
 *
 *  @ingroup smart_enums
 */
struct ReverseSubtract {

/// Conversion to any @p Enum type having the ReverseSubtract value.
/** Instances of the @ref oglplus::smart_enums::ReverseSubtract "ReverseSubtract"
 *  type are convertible to instances of any enumeration type having
 *  the @c ReverseSubtract value.
 */
template <typename Enum, Enum = Enum::ReverseSubtract> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ReverseSubtract value.
/** Instances of the @c smart_enums::ReverseSubtract type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ReverseSubtract value.
 */
template <typename Enum> friend bool operator==(Enum value, ReverseSubtract);

/// Non-equality comparison with any @p Enum type having the ReverseSubtract value.
/** Instances of the @c smart_enums::ReverseSubtract type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ReverseSubtract value.
 */
template <typename Enum> friend bool operator!=(Enum value, ReverseSubtract);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RG value.
/**
 *  @see @ref oglplus::PixelDataFormat "PixelDataFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RG}
 *
 *  @ingroup smart_enums
 */
struct RG {

/// Conversion to any @p Enum type having the RG value.
/** Instances of the @ref oglplus::smart_enums::RG "RG"
 *  type are convertible to instances of any enumeration type having
 *  the @c RG value.
 */
template <typename Enum, Enum = Enum::RG> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RG value.
/** Instances of the @c smart_enums::RG type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RG value.
 */
template <typename Enum> friend bool operator==(Enum value, RG);

/// Non-equality comparison with any @p Enum type having the RG value.
/** Instances of the @c smart_enums::RG type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RG value.
 */
template <typename Enum> friend bool operator!=(Enum value, RG);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RG16 value.
/**
 *  @see @ref oglplus::ImageUnitFormat "ImageUnitFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RG16}
 *
 *  @ingroup smart_enums
 */
struct RG16 {

/// Conversion to any @p Enum type having the RG16 value.
/** Instances of the @ref oglplus::smart_enums::RG16 "RG16"
 *  type are convertible to instances of any enumeration type having
 *  the @c RG16 value.
 */
template <typename Enum, Enum = Enum::RG16> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RG16 value.
/** Instances of the @c smart_enums::RG16 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RG16 value.
 */
template <typename Enum> friend bool operator==(Enum value, RG16);

/// Non-equality comparison with any @p Enum type having the RG16 value.
/** Instances of the @c smart_enums::RG16 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RG16 value.
 */
template <typename Enum> friend bool operator!=(Enum value, RG16);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RG16F value.
/**
 *  @see @ref oglplus::ImageUnitFormat "ImageUnitFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RG16F}
 *
 *  @ingroup smart_enums
 */
struct RG16F {

/// Conversion to any @p Enum type having the RG16F value.
/** Instances of the @ref oglplus::smart_enums::RG16F "RG16F"
 *  type are convertible to instances of any enumeration type having
 *  the @c RG16F value.
 */
template <typename Enum, Enum = Enum::RG16F> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RG16F value.
/** Instances of the @c smart_enums::RG16F type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RG16F value.
 */
template <typename Enum> friend bool operator==(Enum value, RG16F);

/// Non-equality comparison with any @p Enum type having the RG16F value.
/** Instances of the @c smart_enums::RG16F type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RG16F value.
 */
template <typename Enum> friend bool operator!=(Enum value, RG16F);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RG16I value.
/**
 *  @see @ref oglplus::ImageUnitFormat "ImageUnitFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RG16I}
 *
 *  @ingroup smart_enums
 */
struct RG16I {

/// Conversion to any @p Enum type having the RG16I value.
/** Instances of the @ref oglplus::smart_enums::RG16I "RG16I"
 *  type are convertible to instances of any enumeration type having
 *  the @c RG16I value.
 */
template <typename Enum, Enum = Enum::RG16I> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RG16I value.
/** Instances of the @c smart_enums::RG16I type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RG16I value.
 */
template <typename Enum> friend bool operator==(Enum value, RG16I);

/// Non-equality comparison with any @p Enum type having the RG16I value.
/** Instances of the @c smart_enums::RG16I type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RG16I value.
 */
template <typename Enum> friend bool operator!=(Enum value, RG16I);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RG16SNorm value.
/**
 *  @see @ref oglplus::ImageUnitFormat "ImageUnitFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RG16_SNORM}
 *
 *  @ingroup smart_enums
 */
struct RG16SNorm {

/// Conversion to any @p Enum type having the RG16SNorm value.
/** Instances of the @ref oglplus::smart_enums::RG16SNorm "RG16SNorm"
 *  type are convertible to instances of any enumeration type having
 *  the @c RG16SNorm value.
 */
template <typename Enum, Enum = Enum::RG16SNorm> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RG16SNorm value.
/** Instances of the @c smart_enums::RG16SNorm type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RG16SNorm value.
 */
template <typename Enum> friend bool operator==(Enum value, RG16SNorm);

/// Non-equality comparison with any @p Enum type having the RG16SNorm value.
/** Instances of the @c smart_enums::RG16SNorm type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RG16SNorm value.
 */
template <typename Enum> friend bool operator!=(Enum value, RG16SNorm);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RG16UI value.
/**
 *  @see @ref oglplus::ImageUnitFormat "ImageUnitFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RG16UI}
 *
 *  @ingroup smart_enums
 */
struct RG16UI {

/// Conversion to any @p Enum type having the RG16UI value.
/** Instances of the @ref oglplus::smart_enums::RG16UI "RG16UI"
 *  type are convertible to instances of any enumeration type having
 *  the @c RG16UI value.
 */
template <typename Enum, Enum = Enum::RG16UI> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RG16UI value.
/** Instances of the @c smart_enums::RG16UI type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RG16UI value.
 */
template <typename Enum> friend bool operator==(Enum value, RG16UI);

/// Non-equality comparison with any @p Enum type having the RG16UI value.
/** Instances of the @c smart_enums::RG16UI type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RG16UI value.
 */
template <typename Enum> friend bool operator!=(Enum value, RG16UI);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RG32F value.
/**
 *  @see @ref oglplus::ImageUnitFormat "ImageUnitFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RG32F}
 *
 *  @ingroup smart_enums
 */
struct RG32F {

/// Conversion to any @p Enum type having the RG32F value.
/** Instances of the @ref oglplus::smart_enums::RG32F "RG32F"
 *  type are convertible to instances of any enumeration type having
 *  the @c RG32F value.
 */
template <typename Enum, Enum = Enum::RG32F> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RG32F value.
/** Instances of the @c smart_enums::RG32F type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RG32F value.
 */
template <typename Enum> friend bool operator==(Enum value, RG32F);

/// Non-equality comparison with any @p Enum type having the RG32F value.
/** Instances of the @c smart_enums::RG32F type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RG32F value.
 */
template <typename Enum> friend bool operator!=(Enum value, RG32F);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RG32I value.
/**
 *  @see @ref oglplus::ImageUnitFormat "ImageUnitFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RG32I}
 *
 *  @ingroup smart_enums
 */
struct RG32I {

/// Conversion to any @p Enum type having the RG32I value.
/** Instances of the @ref oglplus::smart_enums::RG32I "RG32I"
 *  type are convertible to instances of any enumeration type having
 *  the @c RG32I value.
 */
template <typename Enum, Enum = Enum::RG32I> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RG32I value.
/** Instances of the @c smart_enums::RG32I type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RG32I value.
 */
template <typename Enum> friend bool operator==(Enum value, RG32I);

/// Non-equality comparison with any @p Enum type having the RG32I value.
/** Instances of the @c smart_enums::RG32I type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RG32I value.
 */
template <typename Enum> friend bool operator!=(Enum value, RG32I);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RG32UI value.
/**
 *  @see @ref oglplus::ImageUnitFormat "ImageUnitFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RG32UI}
 *
 *  @ingroup smart_enums
 */
struct RG32UI {

/// Conversion to any @p Enum type having the RG32UI value.
/** Instances of the @ref oglplus::smart_enums::RG32UI "RG32UI"
 *  type are convertible to instances of any enumeration type having
 *  the @c RG32UI value.
 */
template <typename Enum, Enum = Enum::RG32UI> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RG32UI value.
/** Instances of the @c smart_enums::RG32UI type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RG32UI value.
 */
template <typename Enum> friend bool operator==(Enum value, RG32UI);

/// Non-equality comparison with any @p Enum type having the RG32UI value.
/** Instances of the @c smart_enums::RG32UI type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RG32UI value.
 */
template <typename Enum> friend bool operator!=(Enum value, RG32UI);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RG8 value.
/**
 *  @see @ref oglplus::ImageUnitFormat "ImageUnitFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RG8}
 *
 *  @ingroup smart_enums
 */
struct RG8 {

/// Conversion to any @p Enum type having the RG8 value.
/** Instances of the @ref oglplus::smart_enums::RG8 "RG8"
 *  type are convertible to instances of any enumeration type having
 *  the @c RG8 value.
 */
template <typename Enum, Enum = Enum::RG8> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RG8 value.
/** Instances of the @c smart_enums::RG8 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RG8 value.
 */
template <typename Enum> friend bool operator==(Enum value, RG8);

/// Non-equality comparison with any @p Enum type having the RG8 value.
/** Instances of the @c smart_enums::RG8 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RG8 value.
 */
template <typename Enum> friend bool operator!=(Enum value, RG8);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RG8I value.
/**
 *  @see @ref oglplus::ImageUnitFormat "ImageUnitFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RG8I}
 *
 *  @ingroup smart_enums
 */
struct RG8I {

/// Conversion to any @p Enum type having the RG8I value.
/** Instances of the @ref oglplus::smart_enums::RG8I "RG8I"
 *  type are convertible to instances of any enumeration type having
 *  the @c RG8I value.
 */
template <typename Enum, Enum = Enum::RG8I> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RG8I value.
/** Instances of the @c smart_enums::RG8I type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RG8I value.
 */
template <typename Enum> friend bool operator==(Enum value, RG8I);

/// Non-equality comparison with any @p Enum type having the RG8I value.
/** Instances of the @c smart_enums::RG8I type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RG8I value.
 */
template <typename Enum> friend bool operator!=(Enum value, RG8I);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RG8SNorm value.
/**
 *  @see @ref oglplus::ImageUnitFormat "ImageUnitFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RG8_SNORM}
 *
 *  @ingroup smart_enums
 */
struct RG8SNorm {

/// Conversion to any @p Enum type having the RG8SNorm value.
/** Instances of the @ref oglplus::smart_enums::RG8SNorm "RG8SNorm"
 *  type are convertible to instances of any enumeration type having
 *  the @c RG8SNorm value.
 */
template <typename Enum, Enum = Enum::RG8SNorm> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RG8SNorm value.
/** Instances of the @c smart_enums::RG8SNorm type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RG8SNorm value.
 */
template <typename Enum> friend bool operator==(Enum value, RG8SNorm);

/// Non-equality comparison with any @p Enum type having the RG8SNorm value.
/** Instances of the @c smart_enums::RG8SNorm type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RG8SNorm value.
 */
template <typename Enum> friend bool operator!=(Enum value, RG8SNorm);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RG8UI value.
/**
 *  @see @ref oglplus::ImageUnitFormat "ImageUnitFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RG8UI}
 *
 *  @ingroup smart_enums
 */
struct RG8UI {

/// Conversion to any @p Enum type having the RG8UI value.
/** Instances of the @ref oglplus::smart_enums::RG8UI "RG8UI"
 *  type are convertible to instances of any enumeration type having
 *  the @c RG8UI value.
 */
template <typename Enum, Enum = Enum::RG8UI> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RG8UI value.
/** Instances of the @c smart_enums::RG8UI type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RG8UI value.
 */
template <typename Enum> friend bool operator==(Enum value, RG8UI);

/// Non-equality comparison with any @p Enum type having the RG8UI value.
/** Instances of the @c smart_enums::RG8UI type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RG8UI value.
 */
template <typename Enum> friend bool operator!=(Enum value, RG8UI);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGB value.
/**
 *  @see @ref oglplus::PathNVColorFormat "PathNVColorFormat"
 *  @see @ref oglplus::PixelDataFormat "PixelDataFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RGB}
 *
 *  @ingroup smart_enums
 */
struct RGB {

/// Conversion to any @p Enum type having the RGB value.
/** Instances of the @ref oglplus::smart_enums::RGB "RGB"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGB value.
 */
template <typename Enum, Enum = Enum::RGB> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGB value.
/** Instances of the @c smart_enums::RGB type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGB value.
 */
template <typename Enum> friend bool operator==(Enum value, RGB);

/// Non-equality comparison with any @p Enum type having the RGB value.
/** Instances of the @c smart_enums::RGB type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGB value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGB);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGB10 value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RGB10}
 *
 *  @ingroup smart_enums
 */
struct RGB10 {

/// Conversion to any @p Enum type having the RGB10 value.
/** Instances of the @ref oglplus::smart_enums::RGB10 "RGB10"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGB10 value.
 */
template <typename Enum, Enum = Enum::RGB10> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGB10 value.
/** Instances of the @c smart_enums::RGB10 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGB10 value.
 */
template <typename Enum> friend bool operator==(Enum value, RGB10);

/// Non-equality comparison with any @p Enum type having the RGB10 value.
/** Instances of the @c smart_enums::RGB10 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGB10 value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGB10);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGB10A2 value.
/**
 *  @see @ref oglplus::ImageUnitFormat "ImageUnitFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RGB10_A2}
 *
 *  @ingroup smart_enums
 */
struct RGB10A2 {

/// Conversion to any @p Enum type having the RGB10A2 value.
/** Instances of the @ref oglplus::smart_enums::RGB10A2 "RGB10A2"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGB10A2 value.
 */
template <typename Enum, Enum = Enum::RGB10A2> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGB10A2 value.
/** Instances of the @c smart_enums::RGB10A2 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGB10A2 value.
 */
template <typename Enum> friend bool operator==(Enum value, RGB10A2);

/// Non-equality comparison with any @p Enum type having the RGB10A2 value.
/** Instances of the @c smart_enums::RGB10A2 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGB10A2 value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGB10A2);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGB10A2UI value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RGB10_A2UI}
 *
 *  @ingroup smart_enums
 */
struct RGB10A2UI {

/// Conversion to any @p Enum type having the RGB10A2UI value.
/** Instances of the @ref oglplus::smart_enums::RGB10A2UI "RGB10A2UI"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGB10A2UI value.
 */
template <typename Enum, Enum = Enum::RGB10A2UI> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGB10A2UI value.
/** Instances of the @c smart_enums::RGB10A2UI type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGB10A2UI value.
 */
template <typename Enum> friend bool operator==(Enum value, RGB10A2UI);

/// Non-equality comparison with any @p Enum type having the RGB10A2UI value.
/** Instances of the @c smart_enums::RGB10A2UI type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGB10A2UI value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGB10A2UI);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGB10_A2UI value.
/**
 *  @see @ref oglplus::ImageUnitFormat "ImageUnitFormat"
 *
 *  @glsymbols
 *  @gldefref{RGB10_A2UI}
 *
 *  @ingroup smart_enums
 */
struct RGB10_A2UI {

/// Conversion to any @p Enum type having the RGB10_A2UI value.
/** Instances of the @ref oglplus::smart_enums::RGB10_A2UI "RGB10_A2UI"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGB10_A2UI value.
 */
template <typename Enum, Enum = Enum::RGB10_A2UI> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGB10_A2UI value.
/** Instances of the @c smart_enums::RGB10_A2UI type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGB10_A2UI value.
 */
template <typename Enum> friend bool operator==(Enum value, RGB10_A2UI);

/// Non-equality comparison with any @p Enum type having the RGB10_A2UI value.
/** Instances of the @c smart_enums::RGB10_A2UI type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGB10_A2UI value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGB10_A2UI);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGB12 value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RGB12}
 *
 *  @ingroup smart_enums
 */
struct RGB12 {

/// Conversion to any @p Enum type having the RGB12 value.
/** Instances of the @ref oglplus::smart_enums::RGB12 "RGB12"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGB12 value.
 */
template <typename Enum, Enum = Enum::RGB12> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGB12 value.
/** Instances of the @c smart_enums::RGB12 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGB12 value.
 */
template <typename Enum> friend bool operator==(Enum value, RGB12);

/// Non-equality comparison with any @p Enum type having the RGB12 value.
/** Instances of the @c smart_enums::RGB12 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGB12 value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGB12);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGB16 value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RGB16}
 *
 *  @ingroup smart_enums
 */
struct RGB16 {

/// Conversion to any @p Enum type having the RGB16 value.
/** Instances of the @ref oglplus::smart_enums::RGB16 "RGB16"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGB16 value.
 */
template <typename Enum, Enum = Enum::RGB16> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGB16 value.
/** Instances of the @c smart_enums::RGB16 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGB16 value.
 */
template <typename Enum> friend bool operator==(Enum value, RGB16);

/// Non-equality comparison with any @p Enum type having the RGB16 value.
/** Instances of the @c smart_enums::RGB16 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGB16 value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGB16);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGB16F value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RGB16F}
 *
 *  @ingroup smart_enums
 */
struct RGB16F {

/// Conversion to any @p Enum type having the RGB16F value.
/** Instances of the @ref oglplus::smart_enums::RGB16F "RGB16F"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGB16F value.
 */
template <typename Enum, Enum = Enum::RGB16F> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGB16F value.
/** Instances of the @c smart_enums::RGB16F type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGB16F value.
 */
template <typename Enum> friend bool operator==(Enum value, RGB16F);

/// Non-equality comparison with any @p Enum type having the RGB16F value.
/** Instances of the @c smart_enums::RGB16F type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGB16F value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGB16F);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGB16I value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RGB16I}
 *
 *  @ingroup smart_enums
 */
struct RGB16I {

/// Conversion to any @p Enum type having the RGB16I value.
/** Instances of the @ref oglplus::smart_enums::RGB16I "RGB16I"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGB16I value.
 */
template <typename Enum, Enum = Enum::RGB16I> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGB16I value.
/** Instances of the @c smart_enums::RGB16I type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGB16I value.
 */
template <typename Enum> friend bool operator==(Enum value, RGB16I);

/// Non-equality comparison with any @p Enum type having the RGB16I value.
/** Instances of the @c smart_enums::RGB16I type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGB16I value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGB16I);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGB16SNorm value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RGB16_SNORM}
 *
 *  @ingroup smart_enums
 */
struct RGB16SNorm {

/// Conversion to any @p Enum type having the RGB16SNorm value.
/** Instances of the @ref oglplus::smart_enums::RGB16SNorm "RGB16SNorm"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGB16SNorm value.
 */
template <typename Enum, Enum = Enum::RGB16SNorm> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGB16SNorm value.
/** Instances of the @c smart_enums::RGB16SNorm type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGB16SNorm value.
 */
template <typename Enum> friend bool operator==(Enum value, RGB16SNorm);

/// Non-equality comparison with any @p Enum type having the RGB16SNorm value.
/** Instances of the @c smart_enums::RGB16SNorm type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGB16SNorm value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGB16SNorm);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGB16UI value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RGB16UI}
 *
 *  @ingroup smart_enums
 */
struct RGB16UI {

/// Conversion to any @p Enum type having the RGB16UI value.
/** Instances of the @ref oglplus::smart_enums::RGB16UI "RGB16UI"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGB16UI value.
 */
template <typename Enum, Enum = Enum::RGB16UI> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGB16UI value.
/** Instances of the @c smart_enums::RGB16UI type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGB16UI value.
 */
template <typename Enum> friend bool operator==(Enum value, RGB16UI);

/// Non-equality comparison with any @p Enum type having the RGB16UI value.
/** Instances of the @c smart_enums::RGB16UI type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGB16UI value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGB16UI);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGB32F value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RGB32F}
 *
 *  @ingroup smart_enums
 */
struct RGB32F {

/// Conversion to any @p Enum type having the RGB32F value.
/** Instances of the @ref oglplus::smart_enums::RGB32F "RGB32F"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGB32F value.
 */
template <typename Enum, Enum = Enum::RGB32F> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGB32F value.
/** Instances of the @c smart_enums::RGB32F type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGB32F value.
 */
template <typename Enum> friend bool operator==(Enum value, RGB32F);

/// Non-equality comparison with any @p Enum type having the RGB32F value.
/** Instances of the @c smart_enums::RGB32F type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGB32F value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGB32F);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGB32I value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RGB32I}
 *
 *  @ingroup smart_enums
 */
struct RGB32I {

/// Conversion to any @p Enum type having the RGB32I value.
/** Instances of the @ref oglplus::smart_enums::RGB32I "RGB32I"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGB32I value.
 */
template <typename Enum, Enum = Enum::RGB32I> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGB32I value.
/** Instances of the @c smart_enums::RGB32I type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGB32I value.
 */
template <typename Enum> friend bool operator==(Enum value, RGB32I);

/// Non-equality comparison with any @p Enum type having the RGB32I value.
/** Instances of the @c smart_enums::RGB32I type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGB32I value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGB32I);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGB32UI value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RGB32UI}
 *
 *  @ingroup smart_enums
 */
struct RGB32UI {

/// Conversion to any @p Enum type having the RGB32UI value.
/** Instances of the @ref oglplus::smart_enums::RGB32UI "RGB32UI"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGB32UI value.
 */
template <typename Enum, Enum = Enum::RGB32UI> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGB32UI value.
/** Instances of the @c smart_enums::RGB32UI type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGB32UI value.
 */
template <typename Enum> friend bool operator==(Enum value, RGB32UI);

/// Non-equality comparison with any @p Enum type having the RGB32UI value.
/** Instances of the @c smart_enums::RGB32UI type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGB32UI value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGB32UI);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGB4 value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RGB4}
 *
 *  @ingroup smart_enums
 */
struct RGB4 {

/// Conversion to any @p Enum type having the RGB4 value.
/** Instances of the @ref oglplus::smart_enums::RGB4 "RGB4"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGB4 value.
 */
template <typename Enum, Enum = Enum::RGB4> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGB4 value.
/** Instances of the @c smart_enums::RGB4 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGB4 value.
 */
template <typename Enum> friend bool operator==(Enum value, RGB4);

/// Non-equality comparison with any @p Enum type having the RGB4 value.
/** Instances of the @c smart_enums::RGB4 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGB4 value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGB4);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGB5 value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RGB5}
 *
 *  @ingroup smart_enums
 */
struct RGB5 {

/// Conversion to any @p Enum type having the RGB5 value.
/** Instances of the @ref oglplus::smart_enums::RGB5 "RGB5"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGB5 value.
 */
template <typename Enum, Enum = Enum::RGB5> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGB5 value.
/** Instances of the @c smart_enums::RGB5 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGB5 value.
 */
template <typename Enum> friend bool operator==(Enum value, RGB5);

/// Non-equality comparison with any @p Enum type having the RGB5 value.
/** Instances of the @c smart_enums::RGB5 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGB5 value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGB5);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGB5A1 value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RGB5_A1}
 *
 *  @ingroup smart_enums
 */
struct RGB5A1 {

/// Conversion to any @p Enum type having the RGB5A1 value.
/** Instances of the @ref oglplus::smart_enums::RGB5A1 "RGB5A1"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGB5A1 value.
 */
template <typename Enum, Enum = Enum::RGB5A1> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGB5A1 value.
/** Instances of the @c smart_enums::RGB5A1 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGB5A1 value.
 */
template <typename Enum> friend bool operator==(Enum value, RGB5A1);

/// Non-equality comparison with any @p Enum type having the RGB5A1 value.
/** Instances of the @c smart_enums::RGB5A1 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGB5A1 value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGB5A1);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGB8 value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RGB8}
 *
 *  @ingroup smart_enums
 */
struct RGB8 {

/// Conversion to any @p Enum type having the RGB8 value.
/** Instances of the @ref oglplus::smart_enums::RGB8 "RGB8"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGB8 value.
 */
template <typename Enum, Enum = Enum::RGB8> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGB8 value.
/** Instances of the @c smart_enums::RGB8 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGB8 value.
 */
template <typename Enum> friend bool operator==(Enum value, RGB8);

/// Non-equality comparison with any @p Enum type having the RGB8 value.
/** Instances of the @c smart_enums::RGB8 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGB8 value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGB8);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGB8I value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RGB8I}
 *
 *  @ingroup smart_enums
 */
struct RGB8I {

/// Conversion to any @p Enum type having the RGB8I value.
/** Instances of the @ref oglplus::smart_enums::RGB8I "RGB8I"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGB8I value.
 */
template <typename Enum, Enum = Enum::RGB8I> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGB8I value.
/** Instances of the @c smart_enums::RGB8I type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGB8I value.
 */
template <typename Enum> friend bool operator==(Enum value, RGB8I);

/// Non-equality comparison with any @p Enum type having the RGB8I value.
/** Instances of the @c smart_enums::RGB8I type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGB8I value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGB8I);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGB8SNorm value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RGB8_SNORM}
 *
 *  @ingroup smart_enums
 */
struct RGB8SNorm {

/// Conversion to any @p Enum type having the RGB8SNorm value.
/** Instances of the @ref oglplus::smart_enums::RGB8SNorm "RGB8SNorm"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGB8SNorm value.
 */
template <typename Enum, Enum = Enum::RGB8SNorm> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGB8SNorm value.
/** Instances of the @c smart_enums::RGB8SNorm type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGB8SNorm value.
 */
template <typename Enum> friend bool operator==(Enum value, RGB8SNorm);

/// Non-equality comparison with any @p Enum type having the RGB8SNorm value.
/** Instances of the @c smart_enums::RGB8SNorm type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGB8SNorm value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGB8SNorm);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGB8UI value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RGB8UI}
 *
 *  @ingroup smart_enums
 */
struct RGB8UI {

/// Conversion to any @p Enum type having the RGB8UI value.
/** Instances of the @ref oglplus::smart_enums::RGB8UI "RGB8UI"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGB8UI value.
 */
template <typename Enum, Enum = Enum::RGB8UI> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGB8UI value.
/** Instances of the @c smart_enums::RGB8UI type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGB8UI value.
 */
template <typename Enum> friend bool operator==(Enum value, RGB8UI);

/// Non-equality comparison with any @p Enum type having the RGB8UI value.
/** Instances of the @c smart_enums::RGB8UI type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGB8UI value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGB8UI);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGB9E5 value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RGB9_E5}
 *
 *  @ingroup smart_enums
 */
struct RGB9E5 {

/// Conversion to any @p Enum type having the RGB9E5 value.
/** Instances of the @ref oglplus::smart_enums::RGB9E5 "RGB9E5"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGB9E5 value.
 */
template <typename Enum, Enum = Enum::RGB9E5> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGB9E5 value.
/** Instances of the @c smart_enums::RGB9E5 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGB9E5 value.
 */
template <typename Enum> friend bool operator==(Enum value, RGB9E5);

/// Non-equality comparison with any @p Enum type having the RGB9E5 value.
/** Instances of the @c smart_enums::RGB9E5 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGB9E5 value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGB9E5);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGBA value.
/**
 *  @see @ref oglplus::PathNVColorFormat "PathNVColorFormat"
 *  @see @ref oglplus::PixelDataFormat "PixelDataFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *  @see @ref oglplus::TextureSwizzleCoord "TextureSwizzleCoord"
 *
 *  @glsymbols
 *  @gldefref{RGBA}
 *  @gldefref{TEXTURE_SWIZZLE_RGBA}
 *
 *  @ingroup smart_enums
 */
struct RGBA {

/// Conversion to any @p Enum type having the RGBA value.
/** Instances of the @ref oglplus::smart_enums::RGBA "RGBA"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGBA value.
 */
template <typename Enum, Enum = Enum::RGBA> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGBA value.
/** Instances of the @c smart_enums::RGBA type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGBA value.
 */
template <typename Enum> friend bool operator==(Enum value, RGBA);

/// Non-equality comparison with any @p Enum type having the RGBA value.
/** Instances of the @c smart_enums::RGBA type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGBA value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGBA);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGBA12 value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RGBA12}
 *
 *  @ingroup smart_enums
 */
struct RGBA12 {

/// Conversion to any @p Enum type having the RGBA12 value.
/** Instances of the @ref oglplus::smart_enums::RGBA12 "RGBA12"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGBA12 value.
 */
template <typename Enum, Enum = Enum::RGBA12> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGBA12 value.
/** Instances of the @c smart_enums::RGBA12 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGBA12 value.
 */
template <typename Enum> friend bool operator==(Enum value, RGBA12);

/// Non-equality comparison with any @p Enum type having the RGBA12 value.
/** Instances of the @c smart_enums::RGBA12 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGBA12 value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGBA12);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGBA16 value.
/**
 *  @see @ref oglplus::ImageUnitFormat "ImageUnitFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RGBA16}
 *
 *  @ingroup smart_enums
 */
struct RGBA16 {

/// Conversion to any @p Enum type having the RGBA16 value.
/** Instances of the @ref oglplus::smart_enums::RGBA16 "RGBA16"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGBA16 value.
 */
template <typename Enum, Enum = Enum::RGBA16> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGBA16 value.
/** Instances of the @c smart_enums::RGBA16 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGBA16 value.
 */
template <typename Enum> friend bool operator==(Enum value, RGBA16);

/// Non-equality comparison with any @p Enum type having the RGBA16 value.
/** Instances of the @c smart_enums::RGBA16 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGBA16 value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGBA16);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGBA16F value.
/**
 *  @see @ref oglplus::ImageUnitFormat "ImageUnitFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RGBA16F}
 *
 *  @ingroup smart_enums
 */
struct RGBA16F {

/// Conversion to any @p Enum type having the RGBA16F value.
/** Instances of the @ref oglplus::smart_enums::RGBA16F "RGBA16F"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGBA16F value.
 */
template <typename Enum, Enum = Enum::RGBA16F> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGBA16F value.
/** Instances of the @c smart_enums::RGBA16F type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGBA16F value.
 */
template <typename Enum> friend bool operator==(Enum value, RGBA16F);

/// Non-equality comparison with any @p Enum type having the RGBA16F value.
/** Instances of the @c smart_enums::RGBA16F type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGBA16F value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGBA16F);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGBA16I value.
/**
 *  @see @ref oglplus::ImageUnitFormat "ImageUnitFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RGBA16I}
 *
 *  @ingroup smart_enums
 */
struct RGBA16I {

/// Conversion to any @p Enum type having the RGBA16I value.
/** Instances of the @ref oglplus::smart_enums::RGBA16I "RGBA16I"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGBA16I value.
 */
template <typename Enum, Enum = Enum::RGBA16I> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGBA16I value.
/** Instances of the @c smart_enums::RGBA16I type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGBA16I value.
 */
template <typename Enum> friend bool operator==(Enum value, RGBA16I);

/// Non-equality comparison with any @p Enum type having the RGBA16I value.
/** Instances of the @c smart_enums::RGBA16I type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGBA16I value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGBA16I);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGBA16SNorm value.
/**
 *  @see @ref oglplus::ImageUnitFormat "ImageUnitFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RGBA16_SNORM}
 *
 *  @ingroup smart_enums
 */
struct RGBA16SNorm {

/// Conversion to any @p Enum type having the RGBA16SNorm value.
/** Instances of the @ref oglplus::smart_enums::RGBA16SNorm "RGBA16SNorm"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGBA16SNorm value.
 */
template <typename Enum, Enum = Enum::RGBA16SNorm> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGBA16SNorm value.
/** Instances of the @c smart_enums::RGBA16SNorm type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGBA16SNorm value.
 */
template <typename Enum> friend bool operator==(Enum value, RGBA16SNorm);

/// Non-equality comparison with any @p Enum type having the RGBA16SNorm value.
/** Instances of the @c smart_enums::RGBA16SNorm type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGBA16SNorm value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGBA16SNorm);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGBA16UI value.
/**
 *  @see @ref oglplus::ImageUnitFormat "ImageUnitFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RGBA16UI}
 *
 *  @ingroup smart_enums
 */
struct RGBA16UI {

/// Conversion to any @p Enum type having the RGBA16UI value.
/** Instances of the @ref oglplus::smart_enums::RGBA16UI "RGBA16UI"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGBA16UI value.
 */
template <typename Enum, Enum = Enum::RGBA16UI> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGBA16UI value.
/** Instances of the @c smart_enums::RGBA16UI type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGBA16UI value.
 */
template <typename Enum> friend bool operator==(Enum value, RGBA16UI);

/// Non-equality comparison with any @p Enum type having the RGBA16UI value.
/** Instances of the @c smart_enums::RGBA16UI type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGBA16UI value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGBA16UI);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGBA2 value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RGBA2}
 *
 *  @ingroup smart_enums
 */
struct RGBA2 {

/// Conversion to any @p Enum type having the RGBA2 value.
/** Instances of the @ref oglplus::smart_enums::RGBA2 "RGBA2"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGBA2 value.
 */
template <typename Enum, Enum = Enum::RGBA2> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGBA2 value.
/** Instances of the @c smart_enums::RGBA2 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGBA2 value.
 */
template <typename Enum> friend bool operator==(Enum value, RGBA2);

/// Non-equality comparison with any @p Enum type having the RGBA2 value.
/** Instances of the @c smart_enums::RGBA2 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGBA2 value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGBA2);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGBA32F value.
/**
 *  @see @ref oglplus::ImageUnitFormat "ImageUnitFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RGBA32F}
 *
 *  @ingroup smart_enums
 */
struct RGBA32F {

/// Conversion to any @p Enum type having the RGBA32F value.
/** Instances of the @ref oglplus::smart_enums::RGBA32F "RGBA32F"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGBA32F value.
 */
template <typename Enum, Enum = Enum::RGBA32F> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGBA32F value.
/** Instances of the @c smart_enums::RGBA32F type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGBA32F value.
 */
template <typename Enum> friend bool operator==(Enum value, RGBA32F);

/// Non-equality comparison with any @p Enum type having the RGBA32F value.
/** Instances of the @c smart_enums::RGBA32F type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGBA32F value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGBA32F);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGBA32I value.
/**
 *  @see @ref oglplus::ImageUnitFormat "ImageUnitFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RGBA32I}
 *
 *  @ingroup smart_enums
 */
struct RGBA32I {

/// Conversion to any @p Enum type having the RGBA32I value.
/** Instances of the @ref oglplus::smart_enums::RGBA32I "RGBA32I"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGBA32I value.
 */
template <typename Enum, Enum = Enum::RGBA32I> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGBA32I value.
/** Instances of the @c smart_enums::RGBA32I type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGBA32I value.
 */
template <typename Enum> friend bool operator==(Enum value, RGBA32I);

/// Non-equality comparison with any @p Enum type having the RGBA32I value.
/** Instances of the @c smart_enums::RGBA32I type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGBA32I value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGBA32I);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGBA32UI value.
/**
 *  @see @ref oglplus::ImageUnitFormat "ImageUnitFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RGBA32UI}
 *
 *  @ingroup smart_enums
 */
struct RGBA32UI {

/// Conversion to any @p Enum type having the RGBA32UI value.
/** Instances of the @ref oglplus::smart_enums::RGBA32UI "RGBA32UI"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGBA32UI value.
 */
template <typename Enum, Enum = Enum::RGBA32UI> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGBA32UI value.
/** Instances of the @c smart_enums::RGBA32UI type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGBA32UI value.
 */
template <typename Enum> friend bool operator==(Enum value, RGBA32UI);

/// Non-equality comparison with any @p Enum type having the RGBA32UI value.
/** Instances of the @c smart_enums::RGBA32UI type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGBA32UI value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGBA32UI);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGBA4 value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RGBA4}
 *
 *  @ingroup smart_enums
 */
struct RGBA4 {

/// Conversion to any @p Enum type having the RGBA4 value.
/** Instances of the @ref oglplus::smart_enums::RGBA4 "RGBA4"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGBA4 value.
 */
template <typename Enum, Enum = Enum::RGBA4> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGBA4 value.
/** Instances of the @c smart_enums::RGBA4 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGBA4 value.
 */
template <typename Enum> friend bool operator==(Enum value, RGBA4);

/// Non-equality comparison with any @p Enum type having the RGBA4 value.
/** Instances of the @c smart_enums::RGBA4 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGBA4 value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGBA4);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGBA8 value.
/**
 *  @see @ref oglplus::ImageUnitFormat "ImageUnitFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RGBA8}
 *
 *  @ingroup smart_enums
 */
struct RGBA8 {

/// Conversion to any @p Enum type having the RGBA8 value.
/** Instances of the @ref oglplus::smart_enums::RGBA8 "RGBA8"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGBA8 value.
 */
template <typename Enum, Enum = Enum::RGBA8> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGBA8 value.
/** Instances of the @c smart_enums::RGBA8 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGBA8 value.
 */
template <typename Enum> friend bool operator==(Enum value, RGBA8);

/// Non-equality comparison with any @p Enum type having the RGBA8 value.
/** Instances of the @c smart_enums::RGBA8 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGBA8 value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGBA8);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGBA8I value.
/**
 *  @see @ref oglplus::ImageUnitFormat "ImageUnitFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RGBA8I}
 *
 *  @ingroup smart_enums
 */
struct RGBA8I {

/// Conversion to any @p Enum type having the RGBA8I value.
/** Instances of the @ref oglplus::smart_enums::RGBA8I "RGBA8I"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGBA8I value.
 */
template <typename Enum, Enum = Enum::RGBA8I> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGBA8I value.
/** Instances of the @c smart_enums::RGBA8I type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGBA8I value.
 */
template <typename Enum> friend bool operator==(Enum value, RGBA8I);

/// Non-equality comparison with any @p Enum type having the RGBA8I value.
/** Instances of the @c smart_enums::RGBA8I type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGBA8I value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGBA8I);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGBA8SNorm value.
/**
 *  @see @ref oglplus::ImageUnitFormat "ImageUnitFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RGBA8_SNORM}
 *
 *  @ingroup smart_enums
 */
struct RGBA8SNorm {

/// Conversion to any @p Enum type having the RGBA8SNorm value.
/** Instances of the @ref oglplus::smart_enums::RGBA8SNorm "RGBA8SNorm"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGBA8SNorm value.
 */
template <typename Enum, Enum = Enum::RGBA8SNorm> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGBA8SNorm value.
/** Instances of the @c smart_enums::RGBA8SNorm type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGBA8SNorm value.
 */
template <typename Enum> friend bool operator==(Enum value, RGBA8SNorm);

/// Non-equality comparison with any @p Enum type having the RGBA8SNorm value.
/** Instances of the @c smart_enums::RGBA8SNorm type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGBA8SNorm value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGBA8SNorm);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGBA8UI value.
/**
 *  @see @ref oglplus::ImageUnitFormat "ImageUnitFormat"
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{RGBA8UI}
 *
 *  @ingroup smart_enums
 */
struct RGBA8UI {

/// Conversion to any @p Enum type having the RGBA8UI value.
/** Instances of the @ref oglplus::smart_enums::RGBA8UI "RGBA8UI"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGBA8UI value.
 */
template <typename Enum, Enum = Enum::RGBA8UI> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGBA8UI value.
/** Instances of the @c smart_enums::RGBA8UI type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGBA8UI value.
 */
template <typename Enum> friend bool operator==(Enum value, RGBA8UI);

/// Non-equality comparison with any @p Enum type having the RGBA8UI value.
/** Instances of the @c smart_enums::RGBA8UI type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGBA8UI value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGBA8UI);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGBAInteger value.
/**
 *  @see @ref oglplus::PixelDataFormat "PixelDataFormat"
 *
 *  @glsymbols
 *  @gldefref{RGBA_INTEGER}
 *
 *  @ingroup smart_enums
 */
struct RGBAInteger {

/// Conversion to any @p Enum type having the RGBAInteger value.
/** Instances of the @ref oglplus::smart_enums::RGBAInteger "RGBAInteger"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGBAInteger value.
 */
template <typename Enum, Enum = Enum::RGBAInteger> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGBAInteger value.
/** Instances of the @c smart_enums::RGBAInteger type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGBAInteger value.
 */
template <typename Enum> friend bool operator==(Enum value, RGBAInteger);

/// Non-equality comparison with any @p Enum type having the RGBAInteger value.
/** Instances of the @c smart_enums::RGBAInteger type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGBAInteger value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGBAInteger);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGBInteger value.
/**
 *  @see @ref oglplus::PixelDataFormat "PixelDataFormat"
 *
 *  @glsymbols
 *  @gldefref{RGB_INTEGER}
 *
 *  @ingroup smart_enums
 */
struct RGBInteger {

/// Conversion to any @p Enum type having the RGBInteger value.
/** Instances of the @ref oglplus::smart_enums::RGBInteger "RGBInteger"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGBInteger value.
 */
template <typename Enum, Enum = Enum::RGBInteger> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGBInteger value.
/** Instances of the @c smart_enums::RGBInteger type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGBInteger value.
 */
template <typename Enum> friend bool operator==(Enum value, RGBInteger);

/// Non-equality comparison with any @p Enum type having the RGBInteger value.
/** Instances of the @c smart_enums::RGBInteger type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGBInteger value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGBInteger);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RGInteger value.
/**
 *  @see @ref oglplus::PixelDataFormat "PixelDataFormat"
 *
 *  @glsymbols
 *  @gldefref{RG_INTEGER}
 *
 *  @ingroup smart_enums
 */
struct RGInteger {

/// Conversion to any @p Enum type having the RGInteger value.
/** Instances of the @ref oglplus::smart_enums::RGInteger "RGInteger"
 *  type are convertible to instances of any enumeration type having
 *  the @c RGInteger value.
 */
template <typename Enum, Enum = Enum::RGInteger> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RGInteger value.
/** Instances of the @c smart_enums::RGInteger type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RGInteger value.
 */
template <typename Enum> friend bool operator==(Enum value, RGInteger);

/// Non-equality comparison with any @p Enum type having the RGInteger value.
/** Instances of the @c smart_enums::RGInteger type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RGInteger value.
 */
template <typename Enum> friend bool operator!=(Enum value, RGInteger);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Right value.
/**
 *  @see @ref oglplus::ColorBuffer "ColorBuffer"
 *
 *  @glsymbols
 *  @gldefref{RIGHT}
 *
 *  @ingroup smart_enums
 */
struct Right {

/// Conversion to any @p Enum type having the Right value.
/** Instances of the @ref oglplus::smart_enums::Right "Right"
 *  type are convertible to instances of any enumeration type having
 *  the @c Right value.
 */
template <typename Enum, Enum = Enum::Right> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Right value.
/** Instances of the @c smart_enums::Right type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Right value.
 */
template <typename Enum> friend bool operator==(Enum value, Right);

/// Non-equality comparison with any @p Enum type having the Right value.
/** Instances of the @c smart_enums::Right type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Right value.
 */
template <typename Enum> friend bool operator!=(Enum value, Right);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c RobustAccess value.
/**
 *  @see @ref oglplus::ContextFlagBit "ContextFlagBit"
 *
 *  @glsymbols
 *  @gldefref{CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB}
 *
 *  @ingroup smart_enums
 */
struct RobustAccess {

/// Conversion to any @p Enum type having the RobustAccess value.
/** Instances of the @ref oglplus::smart_enums::RobustAccess "RobustAccess"
 *  type are convertible to instances of any enumeration type having
 *  the @c RobustAccess value.
 */
template <typename Enum, Enum = Enum::RobustAccess> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the RobustAccess value.
/** Instances of the @c smart_enums::RobustAccess type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c RobustAccess value.
 */
template <typename Enum> friend bool operator==(Enum value, RobustAccess);

/// Non-equality comparison with any @p Enum type having the RobustAccess value.
/** Instances of the @c smart_enums::RobustAccess type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c RobustAccess value.
 */
template <typename Enum> friend bool operator!=(Enum value, RobustAccess);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Round value.
/**
 *  @see @ref oglplus::PathNVCapStyle "PathNVCapStyle"
 *  @see @ref oglplus::PathNVJoinStyle "PathNVJoinStyle"
 *
 *  @glsymbols
 *  @gldefref{ROUND_NV}
 *
 *  @ingroup smart_enums
 */
struct Round {

/// Conversion to any @p Enum type having the Round value.
/** Instances of the @ref oglplus::smart_enums::Round "Round"
 *  type are convertible to instances of any enumeration type having
 *  the @c Round value.
 */
template <typename Enum, Enum = Enum::Round> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Round value.
/** Instances of the @c smart_enums::Round type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Round value.
 */
template <typename Enum> friend bool operator==(Enum value, Round);

/// Non-equality comparison with any @p Enum type having the Round value.
/** Instances of the @c smart_enums::Round type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Round value.
 */
template <typename Enum> friend bool operator!=(Enum value, Round);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c S value.
/**
 *  @see @ref oglplus::TextureWrapCoord "TextureWrapCoord"
 *
 *  @glsymbols
 *  @gldefref{TEXTURE_WRAP_S}
 *
 *  @ingroup smart_enums
 */
struct S {

/// Conversion to any @p Enum type having the S value.
/** Instances of the @ref oglplus::smart_enums::S "S"
 *  type are convertible to instances of any enumeration type having
 *  the @c S value.
 */
template <typename Enum, Enum = Enum::S> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the S value.
/** Instances of the @c smart_enums::S type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c S value.
 */
template <typename Enum> friend bool operator==(Enum value, S);

/// Non-equality comparison with any @p Enum type having the S value.
/** Instances of the @c smart_enums::S type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c S value.
 */
template <typename Enum> friend bool operator!=(Enum value, S);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c SampleAlphaToCoverage value.
/**
 *  @see @ref oglplus::Capability "Capability"
 *
 *  @glsymbols
 *  @gldefref{SAMPLE_ALPHA_TO_COVERAGE}
 *
 *  @ingroup smart_enums
 */
struct SampleAlphaToCoverage {

/// Conversion to any @p Enum type having the SampleAlphaToCoverage value.
/** Instances of the @ref oglplus::smart_enums::SampleAlphaToCoverage "SampleAlphaToCoverage"
 *  type are convertible to instances of any enumeration type having
 *  the @c SampleAlphaToCoverage value.
 */
template <typename Enum, Enum = Enum::SampleAlphaToCoverage> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the SampleAlphaToCoverage value.
/** Instances of the @c smart_enums::SampleAlphaToCoverage type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c SampleAlphaToCoverage value.
 */
template <typename Enum> friend bool operator==(Enum value, SampleAlphaToCoverage);

/// Non-equality comparison with any @p Enum type having the SampleAlphaToCoverage value.
/** Instances of the @c smart_enums::SampleAlphaToCoverage type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c SampleAlphaToCoverage value.
 */
template <typename Enum> friend bool operator!=(Enum value, SampleAlphaToCoverage);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c SampleAlphaToOne value.
/**
 *  @see @ref oglplus::Capability "Capability"
 *
 *  @glsymbols
 *  @gldefref{SAMPLE_ALPHA_TO_ONE}
 *
 *  @ingroup smart_enums
 */
struct SampleAlphaToOne {

/// Conversion to any @p Enum type having the SampleAlphaToOne value.
/** Instances of the @ref oglplus::smart_enums::SampleAlphaToOne "SampleAlphaToOne"
 *  type are convertible to instances of any enumeration type having
 *  the @c SampleAlphaToOne value.
 */
template <typename Enum, Enum = Enum::SampleAlphaToOne> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the SampleAlphaToOne value.
/** Instances of the @c smart_enums::SampleAlphaToOne type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c SampleAlphaToOne value.
 */
template <typename Enum> friend bool operator==(Enum value, SampleAlphaToOne);

/// Non-equality comparison with any @p Enum type having the SampleAlphaToOne value.
/** Instances of the @c smart_enums::SampleAlphaToOne type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c SampleAlphaToOne value.
 */
template <typename Enum> friend bool operator!=(Enum value, SampleAlphaToOne);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c SampleCoverage value.
/**
 *  @see @ref oglplus::Capability "Capability"
 *
 *  @glsymbols
 *  @gldefref{SAMPLE_COVERAGE}
 *
 *  @ingroup smart_enums
 */
struct SampleCoverage {

/// Conversion to any @p Enum type having the SampleCoverage value.
/** Instances of the @ref oglplus::smart_enums::SampleCoverage "SampleCoverage"
 *  type are convertible to instances of any enumeration type having
 *  the @c SampleCoverage value.
 */
template <typename Enum, Enum = Enum::SampleCoverage> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the SampleCoverage value.
/** Instances of the @c smart_enums::SampleCoverage type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c SampleCoverage value.
 */
template <typename Enum> friend bool operator==(Enum value, SampleCoverage);

/// Non-equality comparison with any @p Enum type having the SampleCoverage value.
/** Instances of the @c smart_enums::SampleCoverage type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c SampleCoverage value.
 */
template <typename Enum> friend bool operator!=(Enum value, SampleCoverage);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c SampleMask value.
/**
 *  @see @ref oglplus::Capability "Capability"
 *
 *  @glsymbols
 *  @gldefref{SAMPLE_MASK}
 *
 *  @ingroup smart_enums
 */
struct SampleMask {

/// Conversion to any @p Enum type having the SampleMask value.
/** Instances of the @ref oglplus::smart_enums::SampleMask "SampleMask"
 *  type are convertible to instances of any enumeration type having
 *  the @c SampleMask value.
 */
template <typename Enum, Enum = Enum::SampleMask> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the SampleMask value.
/** Instances of the @c smart_enums::SampleMask type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c SampleMask value.
 */
template <typename Enum> friend bool operator==(Enum value, SampleMask);

/// Non-equality comparison with any @p Enum type having the SampleMask value.
/** Instances of the @c smart_enums::SampleMask type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c SampleMask value.
 */
template <typename Enum> friend bool operator!=(Enum value, SampleMask);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Sampler value.
/**
 *  @see @ref oglplus::ObjectType "ObjectType"
 *
 *  @glsymbols
 *  @gldefref{SAMPLER}
 *
 *  @ingroup smart_enums
 */
struct Sampler {

/// Conversion to any @p Enum type having the Sampler value.
/** Instances of the @ref oglplus::smart_enums::Sampler "Sampler"
 *  type are convertible to instances of any enumeration type having
 *  the @c Sampler value.
 */
template <typename Enum, Enum = Enum::Sampler> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Sampler value.
/** Instances of the @c smart_enums::Sampler type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Sampler value.
 */
template <typename Enum> friend bool operator==(Enum value, Sampler);

/// Non-equality comparison with any @p Enum type having the Sampler value.
/** Instances of the @c smart_enums::Sampler type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Sampler value.
 */
template <typename Enum> friend bool operator!=(Enum value, Sampler);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Sampler1D value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{SAMPLER_1D}
 *
 *  @ingroup smart_enums
 */
struct Sampler1D {

/// Conversion to any @p Enum type having the Sampler1D value.
/** Instances of the @ref oglplus::smart_enums::Sampler1D "Sampler1D"
 *  type are convertible to instances of any enumeration type having
 *  the @c Sampler1D value.
 */
template <typename Enum, Enum = Enum::Sampler1D> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Sampler1D value.
/** Instances of the @c smart_enums::Sampler1D type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Sampler1D value.
 */
template <typename Enum> friend bool operator==(Enum value, Sampler1D);

/// Non-equality comparison with any @p Enum type having the Sampler1D value.
/** Instances of the @c smart_enums::Sampler1D type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Sampler1D value.
 */
template <typename Enum> friend bool operator!=(Enum value, Sampler1D);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Sampler1DArray value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{SAMPLER_1D_ARRAY}
 *
 *  @ingroup smart_enums
 */
struct Sampler1DArray {

/// Conversion to any @p Enum type having the Sampler1DArray value.
/** Instances of the @ref oglplus::smart_enums::Sampler1DArray "Sampler1DArray"
 *  type are convertible to instances of any enumeration type having
 *  the @c Sampler1DArray value.
 */
template <typename Enum, Enum = Enum::Sampler1DArray> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Sampler1DArray value.
/** Instances of the @c smart_enums::Sampler1DArray type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Sampler1DArray value.
 */
template <typename Enum> friend bool operator==(Enum value, Sampler1DArray);

/// Non-equality comparison with any @p Enum type having the Sampler1DArray value.
/** Instances of the @c smart_enums::Sampler1DArray type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Sampler1DArray value.
 */
template <typename Enum> friend bool operator!=(Enum value, Sampler1DArray);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Sampler1DArrayShadow value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{SAMPLER_1D_ARRAY_SHADOW}
 *
 *  @ingroup smart_enums
 */
struct Sampler1DArrayShadow {

/// Conversion to any @p Enum type having the Sampler1DArrayShadow value.
/** Instances of the @ref oglplus::smart_enums::Sampler1DArrayShadow "Sampler1DArrayShadow"
 *  type are convertible to instances of any enumeration type having
 *  the @c Sampler1DArrayShadow value.
 */
template <typename Enum, Enum = Enum::Sampler1DArrayShadow> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Sampler1DArrayShadow value.
/** Instances of the @c smart_enums::Sampler1DArrayShadow type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Sampler1DArrayShadow value.
 */
template <typename Enum> friend bool operator==(Enum value, Sampler1DArrayShadow);

/// Non-equality comparison with any @p Enum type having the Sampler1DArrayShadow value.
/** Instances of the @c smart_enums::Sampler1DArrayShadow type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Sampler1DArrayShadow value.
 */
template <typename Enum> friend bool operator!=(Enum value, Sampler1DArrayShadow);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Sampler1DShadow value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{SAMPLER_1D_SHADOW}
 *
 *  @ingroup smart_enums
 */
struct Sampler1DShadow {

/// Conversion to any @p Enum type having the Sampler1DShadow value.
/** Instances of the @ref oglplus::smart_enums::Sampler1DShadow "Sampler1DShadow"
 *  type are convertible to instances of any enumeration type having
 *  the @c Sampler1DShadow value.
 */
template <typename Enum, Enum = Enum::Sampler1DShadow> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Sampler1DShadow value.
/** Instances of the @c smart_enums::Sampler1DShadow type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Sampler1DShadow value.
 */
template <typename Enum> friend bool operator==(Enum value, Sampler1DShadow);

/// Non-equality comparison with any @p Enum type having the Sampler1DShadow value.
/** Instances of the @c smart_enums::Sampler1DShadow type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Sampler1DShadow value.
 */
template <typename Enum> friend bool operator!=(Enum value, Sampler1DShadow);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Sampler2D value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{SAMPLER_2D}
 *
 *  @ingroup smart_enums
 */
struct Sampler2D {

/// Conversion to any @p Enum type having the Sampler2D value.
/** Instances of the @ref oglplus::smart_enums::Sampler2D "Sampler2D"
 *  type are convertible to instances of any enumeration type having
 *  the @c Sampler2D value.
 */
template <typename Enum, Enum = Enum::Sampler2D> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Sampler2D value.
/** Instances of the @c smart_enums::Sampler2D type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Sampler2D value.
 */
template <typename Enum> friend bool operator==(Enum value, Sampler2D);

/// Non-equality comparison with any @p Enum type having the Sampler2D value.
/** Instances of the @c smart_enums::Sampler2D type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Sampler2D value.
 */
template <typename Enum> friend bool operator!=(Enum value, Sampler2D);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Sampler2DArray value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{SAMPLER_2D_ARRAY}
 *
 *  @ingroup smart_enums
 */
struct Sampler2DArray {

/// Conversion to any @p Enum type having the Sampler2DArray value.
/** Instances of the @ref oglplus::smart_enums::Sampler2DArray "Sampler2DArray"
 *  type are convertible to instances of any enumeration type having
 *  the @c Sampler2DArray value.
 */
template <typename Enum, Enum = Enum::Sampler2DArray> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Sampler2DArray value.
/** Instances of the @c smart_enums::Sampler2DArray type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Sampler2DArray value.
 */
template <typename Enum> friend bool operator==(Enum value, Sampler2DArray);

/// Non-equality comparison with any @p Enum type having the Sampler2DArray value.
/** Instances of the @c smart_enums::Sampler2DArray type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Sampler2DArray value.
 */
template <typename Enum> friend bool operator!=(Enum value, Sampler2DArray);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Sampler2DArrayShadow value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{SAMPLER_2D_ARRAY_SHADOW}
 *
 *  @ingroup smart_enums
 */
struct Sampler2DArrayShadow {

/// Conversion to any @p Enum type having the Sampler2DArrayShadow value.
/** Instances of the @ref oglplus::smart_enums::Sampler2DArrayShadow "Sampler2DArrayShadow"
 *  type are convertible to instances of any enumeration type having
 *  the @c Sampler2DArrayShadow value.
 */
template <typename Enum, Enum = Enum::Sampler2DArrayShadow> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Sampler2DArrayShadow value.
/** Instances of the @c smart_enums::Sampler2DArrayShadow type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Sampler2DArrayShadow value.
 */
template <typename Enum> friend bool operator==(Enum value, Sampler2DArrayShadow);

/// Non-equality comparison with any @p Enum type having the Sampler2DArrayShadow value.
/** Instances of the @c smart_enums::Sampler2DArrayShadow type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Sampler2DArrayShadow value.
 */
template <typename Enum> friend bool operator!=(Enum value, Sampler2DArrayShadow);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Sampler2DMultisample value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{SAMPLER_2D_MULTISAMPLE}
 *
 *  @ingroup smart_enums
 */
struct Sampler2DMultisample {

/// Conversion to any @p Enum type having the Sampler2DMultisample value.
/** Instances of the @ref oglplus::smart_enums::Sampler2DMultisample "Sampler2DMultisample"
 *  type are convertible to instances of any enumeration type having
 *  the @c Sampler2DMultisample value.
 */
template <typename Enum, Enum = Enum::Sampler2DMultisample> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Sampler2DMultisample value.
/** Instances of the @c smart_enums::Sampler2DMultisample type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Sampler2DMultisample value.
 */
template <typename Enum> friend bool operator==(Enum value, Sampler2DMultisample);

/// Non-equality comparison with any @p Enum type having the Sampler2DMultisample value.
/** Instances of the @c smart_enums::Sampler2DMultisample type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Sampler2DMultisample value.
 */
template <typename Enum> friend bool operator!=(Enum value, Sampler2DMultisample);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Sampler2DMultisampleArray value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{SAMPLER_2D_MULTISAMPLE_ARRAY}
 *
 *  @ingroup smart_enums
 */
struct Sampler2DMultisampleArray {

/// Conversion to any @p Enum type having the Sampler2DMultisampleArray value.
/** Instances of the @ref oglplus::smart_enums::Sampler2DMultisampleArray "Sampler2DMultisampleArray"
 *  type are convertible to instances of any enumeration type having
 *  the @c Sampler2DMultisampleArray value.
 */
template <typename Enum, Enum = Enum::Sampler2DMultisampleArray> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Sampler2DMultisampleArray value.
/** Instances of the @c smart_enums::Sampler2DMultisampleArray type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Sampler2DMultisampleArray value.
 */
template <typename Enum> friend bool operator==(Enum value, Sampler2DMultisampleArray);

/// Non-equality comparison with any @p Enum type having the Sampler2DMultisampleArray value.
/** Instances of the @c smart_enums::Sampler2DMultisampleArray type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Sampler2DMultisampleArray value.
 */
template <typename Enum> friend bool operator!=(Enum value, Sampler2DMultisampleArray);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Sampler2DRect value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{SAMPLER_2D_RECT}
 *
 *  @ingroup smart_enums
 */
struct Sampler2DRect {

/// Conversion to any @p Enum type having the Sampler2DRect value.
/** Instances of the @ref oglplus::smart_enums::Sampler2DRect "Sampler2DRect"
 *  type are convertible to instances of any enumeration type having
 *  the @c Sampler2DRect value.
 */
template <typename Enum, Enum = Enum::Sampler2DRect> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Sampler2DRect value.
/** Instances of the @c smart_enums::Sampler2DRect type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Sampler2DRect value.
 */
template <typename Enum> friend bool operator==(Enum value, Sampler2DRect);

/// Non-equality comparison with any @p Enum type having the Sampler2DRect value.
/** Instances of the @c smart_enums::Sampler2DRect type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Sampler2DRect value.
 */
template <typename Enum> friend bool operator!=(Enum value, Sampler2DRect);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Sampler2DRectShadow value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{SAMPLER_2D_RECT_SHADOW}
 *
 *  @ingroup smart_enums
 */
struct Sampler2DRectShadow {

/// Conversion to any @p Enum type having the Sampler2DRectShadow value.
/** Instances of the @ref oglplus::smart_enums::Sampler2DRectShadow "Sampler2DRectShadow"
 *  type are convertible to instances of any enumeration type having
 *  the @c Sampler2DRectShadow value.
 */
template <typename Enum, Enum = Enum::Sampler2DRectShadow> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Sampler2DRectShadow value.
/** Instances of the @c smart_enums::Sampler2DRectShadow type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Sampler2DRectShadow value.
 */
template <typename Enum> friend bool operator==(Enum value, Sampler2DRectShadow);

/// Non-equality comparison with any @p Enum type having the Sampler2DRectShadow value.
/** Instances of the @c smart_enums::Sampler2DRectShadow type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Sampler2DRectShadow value.
 */
template <typename Enum> friend bool operator!=(Enum value, Sampler2DRectShadow);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Sampler2DShadow value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{SAMPLER_2D_SHADOW}
 *
 *  @ingroup smart_enums
 */
struct Sampler2DShadow {

/// Conversion to any @p Enum type having the Sampler2DShadow value.
/** Instances of the @ref oglplus::smart_enums::Sampler2DShadow "Sampler2DShadow"
 *  type are convertible to instances of any enumeration type having
 *  the @c Sampler2DShadow value.
 */
template <typename Enum, Enum = Enum::Sampler2DShadow> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Sampler2DShadow value.
/** Instances of the @c smart_enums::Sampler2DShadow type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Sampler2DShadow value.
 */
template <typename Enum> friend bool operator==(Enum value, Sampler2DShadow);

/// Non-equality comparison with any @p Enum type having the Sampler2DShadow value.
/** Instances of the @c smart_enums::Sampler2DShadow type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Sampler2DShadow value.
 */
template <typename Enum> friend bool operator!=(Enum value, Sampler2DShadow);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Sampler3D value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{SAMPLER_3D}
 *
 *  @ingroup smart_enums
 */
struct Sampler3D {

/// Conversion to any @p Enum type having the Sampler3D value.
/** Instances of the @ref oglplus::smart_enums::Sampler3D "Sampler3D"
 *  type are convertible to instances of any enumeration type having
 *  the @c Sampler3D value.
 */
template <typename Enum, Enum = Enum::Sampler3D> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Sampler3D value.
/** Instances of the @c smart_enums::Sampler3D type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Sampler3D value.
 */
template <typename Enum> friend bool operator==(Enum value, Sampler3D);

/// Non-equality comparison with any @p Enum type having the Sampler3D value.
/** Instances of the @c smart_enums::Sampler3D type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Sampler3D value.
 */
template <typename Enum> friend bool operator!=(Enum value, Sampler3D);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c SamplerBuffer value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{SAMPLER_BUFFER}
 *
 *  @ingroup smart_enums
 */
struct SamplerBuffer {

/// Conversion to any @p Enum type having the SamplerBuffer value.
/** Instances of the @ref oglplus::smart_enums::SamplerBuffer "SamplerBuffer"
 *  type are convertible to instances of any enumeration type having
 *  the @c SamplerBuffer value.
 */
template <typename Enum, Enum = Enum::SamplerBuffer> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the SamplerBuffer value.
/** Instances of the @c smart_enums::SamplerBuffer type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c SamplerBuffer value.
 */
template <typename Enum> friend bool operator==(Enum value, SamplerBuffer);

/// Non-equality comparison with any @p Enum type having the SamplerBuffer value.
/** Instances of the @c smart_enums::SamplerBuffer type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c SamplerBuffer value.
 */
template <typename Enum> friend bool operator!=(Enum value, SamplerBuffer);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c SamplerCube value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{SAMPLER_CUBE}
 *
 *  @ingroup smart_enums
 */
struct SamplerCube {

/// Conversion to any @p Enum type having the SamplerCube value.
/** Instances of the @ref oglplus::smart_enums::SamplerCube "SamplerCube"
 *  type are convertible to instances of any enumeration type having
 *  the @c SamplerCube value.
 */
template <typename Enum, Enum = Enum::SamplerCube> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the SamplerCube value.
/** Instances of the @c smart_enums::SamplerCube type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c SamplerCube value.
 */
template <typename Enum> friend bool operator==(Enum value, SamplerCube);

/// Non-equality comparison with any @p Enum type having the SamplerCube value.
/** Instances of the @c smart_enums::SamplerCube type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c SamplerCube value.
 */
template <typename Enum> friend bool operator!=(Enum value, SamplerCube);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c SamplerCubeMapArray value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{SAMPLER_CUBE_MAP_ARRAY}
 *
 *  @ingroup smart_enums
 */
struct SamplerCubeMapArray {

/// Conversion to any @p Enum type having the SamplerCubeMapArray value.
/** Instances of the @ref oglplus::smart_enums::SamplerCubeMapArray "SamplerCubeMapArray"
 *  type are convertible to instances of any enumeration type having
 *  the @c SamplerCubeMapArray value.
 */
template <typename Enum, Enum = Enum::SamplerCubeMapArray> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the SamplerCubeMapArray value.
/** Instances of the @c smart_enums::SamplerCubeMapArray type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c SamplerCubeMapArray value.
 */
template <typename Enum> friend bool operator==(Enum value, SamplerCubeMapArray);

/// Non-equality comparison with any @p Enum type having the SamplerCubeMapArray value.
/** Instances of the @c smart_enums::SamplerCubeMapArray type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c SamplerCubeMapArray value.
 */
template <typename Enum> friend bool operator!=(Enum value, SamplerCubeMapArray);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c SamplerCubeMapArrayShadow value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{SAMPLER_CUBE_MAP_ARRAY_SHADOW}
 *
 *  @ingroup smart_enums
 */
struct SamplerCubeMapArrayShadow {

/// Conversion to any @p Enum type having the SamplerCubeMapArrayShadow value.
/** Instances of the @ref oglplus::smart_enums::SamplerCubeMapArrayShadow "SamplerCubeMapArrayShadow"
 *  type are convertible to instances of any enumeration type having
 *  the @c SamplerCubeMapArrayShadow value.
 */
template <typename Enum, Enum = Enum::SamplerCubeMapArrayShadow> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the SamplerCubeMapArrayShadow value.
/** Instances of the @c smart_enums::SamplerCubeMapArrayShadow type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c SamplerCubeMapArrayShadow value.
 */
template <typename Enum> friend bool operator==(Enum value, SamplerCubeMapArrayShadow);

/// Non-equality comparison with any @p Enum type having the SamplerCubeMapArrayShadow value.
/** Instances of the @c smart_enums::SamplerCubeMapArrayShadow type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c SamplerCubeMapArrayShadow value.
 */
template <typename Enum> friend bool operator!=(Enum value, SamplerCubeMapArrayShadow);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c SamplerCubeShadow value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{SAMPLER_CUBE_SHADOW}
 *
 *  @ingroup smart_enums
 */
struct SamplerCubeShadow {

/// Conversion to any @p Enum type having the SamplerCubeShadow value.
/** Instances of the @ref oglplus::smart_enums::SamplerCubeShadow "SamplerCubeShadow"
 *  type are convertible to instances of any enumeration type having
 *  the @c SamplerCubeShadow value.
 */
template <typename Enum, Enum = Enum::SamplerCubeShadow> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the SamplerCubeShadow value.
/** Instances of the @c smart_enums::SamplerCubeShadow type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c SamplerCubeShadow value.
 */
template <typename Enum> friend bool operator==(Enum value, SamplerCubeShadow);

/// Non-equality comparison with any @p Enum type having the SamplerCubeShadow value.
/** Instances of the @c smart_enums::SamplerCubeShadow type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c SamplerCubeShadow value.
 */
template <typename Enum> friend bool operator!=(Enum value, SamplerCubeShadow);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c SampleShading value.
/**
 *  @see @ref oglplus::Capability "Capability"
 *
 *  @glsymbols
 *  @gldefref{SAMPLE_SHADING}
 *
 *  @ingroup smart_enums
 */
struct SampleShading {

/// Conversion to any @p Enum type having the SampleShading value.
/** Instances of the @ref oglplus::smart_enums::SampleShading "SampleShading"
 *  type are convertible to instances of any enumeration type having
 *  the @c SampleShading value.
 */
template <typename Enum, Enum = Enum::SampleShading> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the SampleShading value.
/** Instances of the @c smart_enums::SampleShading type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c SampleShading value.
 */
template <typename Enum> friend bool operator==(Enum value, SampleShading);

/// Non-equality comparison with any @p Enum type having the SampleShading value.
/** Instances of the @c smart_enums::SampleShading type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c SampleShading value.
 */
template <typename Enum> friend bool operator!=(Enum value, SampleShading);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c SamplesPassed value.
/**
 *  @see @ref oglplus::QueryTarget "QueryTarget"
 *
 *  @glsymbols
 *  @gldefref{SAMPLES_PASSED}
 *
 *  @ingroup smart_enums
 */
struct SamplesPassed {

/// Conversion to any @p Enum type having the SamplesPassed value.
/** Instances of the @ref oglplus::smart_enums::SamplesPassed "SamplesPassed"
 *  type are convertible to instances of any enumeration type having
 *  the @c SamplesPassed value.
 */
template <typename Enum, Enum = Enum::SamplesPassed> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the SamplesPassed value.
/** Instances of the @c smart_enums::SamplesPassed type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c SamplesPassed value.
 */
template <typename Enum> friend bool operator==(Enum value, SamplesPassed);

/// Non-equality comparison with any @p Enum type having the SamplesPassed value.
/** Instances of the @c smart_enums::SamplesPassed type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c SamplesPassed value.
 */
template <typename Enum> friend bool operator!=(Enum value, SamplesPassed);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Scissor value.
/**
 *  @see @ref oglplus::CompatibilityAttributeGroup "CompatibilityAttributeGroup"
 *
 *  @glsymbols
 *  @gldefref{SCISSOR_BIT}
 *
 *  @ingroup smart_enums
 */
struct Scissor {

/// Conversion to any @p Enum type having the Scissor value.
/** Instances of the @ref oglplus::smart_enums::Scissor "Scissor"
 *  type are convertible to instances of any enumeration type having
 *  the @c Scissor value.
 */
template <typename Enum, Enum = Enum::Scissor> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Scissor value.
/** Instances of the @c smart_enums::Scissor type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Scissor value.
 */
template <typename Enum> friend bool operator==(Enum value, Scissor);

/// Non-equality comparison with any @p Enum type having the Scissor value.
/** Instances of the @c smart_enums::Scissor type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Scissor value.
 */
template <typename Enum> friend bool operator!=(Enum value, Scissor);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ScissorTest value.
/**
 *  @see @ref oglplus::Capability "Capability"
 *
 *  @glsymbols
 *  @gldefref{SCISSOR_TEST}
 *
 *  @ingroup smart_enums
 */
struct ScissorTest {

/// Conversion to any @p Enum type having the ScissorTest value.
/** Instances of the @ref oglplus::smart_enums::ScissorTest "ScissorTest"
 *  type are convertible to instances of any enumeration type having
 *  the @c ScissorTest value.
 */
template <typename Enum, Enum = Enum::ScissorTest> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ScissorTest value.
/** Instances of the @c smart_enums::ScissorTest type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ScissorTest value.
 */
template <typename Enum> friend bool operator==(Enum value, ScissorTest);

/// Non-equality comparison with any @p Enum type having the ScissorTest value.
/** Instances of the @c smart_enums::ScissorTest type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ScissorTest value.
 */
template <typename Enum> friend bool operator!=(Enum value, ScissorTest);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Secondary value.
/**
 *  @see @ref oglplus::PathNVColor "PathNVColor"
 *
 *  @glsymbols
 *  @gldefref{SECONDARY_COLOR_NV}
 *
 *  @ingroup smart_enums
 */
struct Secondary {

/// Conversion to any @p Enum type having the Secondary value.
/** Instances of the @ref oglplus::smart_enums::Secondary "Secondary"
 *  type are convertible to instances of any enumeration type having
 *  the @c Secondary value.
 */
template <typename Enum, Enum = Enum::Secondary> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Secondary value.
/** Instances of the @c smart_enums::Secondary type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Secondary value.
 */
template <typename Enum> friend bool operator==(Enum value, Secondary);

/// Non-equality comparison with any @p Enum type having the Secondary value.
/** Instances of the @c smart_enums::Secondary type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Secondary value.
 */
template <typename Enum> friend bool operator!=(Enum value, Secondary);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c SeparateAttribs value.
/**
 *  @see @ref oglplus::TransformFeedbackMode "TransformFeedbackMode"
 *
 *  @glsymbols
 *  @gldefref{SEPARATE_ATTRIBS}
 *
 *  @ingroup smart_enums
 */
struct SeparateAttribs {

/// Conversion to any @p Enum type having the SeparateAttribs value.
/** Instances of the @ref oglplus::smart_enums::SeparateAttribs "SeparateAttribs"
 *  type are convertible to instances of any enumeration type having
 *  the @c SeparateAttribs value.
 */
template <typename Enum, Enum = Enum::SeparateAttribs> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the SeparateAttribs value.
/** Instances of the @c smart_enums::SeparateAttribs type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c SeparateAttribs value.
 */
template <typename Enum> friend bool operator==(Enum value, SeparateAttribs);

/// Non-equality comparison with any @p Enum type having the SeparateAttribs value.
/** Instances of the @c smart_enums::SeparateAttribs type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c SeparateAttribs value.
 */
template <typename Enum> friend bool operator!=(Enum value, SeparateAttribs);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Set value.
/**
 *  @see @ref oglplus::ColorLogicOperation "ColorLogicOperation"
 *
 *  @glsymbols
 *  @gldefref{SET}
 *
 *  @ingroup smart_enums
 */
struct Set {

/// Conversion to any @p Enum type having the Set value.
/** Instances of the @ref oglplus::smart_enums::Set "Set"
 *  type are convertible to instances of any enumeration type having
 *  the @c Set value.
 */
template <typename Enum, Enum = Enum::Set> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Set value.
/** Instances of the @c smart_enums::Set type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Set value.
 */
template <typename Enum> friend bool operator==(Enum value, Set);

/// Non-equality comparison with any @p Enum type having the Set value.
/** Instances of the @c smart_enums::Set type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Set value.
 */
template <typename Enum> friend bool operator!=(Enum value, Set);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Shader value.
/**
 *  @see @ref oglplus::ObjectType "ObjectType"
 *
 *  @glsymbols
 *  @gldefref{SHADER}
 *
 *  @ingroup smart_enums
 */
struct Shader {

/// Conversion to any @p Enum type having the Shader value.
/** Instances of the @ref oglplus::smart_enums::Shader "Shader"
 *  type are convertible to instances of any enumeration type having
 *  the @c Shader value.
 */
template <typename Enum, Enum = Enum::Shader> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Shader value.
/** Instances of the @c smart_enums::Shader type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Shader value.
 */
template <typename Enum> friend bool operator==(Enum value, Shader);

/// Non-equality comparison with any @p Enum type having the Shader value.
/** Instances of the @c smart_enums::Shader type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Shader value.
 */
template <typename Enum> friend bool operator!=(Enum value, Shader);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ShaderCompiler value.
/**
 *  @see @ref oglplus::DebugOutputARBSource "DebugOutputARBSource"
 *  @see @ref oglplus::DebugOutputSource "DebugOutputSource"
 *  @see @ref oglplus::DebugSource "DebugSource"
 *
 *  @glsymbols
 *  @gldefref{DEBUG_SOURCE_SHADER_COMPILER}
 *  @gldefref{DEBUG_SOURCE_SHADER_COMPILER_ARB}
 *
 *  @ingroup smart_enums
 */
struct ShaderCompiler {

/// Conversion to any @p Enum type having the ShaderCompiler value.
/** Instances of the @ref oglplus::smart_enums::ShaderCompiler "ShaderCompiler"
 *  type are convertible to instances of any enumeration type having
 *  the @c ShaderCompiler value.
 */
template <typename Enum, Enum = Enum::ShaderCompiler> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ShaderCompiler value.
/** Instances of the @c smart_enums::ShaderCompiler type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ShaderCompiler value.
 */
template <typename Enum> friend bool operator==(Enum value, ShaderCompiler);

/// Non-equality comparison with any @p Enum type having the ShaderCompiler value.
/** Instances of the @c smart_enums::ShaderCompiler type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ShaderCompiler value.
 */
template <typename Enum> friend bool operator!=(Enum value, ShaderCompiler);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ShaderImageAccess value.
/**
 *  @see @ref oglplus::MemoryBarrierBit "MemoryBarrierBit"
 *
 *  @glsymbols
 *  @gldefref{SHADER_IMAGE_ACCESS_BARRIER_BIT}
 *
 *  @ingroup smart_enums
 */
struct ShaderImageAccess {

/// Conversion to any @p Enum type having the ShaderImageAccess value.
/** Instances of the @ref oglplus::smart_enums::ShaderImageAccess "ShaderImageAccess"
 *  type are convertible to instances of any enumeration type having
 *  the @c ShaderImageAccess value.
 */
template <typename Enum, Enum = Enum::ShaderImageAccess> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ShaderImageAccess value.
/** Instances of the @c smart_enums::ShaderImageAccess type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ShaderImageAccess value.
 */
template <typename Enum> friend bool operator==(Enum value, ShaderImageAccess);

/// Non-equality comparison with any @p Enum type having the ShaderImageAccess value.
/** Instances of the @c smart_enums::ShaderImageAccess type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ShaderImageAccess value.
 */
template <typename Enum> friend bool operator!=(Enum value, ShaderImageAccess);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ShaderInclude value.
/**
 *  @see @ref oglplus::NamedStringType "NamedStringType"
 *
 *  @glsymbols
 *  @gldefref{SHADER_INCLUDE_ARB}
 *
 *  @ingroup smart_enums
 */
struct ShaderInclude {

/// Conversion to any @p Enum type having the ShaderInclude value.
/** Instances of the @ref oglplus::smart_enums::ShaderInclude "ShaderInclude"
 *  type are convertible to instances of any enumeration type having
 *  the @c ShaderInclude value.
 */
template <typename Enum, Enum = Enum::ShaderInclude> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ShaderInclude value.
/** Instances of the @c smart_enums::ShaderInclude type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ShaderInclude value.
 */
template <typename Enum> friend bool operator==(Enum value, ShaderInclude);

/// Non-equality comparison with any @p Enum type having the ShaderInclude value.
/** Instances of the @c smart_enums::ShaderInclude type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ShaderInclude value.
 */
template <typename Enum> friend bool operator!=(Enum value, ShaderInclude);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ShaderStorage value.
/**
 *  @see @ref oglplus::BufferIndexedTarget "BufferIndexedTarget"
 *  @see @ref oglplus::BufferTarget "BufferTarget"
 *  @see @ref oglplus::MemoryBarrierBit "MemoryBarrierBit"
 *
 *  @glsymbols
 *  @gldefref{SHADER_STORAGE_BARRIER_BIT}
 *  @gldefref{SHADER_STORAGE_BUFFER}
 *
 *  @ingroup smart_enums
 */
struct ShaderStorage {

/// Conversion to any @p Enum type having the ShaderStorage value.
/** Instances of the @ref oglplus::smart_enums::ShaderStorage "ShaderStorage"
 *  type are convertible to instances of any enumeration type having
 *  the @c ShaderStorage value.
 */
template <typename Enum, Enum = Enum::ShaderStorage> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ShaderStorage value.
/** Instances of the @c smart_enums::ShaderStorage type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ShaderStorage value.
 */
template <typename Enum> friend bool operator==(Enum value, ShaderStorage);

/// Non-equality comparison with any @p Enum type having the ShaderStorage value.
/** Instances of the @c smart_enums::ShaderStorage type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ShaderStorage value.
 */
template <typename Enum> friend bool operator!=(Enum value, ShaderStorage);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ShaderStorageBlock value.
/**
 *  @see @ref oglplus::ProgramInterface "ProgramInterface"
 *
 *  @glsymbols
 *  @gldefref{SHADER_STORAGE_BLOCK}
 *
 *  @ingroup smart_enums
 */
struct ShaderStorageBlock {

/// Conversion to any @p Enum type having the ShaderStorageBlock value.
/** Instances of the @ref oglplus::smart_enums::ShaderStorageBlock "ShaderStorageBlock"
 *  type are convertible to instances of any enumeration type having
 *  the @c ShaderStorageBlock value.
 */
template <typename Enum, Enum = Enum::ShaderStorageBlock> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ShaderStorageBlock value.
/** Instances of the @c smart_enums::ShaderStorageBlock type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ShaderStorageBlock value.
 */
template <typename Enum> friend bool operator==(Enum value, ShaderStorageBlock);

/// Non-equality comparison with any @p Enum type having the ShaderStorageBlock value.
/** Instances of the @c smart_enums::ShaderStorageBlock type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ShaderStorageBlock value.
 */
template <typename Enum> friend bool operator!=(Enum value, ShaderStorageBlock);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ShadingLanguageVersion value.
/**
 *  @see @ref oglplus::StringQuery "StringQuery"
 *
 *  @glsymbols
 *  @gldefref{SHADING_LANGUAGE_VERSION}
 *
 *  @ingroup smart_enums
 */
struct ShadingLanguageVersion {

/// Conversion to any @p Enum type having the ShadingLanguageVersion value.
/** Instances of the @ref oglplus::smart_enums::ShadingLanguageVersion "ShadingLanguageVersion"
 *  type are convertible to instances of any enumeration type having
 *  the @c ShadingLanguageVersion value.
 */
template <typename Enum, Enum = Enum::ShadingLanguageVersion> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ShadingLanguageVersion value.
/** Instances of the @c smart_enums::ShadingLanguageVersion type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ShadingLanguageVersion value.
 */
template <typename Enum> friend bool operator==(Enum value, ShadingLanguageVersion);

/// Non-equality comparison with any @p Enum type having the ShadingLanguageVersion value.
/** Instances of the @c smart_enums::ShadingLanguageVersion type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ShadingLanguageVersion value.
 */
template <typename Enum> friend bool operator!=(Enum value, ShadingLanguageVersion);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Short value.
/**
 *  @see @ref oglplus::DataType "DataType"
 *  @see @ref oglplus::PixelDataType "PixelDataType"
 *
 *  @glsymbols
 *  @gldefref{SHORT}
 *
 *  @ingroup smart_enums
 */
struct Short {

/// Conversion to any @p Enum type having the Short value.
/** Instances of the @ref oglplus::smart_enums::Short "Short"
 *  type are convertible to instances of any enumeration type having
 *  the @c Short value.
 */
template <typename Enum, Enum = Enum::Short> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Short value.
/** Instances of the @c smart_enums::Short type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Short value.
 */
template <typename Enum> friend bool operator==(Enum value, Short);

/// Non-equality comparison with any @p Enum type having the Short value.
/** Instances of the @c smart_enums::Short type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Short value.
 */
template <typename Enum> friend bool operator!=(Enum value, Short);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Signaled value.
/**
 *  @see @ref oglplus::SyncStatus "SyncStatus"
 *
 *  @glsymbols
 *  @gldefref{SIGNALED}
 *
 *  @ingroup smart_enums
 */
struct Signaled {

/// Conversion to any @p Enum type having the Signaled value.
/** Instances of the @ref oglplus::smart_enums::Signaled "Signaled"
 *  type are convertible to instances of any enumeration type having
 *  the @c Signaled value.
 */
template <typename Enum, Enum = Enum::Signaled> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Signaled value.
/** Instances of the @c smart_enums::Signaled type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Signaled value.
 */
template <typename Enum> friend bool operator==(Enum value, Signaled);

/// Non-equality comparison with any @p Enum type having the Signaled value.
/** Instances of the @c smart_enums::Signaled type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Signaled value.
 */
template <typename Enum> friend bool operator!=(Enum value, Signaled);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Skip value.
/**
 *  @see @ref oglplus::PathNVMissingGlyph "PathNVMissingGlyph"
 *
 *  @glsymbols
 *  @gldefref{SKIP_MISSING_GLYPH_NV}
 *
 *  @ingroup smart_enums
 */
struct Skip {

/// Conversion to any @p Enum type having the Skip value.
/** Instances of the @ref oglplus::smart_enums::Skip "Skip"
 *  type are convertible to instances of any enumeration type having
 *  the @c Skip value.
 */
template <typename Enum, Enum = Enum::Skip> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Skip value.
/** Instances of the @c smart_enums::Skip type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Skip value.
 */
template <typename Enum> friend bool operator==(Enum value, Skip);

/// Non-equality comparison with any @p Enum type having the Skip value.
/** Instances of the @c smart_enums::Skip type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Skip value.
 */
template <typename Enum> friend bool operator!=(Enum value, Skip);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c SmallCCWArcTo value.
/**
 *  @see @ref oglplus::PathNVCommand "PathNVCommand"
 *
 *  @glsymbols
 *  @gldefref{SMALL_CCW_ARC_TO_NV}
 *
 *  @ingroup smart_enums
 */
struct SmallCCWArcTo {

/// Conversion to any @p Enum type having the SmallCCWArcTo value.
/** Instances of the @ref oglplus::smart_enums::SmallCCWArcTo "SmallCCWArcTo"
 *  type are convertible to instances of any enumeration type having
 *  the @c SmallCCWArcTo value.
 */
template <typename Enum, Enum = Enum::SmallCCWArcTo> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the SmallCCWArcTo value.
/** Instances of the @c smart_enums::SmallCCWArcTo type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c SmallCCWArcTo value.
 */
template <typename Enum> friend bool operator==(Enum value, SmallCCWArcTo);

/// Non-equality comparison with any @p Enum type having the SmallCCWArcTo value.
/** Instances of the @c smart_enums::SmallCCWArcTo type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c SmallCCWArcTo value.
 */
template <typename Enum> friend bool operator!=(Enum value, SmallCCWArcTo);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c SmallCWArcTo value.
/**
 *  @see @ref oglplus::PathNVCommand "PathNVCommand"
 *
 *  @glsymbols
 *  @gldefref{SMALL_CW_ARC_TO_NV}
 *
 *  @ingroup smart_enums
 */
struct SmallCWArcTo {

/// Conversion to any @p Enum type having the SmallCWArcTo value.
/** Instances of the @ref oglplus::smart_enums::SmallCWArcTo "SmallCWArcTo"
 *  type are convertible to instances of any enumeration type having
 *  the @c SmallCWArcTo value.
 */
template <typename Enum, Enum = Enum::SmallCWArcTo> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the SmallCWArcTo value.
/** Instances of the @c smart_enums::SmallCWArcTo type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c SmallCWArcTo value.
 */
template <typename Enum> friend bool operator==(Enum value, SmallCWArcTo);

/// Non-equality comparison with any @p Enum type having the SmallCWArcTo value.
/** Instances of the @c smart_enums::SmallCWArcTo type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c SmallCWArcTo value.
 */
template <typename Enum> friend bool operator!=(Enum value, SmallCWArcTo);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c SmoothCubicCurveTo value.
/**
 *  @see @ref oglplus::PathNVCommand "PathNVCommand"
 *
 *  @glsymbols
 *  @gldefref{SMOOTH_CUBIC_CURVE_TO_NV}
 *
 *  @ingroup smart_enums
 */
struct SmoothCubicCurveTo {

/// Conversion to any @p Enum type having the SmoothCubicCurveTo value.
/** Instances of the @ref oglplus::smart_enums::SmoothCubicCurveTo "SmoothCubicCurveTo"
 *  type are convertible to instances of any enumeration type having
 *  the @c SmoothCubicCurveTo value.
 */
template <typename Enum, Enum = Enum::SmoothCubicCurveTo> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the SmoothCubicCurveTo value.
/** Instances of the @c smart_enums::SmoothCubicCurveTo type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c SmoothCubicCurveTo value.
 */
template <typename Enum> friend bool operator==(Enum value, SmoothCubicCurveTo);

/// Non-equality comparison with any @p Enum type having the SmoothCubicCurveTo value.
/** Instances of the @c smart_enums::SmoothCubicCurveTo type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c SmoothCubicCurveTo value.
 */
template <typename Enum> friend bool operator!=(Enum value, SmoothCubicCurveTo);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c SmoothQuadraticCurveTo value.
/**
 *  @see @ref oglplus::PathNVCommand "PathNVCommand"
 *
 *  @glsymbols
 *  @gldefref{SMOOTH_QUADRATIC_CURVE_TO_NV}
 *
 *  @ingroup smart_enums
 */
struct SmoothQuadraticCurveTo {

/// Conversion to any @p Enum type having the SmoothQuadraticCurveTo value.
/** Instances of the @ref oglplus::smart_enums::SmoothQuadraticCurveTo "SmoothQuadraticCurveTo"
 *  type are convertible to instances of any enumeration type having
 *  the @c SmoothQuadraticCurveTo value.
 */
template <typename Enum, Enum = Enum::SmoothQuadraticCurveTo> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the SmoothQuadraticCurveTo value.
/** Instances of the @c smart_enums::SmoothQuadraticCurveTo type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c SmoothQuadraticCurveTo value.
 */
template <typename Enum> friend bool operator==(Enum value, SmoothQuadraticCurveTo);

/// Non-equality comparison with any @p Enum type having the SmoothQuadraticCurveTo value.
/** Instances of the @c smart_enums::SmoothQuadraticCurveTo type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c SmoothQuadraticCurveTo value.
 */
template <typename Enum> friend bool operator!=(Enum value, SmoothQuadraticCurveTo);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Square value.
/**
 *  @see @ref oglplus::PathNVCapStyle "PathNVCapStyle"
 *
 *  @glsymbols
 *  @gldefref{SQUARE_NV}
 *
 *  @ingroup smart_enums
 */
struct Square {

/// Conversion to any @p Enum type having the Square value.
/** Instances of the @ref oglplus::smart_enums::Square "Square"
 *  type are convertible to instances of any enumeration type having
 *  the @c Square value.
 */
template <typename Enum, Enum = Enum::Square> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Square value.
/** Instances of the @c smart_enums::Square type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Square value.
 */
template <typename Enum> friend bool operator==(Enum value, Square);

/// Non-equality comparison with any @p Enum type having the Square value.
/** Instances of the @c smart_enums::Square type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Square value.
 */
template <typename Enum> friend bool operator!=(Enum value, Square);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Src1Alpha value.
/**
 *  @see @ref oglplus::BlendFunction "BlendFunction"
 *
 *  @glsymbols
 *  @gldefref{SRC1_ALPHA}
 *
 *  @ingroup smart_enums
 */
struct Src1Alpha {

/// Conversion to any @p Enum type having the Src1Alpha value.
/** Instances of the @ref oglplus::smart_enums::Src1Alpha "Src1Alpha"
 *  type are convertible to instances of any enumeration type having
 *  the @c Src1Alpha value.
 */
template <typename Enum, Enum = Enum::Src1Alpha> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Src1Alpha value.
/** Instances of the @c smart_enums::Src1Alpha type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Src1Alpha value.
 */
template <typename Enum> friend bool operator==(Enum value, Src1Alpha);

/// Non-equality comparison with any @p Enum type having the Src1Alpha value.
/** Instances of the @c smart_enums::Src1Alpha type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Src1Alpha value.
 */
template <typename Enum> friend bool operator!=(Enum value, Src1Alpha);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Src1Color value.
/**
 *  @see @ref oglplus::BlendFunction "BlendFunction"
 *
 *  @glsymbols
 *  @gldefref{SRC1_COLOR}
 *
 *  @ingroup smart_enums
 */
struct Src1Color {

/// Conversion to any @p Enum type having the Src1Color value.
/** Instances of the @ref oglplus::smart_enums::Src1Color "Src1Color"
 *  type are convertible to instances of any enumeration type having
 *  the @c Src1Color value.
 */
template <typename Enum, Enum = Enum::Src1Color> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Src1Color value.
/** Instances of the @c smart_enums::Src1Color type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Src1Color value.
 */
template <typename Enum> friend bool operator==(Enum value, Src1Color);

/// Non-equality comparison with any @p Enum type having the Src1Color value.
/** Instances of the @c smart_enums::Src1Color type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Src1Color value.
 */
template <typename Enum> friend bool operator!=(Enum value, Src1Color);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c SrcAlpha value.
/**
 *  @see @ref oglplus::BlendFunction "BlendFunction"
 *
 *  @glsymbols
 *  @gldefref{SRC_ALPHA}
 *
 *  @ingroup smart_enums
 */
struct SrcAlpha {

/// Conversion to any @p Enum type having the SrcAlpha value.
/** Instances of the @ref oglplus::smart_enums::SrcAlpha "SrcAlpha"
 *  type are convertible to instances of any enumeration type having
 *  the @c SrcAlpha value.
 */
template <typename Enum, Enum = Enum::SrcAlpha> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the SrcAlpha value.
/** Instances of the @c smart_enums::SrcAlpha type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c SrcAlpha value.
 */
template <typename Enum> friend bool operator==(Enum value, SrcAlpha);

/// Non-equality comparison with any @p Enum type having the SrcAlpha value.
/** Instances of the @c smart_enums::SrcAlpha type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c SrcAlpha value.
 */
template <typename Enum> friend bool operator!=(Enum value, SrcAlpha);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c SrcAlphaSaturate value.
/**
 *  @see @ref oglplus::BlendFunction "BlendFunction"
 *
 *  @glsymbols
 *  @gldefref{SRC_ALPHA_SATURATE}
 *
 *  @ingroup smart_enums
 */
struct SrcAlphaSaturate {

/// Conversion to any @p Enum type having the SrcAlphaSaturate value.
/** Instances of the @ref oglplus::smart_enums::SrcAlphaSaturate "SrcAlphaSaturate"
 *  type are convertible to instances of any enumeration type having
 *  the @c SrcAlphaSaturate value.
 */
template <typename Enum, Enum = Enum::SrcAlphaSaturate> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the SrcAlphaSaturate value.
/** Instances of the @c smart_enums::SrcAlphaSaturate type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c SrcAlphaSaturate value.
 */
template <typename Enum> friend bool operator==(Enum value, SrcAlphaSaturate);

/// Non-equality comparison with any @p Enum type having the SrcAlphaSaturate value.
/** Instances of the @c smart_enums::SrcAlphaSaturate type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c SrcAlphaSaturate value.
 */
template <typename Enum> friend bool operator!=(Enum value, SrcAlphaSaturate);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c SrcColor value.
/**
 *  @see @ref oglplus::BlendFunction "BlendFunction"
 *
 *  @glsymbols
 *  @gldefref{SRC_COLOR}
 *
 *  @ingroup smart_enums
 */
struct SrcColor {

/// Conversion to any @p Enum type having the SrcColor value.
/** Instances of the @ref oglplus::smart_enums::SrcColor "SrcColor"
 *  type are convertible to instances of any enumeration type having
 *  the @c SrcColor value.
 */
template <typename Enum, Enum = Enum::SrcColor> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the SrcColor value.
/** Instances of the @c smart_enums::SrcColor type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c SrcColor value.
 */
template <typename Enum> friend bool operator==(Enum value, SrcColor);

/// Non-equality comparison with any @p Enum type having the SrcColor value.
/** Instances of the @c smart_enums::SrcColor type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c SrcColor value.
 */
template <typename Enum> friend bool operator!=(Enum value, SrcColor);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c SRGB8 value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{SRGB8}
 *
 *  @ingroup smart_enums
 */
struct SRGB8 {

/// Conversion to any @p Enum type having the SRGB8 value.
/** Instances of the @ref oglplus::smart_enums::SRGB8 "SRGB8"
 *  type are convertible to instances of any enumeration type having
 *  the @c SRGB8 value.
 */
template <typename Enum, Enum = Enum::SRGB8> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the SRGB8 value.
/** Instances of the @c smart_enums::SRGB8 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c SRGB8 value.
 */
template <typename Enum> friend bool operator==(Enum value, SRGB8);

/// Non-equality comparison with any @p Enum type having the SRGB8 value.
/** Instances of the @c smart_enums::SRGB8 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c SRGB8 value.
 */
template <typename Enum> friend bool operator!=(Enum value, SRGB8);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c SRGB8Alpha8 value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{SRGB8_ALPHA8}
 *
 *  @ingroup smart_enums
 */
struct SRGB8Alpha8 {

/// Conversion to any @p Enum type having the SRGB8Alpha8 value.
/** Instances of the @ref oglplus::smart_enums::SRGB8Alpha8 "SRGB8Alpha8"
 *  type are convertible to instances of any enumeration type having
 *  the @c SRGB8Alpha8 value.
 */
template <typename Enum, Enum = Enum::SRGB8Alpha8> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the SRGB8Alpha8 value.
/** Instances of the @c smart_enums::SRGB8Alpha8 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c SRGB8Alpha8 value.
 */
template <typename Enum> friend bool operator==(Enum value, SRGB8Alpha8);

/// Non-equality comparison with any @p Enum type having the SRGB8Alpha8 value.
/** Instances of the @c smart_enums::SRGB8Alpha8 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c SRGB8Alpha8 value.
 */
template <typename Enum> friend bool operator!=(Enum value, SRGB8Alpha8);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c StackOverflow value.
/**
 *  @see @ref oglplus::ErrorCode "ErrorCode"
 *
 *  @glsymbols
 *  @gldefref{STACK_OVERFLOW}
 *
 *  @ingroup smart_enums
 */
struct StackOverflow {

/// Conversion to any @p Enum type having the StackOverflow value.
/** Instances of the @ref oglplus::smart_enums::StackOverflow "StackOverflow"
 *  type are convertible to instances of any enumeration type having
 *  the @c StackOverflow value.
 */
template <typename Enum, Enum = Enum::StackOverflow> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the StackOverflow value.
/** Instances of the @c smart_enums::StackOverflow type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c StackOverflow value.
 */
template <typename Enum> friend bool operator==(Enum value, StackOverflow);

/// Non-equality comparison with any @p Enum type having the StackOverflow value.
/** Instances of the @c smart_enums::StackOverflow type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c StackOverflow value.
 */
template <typename Enum> friend bool operator!=(Enum value, StackOverflow);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c StackUnderflow value.
/**
 *  @see @ref oglplus::ErrorCode "ErrorCode"
 *
 *  @glsymbols
 *  @gldefref{STACK_UNDERFLOW}
 *
 *  @ingroup smart_enums
 */
struct StackUnderflow {

/// Conversion to any @p Enum type having the StackUnderflow value.
/** Instances of the @ref oglplus::smart_enums::StackUnderflow "StackUnderflow"
 *  type are convertible to instances of any enumeration type having
 *  the @c StackUnderflow value.
 */
template <typename Enum, Enum = Enum::StackUnderflow> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the StackUnderflow value.
/** Instances of the @c smart_enums::StackUnderflow type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c StackUnderflow value.
 */
template <typename Enum> friend bool operator==(Enum value, StackUnderflow);

/// Non-equality comparison with any @p Enum type having the StackUnderflow value.
/** Instances of the @c smart_enums::StackUnderflow type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c StackUnderflow value.
 */
template <typename Enum> friend bool operator!=(Enum value, StackUnderflow);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Standard value.
/**
 *  @see @ref oglplus::PathNVFontTarget "PathNVFontTarget"
 *
 *  @glsymbols
 *  @gldefref{STANDARD_FONT_NAME_NV}
 *
 *  @ingroup smart_enums
 */
struct Standard {

/// Conversion to any @p Enum type having the Standard value.
/** Instances of the @ref oglplus::smart_enums::Standard "Standard"
 *  type are convertible to instances of any enumeration type having
 *  the @c Standard value.
 */
template <typename Enum, Enum = Enum::Standard> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Standard value.
/** Instances of the @c smart_enums::Standard type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Standard value.
 */
template <typename Enum> friend bool operator==(Enum value, Standard);

/// Non-equality comparison with any @p Enum type having the Standard value.
/** Instances of the @c smart_enums::Standard type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Standard value.
 */
template <typename Enum> friend bool operator!=(Enum value, Standard);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c StaticCopy value.
/**
 *  @see @ref oglplus::BufferUsage "BufferUsage"
 *
 *  @glsymbols
 *  @gldefref{STATIC_COPY}
 *
 *  @ingroup smart_enums
 */
struct StaticCopy {

/// Conversion to any @p Enum type having the StaticCopy value.
/** Instances of the @ref oglplus::smart_enums::StaticCopy "StaticCopy"
 *  type are convertible to instances of any enumeration type having
 *  the @c StaticCopy value.
 */
template <typename Enum, Enum = Enum::StaticCopy> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the StaticCopy value.
/** Instances of the @c smart_enums::StaticCopy type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c StaticCopy value.
 */
template <typename Enum> friend bool operator==(Enum value, StaticCopy);

/// Non-equality comparison with any @p Enum type having the StaticCopy value.
/** Instances of the @c smart_enums::StaticCopy type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c StaticCopy value.
 */
template <typename Enum> friend bool operator!=(Enum value, StaticCopy);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c StaticDraw value.
/**
 *  @see @ref oglplus::BufferUsage "BufferUsage"
 *
 *  @glsymbols
 *  @gldefref{STATIC_DRAW}
 *
 *  @ingroup smart_enums
 */
struct StaticDraw {

/// Conversion to any @p Enum type having the StaticDraw value.
/** Instances of the @ref oglplus::smart_enums::StaticDraw "StaticDraw"
 *  type are convertible to instances of any enumeration type having
 *  the @c StaticDraw value.
 */
template <typename Enum, Enum = Enum::StaticDraw> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the StaticDraw value.
/** Instances of the @c smart_enums::StaticDraw type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c StaticDraw value.
 */
template <typename Enum> friend bool operator==(Enum value, StaticDraw);

/// Non-equality comparison with any @p Enum type having the StaticDraw value.
/** Instances of the @c smart_enums::StaticDraw type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c StaticDraw value.
 */
template <typename Enum> friend bool operator!=(Enum value, StaticDraw);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c StaticRead value.
/**
 *  @see @ref oglplus::BufferUsage "BufferUsage"
 *
 *  @glsymbols
 *  @gldefref{STATIC_READ}
 *
 *  @ingroup smart_enums
 */
struct StaticRead {

/// Conversion to any @p Enum type having the StaticRead value.
/** Instances of the @ref oglplus::smart_enums::StaticRead "StaticRead"
 *  type are convertible to instances of any enumeration type having
 *  the @c StaticRead value.
 */
template <typename Enum, Enum = Enum::StaticRead> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the StaticRead value.
/** Instances of the @c smart_enums::StaticRead type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c StaticRead value.
 */
template <typename Enum> friend bool operator==(Enum value, StaticRead);

/// Non-equality comparison with any @p Enum type having the StaticRead value.
/** Instances of the @c smart_enums::StaticRead type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c StaticRead value.
 */
template <typename Enum> friend bool operator!=(Enum value, StaticRead);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Stencil value.
/**
 *  @see @ref oglplus::FramebufferAttachment "FramebufferAttachment"
 *  @see @ref oglplus::FramebufferBuffer "FramebufferBuffer"
 *
 *  @glsymbols
 *  @gldefref{STENCIL}
 *  @gldefref{STENCIL_ATTACHMENT}
 *
 *  @ingroup smart_enums
 */
struct Stencil {

/// Conversion to any @p Enum type having the Stencil value.
/** Instances of the @ref oglplus::smart_enums::Stencil "Stencil"
 *  type are convertible to instances of any enumeration type having
 *  the @c Stencil value.
 */
template <typename Enum, Enum = Enum::Stencil> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Stencil value.
/** Instances of the @c smart_enums::Stencil type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Stencil value.
 */
template <typename Enum> friend bool operator==(Enum value, Stencil);

/// Non-equality comparison with any @p Enum type having the Stencil value.
/** Instances of the @c smart_enums::Stencil type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Stencil value.
 */
template <typename Enum> friend bool operator!=(Enum value, Stencil);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c StencilBuffer value.
/**
 *  @see @ref oglplus::BufferSelectBit "BufferSelectBit"
 *  @see @ref oglplus::CompatibilityAttributeGroup "CompatibilityAttributeGroup"
 *
 *  @glsymbols
 *  @gldefref{STENCIL_BUFFER_BIT}
 *
 *  @ingroup smart_enums
 */
struct StencilBuffer {

/// Conversion to any @p Enum type having the StencilBuffer value.
/** Instances of the @ref oglplus::smart_enums::StencilBuffer "StencilBuffer"
 *  type are convertible to instances of any enumeration type having
 *  the @c StencilBuffer value.
 */
template <typename Enum, Enum = Enum::StencilBuffer> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the StencilBuffer value.
/** Instances of the @c smart_enums::StencilBuffer type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c StencilBuffer value.
 */
template <typename Enum> friend bool operator==(Enum value, StencilBuffer);

/// Non-equality comparison with any @p Enum type having the StencilBuffer value.
/** Instances of the @c smart_enums::StencilBuffer type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c StencilBuffer value.
 */
template <typename Enum> friend bool operator!=(Enum value, StencilBuffer);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c StencilIndex value.
/**
 *  @see @ref oglplus::PixelDataFormat "PixelDataFormat"
 *
 *  @glsymbols
 *  @gldefref{STENCIL_INDEX}
 *
 *  @ingroup smart_enums
 */
struct StencilIndex {

/// Conversion to any @p Enum type having the StencilIndex value.
/** Instances of the @ref oglplus::smart_enums::StencilIndex "StencilIndex"
 *  type are convertible to instances of any enumeration type having
 *  the @c StencilIndex value.
 */
template <typename Enum, Enum = Enum::StencilIndex> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the StencilIndex value.
/** Instances of the @c smart_enums::StencilIndex type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c StencilIndex value.
 */
template <typename Enum> friend bool operator==(Enum value, StencilIndex);

/// Non-equality comparison with any @p Enum type having the StencilIndex value.
/** Instances of the @c smart_enums::StencilIndex type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c StencilIndex value.
 */
template <typename Enum> friend bool operator!=(Enum value, StencilIndex);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c StencilIndex8 value.
/**
 *  @see @ref oglplus::PixelDataInternalFormat "PixelDataInternalFormat"
 *
 *  @glsymbols
 *  @gldefref{STENCIL_INDEX8}
 *
 *  @ingroup smart_enums
 */
struct StencilIndex8 {

/// Conversion to any @p Enum type having the StencilIndex8 value.
/** Instances of the @ref oglplus::smart_enums::StencilIndex8 "StencilIndex8"
 *  type are convertible to instances of any enumeration type having
 *  the @c StencilIndex8 value.
 */
template <typename Enum, Enum = Enum::StencilIndex8> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the StencilIndex8 value.
/** Instances of the @c smart_enums::StencilIndex8 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c StencilIndex8 value.
 */
template <typename Enum> friend bool operator==(Enum value, StencilIndex8);

/// Non-equality comparison with any @p Enum type having the StencilIndex8 value.
/** Instances of the @c smart_enums::StencilIndex8 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c StencilIndex8 value.
 */
template <typename Enum> friend bool operator!=(Enum value, StencilIndex8);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c StencilTest value.
/**
 *  @see @ref oglplus::Capability "Capability"
 *
 *  @glsymbols
 *  @gldefref{STENCIL_TEST}
 *
 *  @ingroup smart_enums
 */
struct StencilTest {

/// Conversion to any @p Enum type having the StencilTest value.
/** Instances of the @ref oglplus::smart_enums::StencilTest "StencilTest"
 *  type are convertible to instances of any enumeration type having
 *  the @c StencilTest value.
 */
template <typename Enum, Enum = Enum::StencilTest> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the StencilTest value.
/** Instances of the @c smart_enums::StencilTest type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c StencilTest value.
 */
template <typename Enum> friend bool operator==(Enum value, StencilTest);

/// Non-equality comparison with any @p Enum type having the StencilTest value.
/** Instances of the @c smart_enums::StencilTest type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c StencilTest value.
 */
template <typename Enum> friend bool operator!=(Enum value, StencilTest);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c StreamCopy value.
/**
 *  @see @ref oglplus::BufferUsage "BufferUsage"
 *
 *  @glsymbols
 *  @gldefref{STREAM_COPY}
 *
 *  @ingroup smart_enums
 */
struct StreamCopy {

/// Conversion to any @p Enum type having the StreamCopy value.
/** Instances of the @ref oglplus::smart_enums::StreamCopy "StreamCopy"
 *  type are convertible to instances of any enumeration type having
 *  the @c StreamCopy value.
 */
template <typename Enum, Enum = Enum::StreamCopy> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the StreamCopy value.
/** Instances of the @c smart_enums::StreamCopy type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c StreamCopy value.
 */
template <typename Enum> friend bool operator==(Enum value, StreamCopy);

/// Non-equality comparison with any @p Enum type having the StreamCopy value.
/** Instances of the @c smart_enums::StreamCopy type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c StreamCopy value.
 */
template <typename Enum> friend bool operator!=(Enum value, StreamCopy);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c StreamDraw value.
/**
 *  @see @ref oglplus::BufferUsage "BufferUsage"
 *
 *  @glsymbols
 *  @gldefref{STREAM_DRAW}
 *
 *  @ingroup smart_enums
 */
struct StreamDraw {

/// Conversion to any @p Enum type having the StreamDraw value.
/** Instances of the @ref oglplus::smart_enums::StreamDraw "StreamDraw"
 *  type are convertible to instances of any enumeration type having
 *  the @c StreamDraw value.
 */
template <typename Enum, Enum = Enum::StreamDraw> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the StreamDraw value.
/** Instances of the @c smart_enums::StreamDraw type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c StreamDraw value.
 */
template <typename Enum> friend bool operator==(Enum value, StreamDraw);

/// Non-equality comparison with any @p Enum type having the StreamDraw value.
/** Instances of the @c smart_enums::StreamDraw type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c StreamDraw value.
 */
template <typename Enum> friend bool operator!=(Enum value, StreamDraw);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c StreamRasterization value.
/**
 *  @see @ref oglplus::Capability "Capability"
 *
 *  @glsymbols
 *  @gldefref{STREAM_RASTERIZATION_AMD}
 *
 *  @ingroup smart_enums
 */
struct StreamRasterization {

/// Conversion to any @p Enum type having the StreamRasterization value.
/** Instances of the @ref oglplus::smart_enums::StreamRasterization "StreamRasterization"
 *  type are convertible to instances of any enumeration type having
 *  the @c StreamRasterization value.
 */
template <typename Enum, Enum = Enum::StreamRasterization> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the StreamRasterization value.
/** Instances of the @c smart_enums::StreamRasterization type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c StreamRasterization value.
 */
template <typename Enum> friend bool operator==(Enum value, StreamRasterization);

/// Non-equality comparison with any @p Enum type having the StreamRasterization value.
/** Instances of the @c smart_enums::StreamRasterization type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c StreamRasterization value.
 */
template <typename Enum> friend bool operator!=(Enum value, StreamRasterization);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c StreamRead value.
/**
 *  @see @ref oglplus::BufferUsage "BufferUsage"
 *
 *  @glsymbols
 *  @gldefref{STREAM_READ}
 *
 *  @ingroup smart_enums
 */
struct StreamRead {

/// Conversion to any @p Enum type having the StreamRead value.
/** Instances of the @ref oglplus::smart_enums::StreamRead "StreamRead"
 *  type are convertible to instances of any enumeration type having
 *  the @c StreamRead value.
 */
template <typename Enum, Enum = Enum::StreamRead> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the StreamRead value.
/** Instances of the @c smart_enums::StreamRead type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c StreamRead value.
 */
template <typename Enum> friend bool operator==(Enum value, StreamRead);

/// Non-equality comparison with any @p Enum type having the StreamRead value.
/** Instances of the @c smart_enums::StreamRead type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c StreamRead value.
 */
template <typename Enum> friend bool operator!=(Enum value, StreamRead);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c StrokeCover value.
/**
 *  @see @ref oglplus::PathNVStrokeCoverMode "PathNVStrokeCoverMode"
 *
 *  @glsymbols
 *  @gldefref{PATH_STROKE_COVER_MODE_NV}
 *
 *  @ingroup smart_enums
 */
struct StrokeCover {

/// Conversion to any @p Enum type having the StrokeCover value.
/** Instances of the @ref oglplus::smart_enums::StrokeCover "StrokeCover"
 *  type are convertible to instances of any enumeration type having
 *  the @c StrokeCover value.
 */
template <typename Enum, Enum = Enum::StrokeCover> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the StrokeCover value.
/** Instances of the @c smart_enums::StrokeCover type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c StrokeCover value.
 */
template <typename Enum> friend bool operator==(Enum value, StrokeCover);

/// Non-equality comparison with any @p Enum type having the StrokeCover value.
/** Instances of the @c smart_enums::StrokeCover type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c StrokeCover value.
 */
template <typename Enum> friend bool operator!=(Enum value, StrokeCover);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Subtract value.
/**
 *  @see @ref oglplus::BlendEquation "BlendEquation"
 *
 *  @glsymbols
 *  @gldefref{FUNC_SUBTRACT}
 *
 *  @ingroup smart_enums
 */
struct Subtract {

/// Conversion to any @p Enum type having the Subtract value.
/** Instances of the @ref oglplus::smart_enums::Subtract "Subtract"
 *  type are convertible to instances of any enumeration type having
 *  the @c Subtract value.
 */
template <typename Enum, Enum = Enum::Subtract> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Subtract value.
/** Instances of the @c smart_enums::Subtract type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Subtract value.
 */
template <typename Enum> friend bool operator==(Enum value, Subtract);

/// Non-equality comparison with any @p Enum type having the Subtract value.
/** Instances of the @c smart_enums::Subtract type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Subtract value.
 */
template <typename Enum> friend bool operator!=(Enum value, Subtract);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c SVG value.
/**
 *  @see @ref oglplus::PathNVFormat "PathNVFormat"
 *
 *  @glsymbols
 *  @gldefref{PATH_FORMAT_SVG_NV}
 *
 *  @ingroup smart_enums
 */
struct SVG {

/// Conversion to any @p Enum type having the SVG value.
/** Instances of the @ref oglplus::smart_enums::SVG "SVG"
 *  type are convertible to instances of any enumeration type having
 *  the @c SVG value.
 */
template <typename Enum, Enum = Enum::SVG> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the SVG value.
/** Instances of the @c smart_enums::SVG type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c SVG value.
 */
template <typename Enum> friend bool operator==(Enum value, SVG);

/// Non-equality comparison with any @p Enum type having the SVG value.
/** Instances of the @c smart_enums::SVG type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c SVG value.
 */
template <typename Enum> friend bool operator!=(Enum value, SVG);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c System value.
/**
 *  @see @ref oglplus::PathNVFontTarget "PathNVFontTarget"
 *
 *  @glsymbols
 *  @gldefref{SYSTEM_FONT_NAME_NV}
 *
 *  @ingroup smart_enums
 */
struct System {

/// Conversion to any @p Enum type having the System value.
/** Instances of the @ref oglplus::smart_enums::System "System"
 *  type are convertible to instances of any enumeration type having
 *  the @c System value.
 */
template <typename Enum, Enum = Enum::System> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the System value.
/** Instances of the @c smart_enums::System type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c System value.
 */
template <typename Enum> friend bool operator==(Enum value, System);

/// Non-equality comparison with any @p Enum type having the System value.
/** Instances of the @c smart_enums::System type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c System value.
 */
template <typename Enum> friend bool operator!=(Enum value, System);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c T value.
/**
 *  @see @ref oglplus::TextureWrapCoord "TextureWrapCoord"
 *
 *  @glsymbols
 *  @gldefref{TEXTURE_WRAP_T}
 *
 *  @ingroup smart_enums
 */
struct T {

/// Conversion to any @p Enum type having the T value.
/** Instances of the @ref oglplus::smart_enums::T "T"
 *  type are convertible to instances of any enumeration type having
 *  the @c T value.
 */
template <typename Enum, Enum = Enum::T> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the T value.
/** Instances of the @c smart_enums::T type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c T value.
 */
template <typename Enum> friend bool operator==(Enum value, T);

/// Non-equality comparison with any @p Enum type having the T value.
/** Instances of the @c smart_enums::T type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c T value.
 */
template <typename Enum> friend bool operator!=(Enum value, T);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c TableTooLarge value.
/**
 *  @see @ref oglplus::ErrorCode "ErrorCode"
 *
 *  @glsymbols
 *  @gldefref{TABLE_TOO_LARGE}
 *
 *  @ingroup smart_enums
 */
struct TableTooLarge {

/// Conversion to any @p Enum type having the TableTooLarge value.
/** Instances of the @ref oglplus::smart_enums::TableTooLarge "TableTooLarge"
 *  type are convertible to instances of any enumeration type having
 *  the @c TableTooLarge value.
 */
template <typename Enum, Enum = Enum::TableTooLarge> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the TableTooLarge value.
/** Instances of the @c smart_enums::TableTooLarge type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c TableTooLarge value.
 */
template <typename Enum> friend bool operator==(Enum value, TableTooLarge);

/// Non-equality comparison with any @p Enum type having the TableTooLarge value.
/** Instances of the @c smart_enums::TableTooLarge type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c TableTooLarge value.
 */
template <typename Enum> friend bool operator!=(Enum value, TableTooLarge);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c TessControl value.
/**
 *  @see @ref oglplus::ShaderType "ShaderType"
 *
 *  @glsymbols
 *  @gldefref{TESS_CONTROL_SHADER}
 *
 *  @ingroup smart_enums
 */
struct TessControl {

/// Conversion to any @p Enum type having the TessControl value.
/** Instances of the @ref oglplus::smart_enums::TessControl "TessControl"
 *  type are convertible to instances of any enumeration type having
 *  the @c TessControl value.
 */
template <typename Enum, Enum = Enum::TessControl> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the TessControl value.
/** Instances of the @c smart_enums::TessControl type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c TessControl value.
 */
template <typename Enum> friend bool operator==(Enum value, TessControl);

/// Non-equality comparison with any @p Enum type having the TessControl value.
/** Instances of the @c smart_enums::TessControl type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c TessControl value.
 */
template <typename Enum> friend bool operator!=(Enum value, TessControl);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c TessControlShader value.
/**
 *  @see @ref oglplus::ProgramPipelineStage "ProgramPipelineStage"
 *
 *  @glsymbols
 *  @gldefref{TESS_CONTROL_SHADER_BIT}
 *
 *  @ingroup smart_enums
 */
struct TessControlShader {

/// Conversion to any @p Enum type having the TessControlShader value.
/** Instances of the @ref oglplus::smart_enums::TessControlShader "TessControlShader"
 *  type are convertible to instances of any enumeration type having
 *  the @c TessControlShader value.
 */
template <typename Enum, Enum = Enum::TessControlShader> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the TessControlShader value.
/** Instances of the @c smart_enums::TessControlShader type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c TessControlShader value.
 */
template <typename Enum> friend bool operator==(Enum value, TessControlShader);

/// Non-equality comparison with any @p Enum type having the TessControlShader value.
/** Instances of the @c smart_enums::TessControlShader type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c TessControlShader value.
 */
template <typename Enum> friend bool operator!=(Enum value, TessControlShader);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c TessControlSubroutine value.
/**
 *  @see @ref oglplus::ProgramInterface "ProgramInterface"
 *
 *  @glsymbols
 *  @gldefref{TESS_CONTROL_SUBROUTINE}
 *
 *  @ingroup smart_enums
 */
struct TessControlSubroutine {

/// Conversion to any @p Enum type having the TessControlSubroutine value.
/** Instances of the @ref oglplus::smart_enums::TessControlSubroutine "TessControlSubroutine"
 *  type are convertible to instances of any enumeration type having
 *  the @c TessControlSubroutine value.
 */
template <typename Enum, Enum = Enum::TessControlSubroutine> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the TessControlSubroutine value.
/** Instances of the @c smart_enums::TessControlSubroutine type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c TessControlSubroutine value.
 */
template <typename Enum> friend bool operator==(Enum value, TessControlSubroutine);

/// Non-equality comparison with any @p Enum type having the TessControlSubroutine value.
/** Instances of the @c smart_enums::TessControlSubroutine type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c TessControlSubroutine value.
 */
template <typename Enum> friend bool operator!=(Enum value, TessControlSubroutine);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c TessControlSubroutineUniform value.
/**
 *  @see @ref oglplus::ProgramInterface "ProgramInterface"
 *
 *  @glsymbols
 *  @gldefref{TESS_CONTROL_SUBROUTINE_UNIFORM}
 *
 *  @ingroup smart_enums
 */
struct TessControlSubroutineUniform {

/// Conversion to any @p Enum type having the TessControlSubroutineUniform value.
/** Instances of the @ref oglplus::smart_enums::TessControlSubroutineUniform "TessControlSubroutineUniform"
 *  type are convertible to instances of any enumeration type having
 *  the @c TessControlSubroutineUniform value.
 */
template <typename Enum, Enum = Enum::TessControlSubroutineUniform> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the TessControlSubroutineUniform value.
/** Instances of the @c smart_enums::TessControlSubroutineUniform type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c TessControlSubroutineUniform value.
 */
template <typename Enum> friend bool operator==(Enum value, TessControlSubroutineUniform);

/// Non-equality comparison with any @p Enum type having the TessControlSubroutineUniform value.
/** Instances of the @c smart_enums::TessControlSubroutineUniform type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c TessControlSubroutineUniform value.
 */
template <typename Enum> friend bool operator!=(Enum value, TessControlSubroutineUniform);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c TessEvaluation value.
/**
 *  @see @ref oglplus::ShaderType "ShaderType"
 *
 *  @glsymbols
 *  @gldefref{TESS_EVALUATION_SHADER}
 *
 *  @ingroup smart_enums
 */
struct TessEvaluation {

/// Conversion to any @p Enum type having the TessEvaluation value.
/** Instances of the @ref oglplus::smart_enums::TessEvaluation "TessEvaluation"
 *  type are convertible to instances of any enumeration type having
 *  the @c TessEvaluation value.
 */
template <typename Enum, Enum = Enum::TessEvaluation> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the TessEvaluation value.
/** Instances of the @c smart_enums::TessEvaluation type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c TessEvaluation value.
 */
template <typename Enum> friend bool operator==(Enum value, TessEvaluation);

/// Non-equality comparison with any @p Enum type having the TessEvaluation value.
/** Instances of the @c smart_enums::TessEvaluation type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c TessEvaluation value.
 */
template <typename Enum> friend bool operator!=(Enum value, TessEvaluation);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c TessEvaluationShader value.
/**
 *  @see @ref oglplus::ProgramPipelineStage "ProgramPipelineStage"
 *
 *  @glsymbols
 *  @gldefref{TESS_EVALUATION_SHADER_BIT}
 *
 *  @ingroup smart_enums
 */
struct TessEvaluationShader {

/// Conversion to any @p Enum type having the TessEvaluationShader value.
/** Instances of the @ref oglplus::smart_enums::TessEvaluationShader "TessEvaluationShader"
 *  type are convertible to instances of any enumeration type having
 *  the @c TessEvaluationShader value.
 */
template <typename Enum, Enum = Enum::TessEvaluationShader> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the TessEvaluationShader value.
/** Instances of the @c smart_enums::TessEvaluationShader type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c TessEvaluationShader value.
 */
template <typename Enum> friend bool operator==(Enum value, TessEvaluationShader);

/// Non-equality comparison with any @p Enum type having the TessEvaluationShader value.
/** Instances of the @c smart_enums::TessEvaluationShader type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c TessEvaluationShader value.
 */
template <typename Enum> friend bool operator!=(Enum value, TessEvaluationShader);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c TessEvaluationSubroutine value.
/**
 *  @see @ref oglplus::ProgramInterface "ProgramInterface"
 *
 *  @glsymbols
 *  @gldefref{TESS_EVALUATION_SUBROUTINE}
 *
 *  @ingroup smart_enums
 */
struct TessEvaluationSubroutine {

/// Conversion to any @p Enum type having the TessEvaluationSubroutine value.
/** Instances of the @ref oglplus::smart_enums::TessEvaluationSubroutine "TessEvaluationSubroutine"
 *  type are convertible to instances of any enumeration type having
 *  the @c TessEvaluationSubroutine value.
 */
template <typename Enum, Enum = Enum::TessEvaluationSubroutine> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the TessEvaluationSubroutine value.
/** Instances of the @c smart_enums::TessEvaluationSubroutine type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c TessEvaluationSubroutine value.
 */
template <typename Enum> friend bool operator==(Enum value, TessEvaluationSubroutine);

/// Non-equality comparison with any @p Enum type having the TessEvaluationSubroutine value.
/** Instances of the @c smart_enums::TessEvaluationSubroutine type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c TessEvaluationSubroutine value.
 */
template <typename Enum> friend bool operator!=(Enum value, TessEvaluationSubroutine);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c TessEvaluationSubroutineUniform value.
/**
 *  @see @ref oglplus::ProgramInterface "ProgramInterface"
 *
 *  @glsymbols
 *  @gldefref{TESS_EVALUATION_SUBROUTINE_UNIFORM}
 *
 *  @ingroup smart_enums
 */
struct TessEvaluationSubroutineUniform {

/// Conversion to any @p Enum type having the TessEvaluationSubroutineUniform value.
/** Instances of the @ref oglplus::smart_enums::TessEvaluationSubroutineUniform "TessEvaluationSubroutineUniform"
 *  type are convertible to instances of any enumeration type having
 *  the @c TessEvaluationSubroutineUniform value.
 */
template <typename Enum, Enum = Enum::TessEvaluationSubroutineUniform> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the TessEvaluationSubroutineUniform value.
/** Instances of the @c smart_enums::TessEvaluationSubroutineUniform type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c TessEvaluationSubroutineUniform value.
 */
template <typename Enum> friend bool operator==(Enum value, TessEvaluationSubroutineUniform);

/// Non-equality comparison with any @p Enum type having the TessEvaluationSubroutineUniform value.
/** Instances of the @c smart_enums::TessEvaluationSubroutineUniform type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c TessEvaluationSubroutineUniform value.
 */
template <typename Enum> friend bool operator!=(Enum value, TessEvaluationSubroutineUniform);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Texture value.
/**
 *  @see @ref oglplus::BufferTarget "BufferTarget"
 *  @see @ref oglplus::CompatibilityAttributeGroup "CompatibilityAttributeGroup"
 *  @see @ref oglplus::CompatibilityMatrixMode "CompatibilityMatrixMode"
 *  @see @ref oglplus::ObjectType "ObjectType"
 *
 *  @glsymbols
 *  @gldefref{TEXTURE}
 *  @gldefref{TEXTURE_BIT}
 *  @gldefref{TEXTURE_BUFFER}
 *
 *  @ingroup smart_enums
 */
struct Texture {

/// Conversion to any @p Enum type having the Texture value.
/** Instances of the @ref oglplus::smart_enums::Texture "Texture"
 *  type are convertible to instances of any enumeration type having
 *  the @c Texture value.
 */
template <typename Enum, Enum = Enum::Texture> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Texture value.
/** Instances of the @c smart_enums::Texture type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Texture value.
 */
template <typename Enum> friend bool operator==(Enum value, Texture);

/// Non-equality comparison with any @p Enum type having the Texture value.
/** Instances of the @c smart_enums::Texture type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Texture value.
 */
template <typename Enum> friend bool operator!=(Enum value, Texture);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c TextureCompression value.
/**
 *  @see @ref oglplus::HintTarget "HintTarget"
 *
 *  @glsymbols
 *  @gldefref{TEXTURE_COMPRESSION_HINT}
 *
 *  @ingroup smart_enums
 */
struct TextureCompression {

/// Conversion to any @p Enum type having the TextureCompression value.
/** Instances of the @ref oglplus::smart_enums::TextureCompression "TextureCompression"
 *  type are convertible to instances of any enumeration type having
 *  the @c TextureCompression value.
 */
template <typename Enum, Enum = Enum::TextureCompression> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the TextureCompression value.
/** Instances of the @c smart_enums::TextureCompression type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c TextureCompression value.
 */
template <typename Enum> friend bool operator==(Enum value, TextureCompression);

/// Non-equality comparison with any @p Enum type having the TextureCompression value.
/** Instances of the @c smart_enums::TextureCompression type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c TextureCompression value.
 */
template <typename Enum> friend bool operator!=(Enum value, TextureCompression);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c TextureCubeMapSeamless value.
/**
 *  @see @ref oglplus::Capability "Capability"
 *
 *  @glsymbols
 *  @gldefref{TEXTURE_CUBE_MAP_SEAMLESS}
 *
 *  @ingroup smart_enums
 */
struct TextureCubeMapSeamless {

/// Conversion to any @p Enum type having the TextureCubeMapSeamless value.
/** Instances of the @ref oglplus::smart_enums::TextureCubeMapSeamless "TextureCubeMapSeamless"
 *  type are convertible to instances of any enumeration type having
 *  the @c TextureCubeMapSeamless value.
 */
template <typename Enum, Enum = Enum::TextureCubeMapSeamless> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the TextureCubeMapSeamless value.
/** Instances of the @c smart_enums::TextureCubeMapSeamless type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c TextureCubeMapSeamless value.
 */
template <typename Enum> friend bool operator==(Enum value, TextureCubeMapSeamless);

/// Non-equality comparison with any @p Enum type having the TextureCubeMapSeamless value.
/** Instances of the @c smart_enums::TextureCubeMapSeamless type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c TextureCubeMapSeamless value.
 */
template <typename Enum> friend bool operator!=(Enum value, TextureCubeMapSeamless);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c TextureFetch value.
/**
 *  @see @ref oglplus::MemoryBarrierBit "MemoryBarrierBit"
 *
 *  @glsymbols
 *  @gldefref{TEXTURE_FETCH_BARRIER_BIT}
 *
 *  @ingroup smart_enums
 */
struct TextureFetch {

/// Conversion to any @p Enum type having the TextureFetch value.
/** Instances of the @ref oglplus::smart_enums::TextureFetch "TextureFetch"
 *  type are convertible to instances of any enumeration type having
 *  the @c TextureFetch value.
 */
template <typename Enum, Enum = Enum::TextureFetch> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the TextureFetch value.
/** Instances of the @c smart_enums::TextureFetch type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c TextureFetch value.
 */
template <typename Enum> friend bool operator==(Enum value, TextureFetch);

/// Non-equality comparison with any @p Enum type having the TextureFetch value.
/** Instances of the @c smart_enums::TextureFetch type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c TextureFetch value.
 */
template <typename Enum> friend bool operator!=(Enum value, TextureFetch);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c TextureUpdate value.
/**
 *  @see @ref oglplus::MemoryBarrierBit "MemoryBarrierBit"
 *
 *  @glsymbols
 *  @gldefref{TEXTURE_UPDATE_BARRIER_BIT}
 *
 *  @ingroup smart_enums
 */
struct TextureUpdate {

/// Conversion to any @p Enum type having the TextureUpdate value.
/** Instances of the @ref oglplus::smart_enums::TextureUpdate "TextureUpdate"
 *  type are convertible to instances of any enumeration type having
 *  the @c TextureUpdate value.
 */
template <typename Enum, Enum = Enum::TextureUpdate> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the TextureUpdate value.
/** Instances of the @c smart_enums::TextureUpdate type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c TextureUpdate value.
 */
template <typename Enum> friend bool operator==(Enum value, TextureUpdate);

/// Non-equality comparison with any @p Enum type having the TextureUpdate value.
/** Instances of the @c smart_enums::TextureUpdate type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c TextureUpdate value.
 */
template <typename Enum> friend bool operator!=(Enum value, TextureUpdate);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c ThirdParty value.
/**
 *  @see @ref oglplus::DebugOutputARBSource "DebugOutputARBSource"
 *  @see @ref oglplus::DebugOutputSource "DebugOutputSource"
 *  @see @ref oglplus::DebugSource "DebugSource"
 *
 *  @glsymbols
 *  @gldefref{DEBUG_SOURCE_THIRD_PARTY}
 *  @gldefref{DEBUG_SOURCE_THIRD_PARTY_ARB}
 *
 *  @ingroup smart_enums
 */
struct ThirdParty {

/// Conversion to any @p Enum type having the ThirdParty value.
/** Instances of the @ref oglplus::smart_enums::ThirdParty "ThirdParty"
 *  type are convertible to instances of any enumeration type having
 *  the @c ThirdParty value.
 */
template <typename Enum, Enum = Enum::ThirdParty> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the ThirdParty value.
/** Instances of the @c smart_enums::ThirdParty type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c ThirdParty value.
 */
template <typename Enum> friend bool operator==(Enum value, ThirdParty);

/// Non-equality comparison with any @p Enum type having the ThirdParty value.
/** Instances of the @c smart_enums::ThirdParty type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c ThirdParty value.
 */
template <typename Enum> friend bool operator!=(Enum value, ThirdParty);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c TimeElapsed value.
/**
 *  @see @ref oglplus::QueryTarget "QueryTarget"
 *
 *  @glsymbols
 *  @gldefref{TIME_ELAPSED}
 *
 *  @ingroup smart_enums
 */
struct TimeElapsed {

/// Conversion to any @p Enum type having the TimeElapsed value.
/** Instances of the @ref oglplus::smart_enums::TimeElapsed "TimeElapsed"
 *  type are convertible to instances of any enumeration type having
 *  the @c TimeElapsed value.
 */
template <typename Enum, Enum = Enum::TimeElapsed> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the TimeElapsed value.
/** Instances of the @c smart_enums::TimeElapsed type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c TimeElapsed value.
 */
template <typename Enum> friend bool operator==(Enum value, TimeElapsed);

/// Non-equality comparison with any @p Enum type having the TimeElapsed value.
/** Instances of the @c smart_enums::TimeElapsed type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c TimeElapsed value.
 */
template <typename Enum> friend bool operator!=(Enum value, TimeElapsed);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c TimeoutExpired value.
/**
 *  @see @ref oglplus::SyncWaitResult "SyncWaitResult"
 *
 *  @glsymbols
 *  @gldefref{TIMEOUT_EXPIRED}
 *
 *  @ingroup smart_enums
 */
struct TimeoutExpired {

/// Conversion to any @p Enum type having the TimeoutExpired value.
/** Instances of the @ref oglplus::smart_enums::TimeoutExpired "TimeoutExpired"
 *  type are convertible to instances of any enumeration type having
 *  the @c TimeoutExpired value.
 */
template <typename Enum, Enum = Enum::TimeoutExpired> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the TimeoutExpired value.
/** Instances of the @c smart_enums::TimeoutExpired type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c TimeoutExpired value.
 */
template <typename Enum> friend bool operator==(Enum value, TimeoutExpired);

/// Non-equality comparison with any @p Enum type having the TimeoutExpired value.
/** Instances of the @c smart_enums::TimeoutExpired type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c TimeoutExpired value.
 */
template <typename Enum> friend bool operator!=(Enum value, TimeoutExpired);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Timestamp value.
/**
 *  @see @ref oglplus::QueryTarget "QueryTarget"
 *
 *  @glsymbols
 *  @gldefref{TIMESTAMP}
 *
 *  @ingroup smart_enums
 */
struct Timestamp {

/// Conversion to any @p Enum type having the Timestamp value.
/** Instances of the @ref oglplus::smart_enums::Timestamp "Timestamp"
 *  type are convertible to instances of any enumeration type having
 *  the @c Timestamp value.
 */
template <typename Enum, Enum = Enum::Timestamp> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Timestamp value.
/** Instances of the @c smart_enums::Timestamp type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Timestamp value.
 */
template <typename Enum> friend bool operator==(Enum value, Timestamp);

/// Non-equality comparison with any @p Enum type having the Timestamp value.
/** Instances of the @c smart_enums::Timestamp type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Timestamp value.
 */
template <typename Enum> friend bool operator!=(Enum value, Timestamp);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c TopLevelArraySize value.
/**
 *  @see @ref oglplus::ProgramResourceProperty "ProgramResourceProperty"
 *
 *  @glsymbols
 *  @gldefref{TOP_LEVEL_ARRAY_SIZE}
 *
 *  @ingroup smart_enums
 */
struct TopLevelArraySize {

/// Conversion to any @p Enum type having the TopLevelArraySize value.
/** Instances of the @ref oglplus::smart_enums::TopLevelArraySize "TopLevelArraySize"
 *  type are convertible to instances of any enumeration type having
 *  the @c TopLevelArraySize value.
 */
template <typename Enum, Enum = Enum::TopLevelArraySize> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the TopLevelArraySize value.
/** Instances of the @c smart_enums::TopLevelArraySize type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c TopLevelArraySize value.
 */
template <typename Enum> friend bool operator==(Enum value, TopLevelArraySize);

/// Non-equality comparison with any @p Enum type having the TopLevelArraySize value.
/** Instances of the @c smart_enums::TopLevelArraySize type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c TopLevelArraySize value.
 */
template <typename Enum> friend bool operator!=(Enum value, TopLevelArraySize);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c TopLevelArrayStride value.
/**
 *  @see @ref oglplus::ProgramResourceProperty "ProgramResourceProperty"
 *
 *  @glsymbols
 *  @gldefref{TOP_LEVEL_ARRAY_STRIDE}
 *
 *  @ingroup smart_enums
 */
struct TopLevelArrayStride {

/// Conversion to any @p Enum type having the TopLevelArrayStride value.
/** Instances of the @ref oglplus::smart_enums::TopLevelArrayStride "TopLevelArrayStride"
 *  type are convertible to instances of any enumeration type having
 *  the @c TopLevelArrayStride value.
 */
template <typename Enum, Enum = Enum::TopLevelArrayStride> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the TopLevelArrayStride value.
/** Instances of the @c smart_enums::TopLevelArrayStride type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c TopLevelArrayStride value.
 */
template <typename Enum> friend bool operator==(Enum value, TopLevelArrayStride);

/// Non-equality comparison with any @p Enum type having the TopLevelArrayStride value.
/** Instances of the @c smart_enums::TopLevelArrayStride type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c TopLevelArrayStride value.
 */
template <typename Enum> friend bool operator!=(Enum value, TopLevelArrayStride);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Transform value.
/**
 *  @see @ref oglplus::CompatibilityAttributeGroup "CompatibilityAttributeGroup"
 *
 *  @glsymbols
 *  @gldefref{TRANSFORM_BIT}
 *
 *  @ingroup smart_enums
 */
struct Transform {

/// Conversion to any @p Enum type having the Transform value.
/** Instances of the @ref oglplus::smart_enums::Transform "Transform"
 *  type are convertible to instances of any enumeration type having
 *  the @c Transform value.
 */
template <typename Enum, Enum = Enum::Transform> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Transform value.
/** Instances of the @c smart_enums::Transform type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Transform value.
 */
template <typename Enum> friend bool operator==(Enum value, Transform);

/// Non-equality comparison with any @p Enum type having the Transform value.
/** Instances of the @c smart_enums::Transform type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Transform value.
 */
template <typename Enum> friend bool operator!=(Enum value, Transform);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c TransformFeedback value.
/**
 *  @see @ref oglplus::BufferIndexedTarget "BufferIndexedTarget"
 *  @see @ref oglplus::BufferTarget "BufferTarget"
 *  @see @ref oglplus::MemoryBarrierBit "MemoryBarrierBit"
 *  @see @ref oglplus::ObjectType "ObjectType"
 *  @see @ref oglplus::TransformFeedbackTarget "TransformFeedbackTarget"
 *
 *  @glsymbols
 *  @gldefref{TRANSFORM_FEEDBACK}
 *  @gldefref{TRANSFORM_FEEDBACK_BARRIER_BIT}
 *  @gldefref{TRANSFORM_FEEDBACK_BUFFER}
 *
 *  @ingroup smart_enums
 */
struct TransformFeedback {

/// Conversion to any @p Enum type having the TransformFeedback value.
/** Instances of the @ref oglplus::smart_enums::TransformFeedback "TransformFeedback"
 *  type are convertible to instances of any enumeration type having
 *  the @c TransformFeedback value.
 */
template <typename Enum, Enum = Enum::TransformFeedback> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the TransformFeedback value.
/** Instances of the @c smart_enums::TransformFeedback type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c TransformFeedback value.
 */
template <typename Enum> friend bool operator==(Enum value, TransformFeedback);

/// Non-equality comparison with any @p Enum type having the TransformFeedback value.
/** Instances of the @c smart_enums::TransformFeedback type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c TransformFeedback value.
 */
template <typename Enum> friend bool operator!=(Enum value, TransformFeedback);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c TransformFeedbackBufferIndex value.
/**
 *  @see @ref oglplus::ProgramResourceProperty "ProgramResourceProperty"
 *
 *  @glsymbols
 *  @gldefref{TRANSFORM_FEEDBACK_BUFFER_INDEX}
 *
 *  @ingroup smart_enums
 */
struct TransformFeedbackBufferIndex {

/// Conversion to any @p Enum type having the TransformFeedbackBufferIndex value.
/** Instances of the @ref oglplus::smart_enums::TransformFeedbackBufferIndex "TransformFeedbackBufferIndex"
 *  type are convertible to instances of any enumeration type having
 *  the @c TransformFeedbackBufferIndex value.
 */
template <typename Enum, Enum = Enum::TransformFeedbackBufferIndex> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the TransformFeedbackBufferIndex value.
/** Instances of the @c smart_enums::TransformFeedbackBufferIndex type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c TransformFeedbackBufferIndex value.
 */
template <typename Enum> friend bool operator==(Enum value, TransformFeedbackBufferIndex);

/// Non-equality comparison with any @p Enum type having the TransformFeedbackBufferIndex value.
/** Instances of the @c smart_enums::TransformFeedbackBufferIndex type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c TransformFeedbackBufferIndex value.
 */
template <typename Enum> friend bool operator!=(Enum value, TransformFeedbackBufferIndex);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c TransformFeedbackBufferStride value.
/**
 *  @see @ref oglplus::ProgramResourceProperty "ProgramResourceProperty"
 *
 *  @glsymbols
 *  @gldefref{TRANSFORM_FEEDBACK_BUFFER_STRIDE}
 *
 *  @ingroup smart_enums
 */
struct TransformFeedbackBufferStride {

/// Conversion to any @p Enum type having the TransformFeedbackBufferStride value.
/** Instances of the @ref oglplus::smart_enums::TransformFeedbackBufferStride "TransformFeedbackBufferStride"
 *  type are convertible to instances of any enumeration type having
 *  the @c TransformFeedbackBufferStride value.
 */
template <typename Enum, Enum = Enum::TransformFeedbackBufferStride> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the TransformFeedbackBufferStride value.
/** Instances of the @c smart_enums::TransformFeedbackBufferStride type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c TransformFeedbackBufferStride value.
 */
template <typename Enum> friend bool operator==(Enum value, TransformFeedbackBufferStride);

/// Non-equality comparison with any @p Enum type having the TransformFeedbackBufferStride value.
/** Instances of the @c smart_enums::TransformFeedbackBufferStride type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c TransformFeedbackBufferStride value.
 */
template <typename Enum> friend bool operator!=(Enum value, TransformFeedbackBufferStride);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c TransformFeedbackPrimitivesWritten value.
/**
 *  @see @ref oglplus::QueryTarget "QueryTarget"
 *
 *  @glsymbols
 *  @gldefref{TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN}
 *
 *  @ingroup smart_enums
 */
struct TransformFeedbackPrimitivesWritten {

/// Conversion to any @p Enum type having the TransformFeedbackPrimitivesWritten value.
/** Instances of the @ref oglplus::smart_enums::TransformFeedbackPrimitivesWritten "TransformFeedbackPrimitivesWritten"
 *  type are convertible to instances of any enumeration type having
 *  the @c TransformFeedbackPrimitivesWritten value.
 */
template <typename Enum, Enum = Enum::TransformFeedbackPrimitivesWritten> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the TransformFeedbackPrimitivesWritten value.
/** Instances of the @c smart_enums::TransformFeedbackPrimitivesWritten type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c TransformFeedbackPrimitivesWritten value.
 */
template <typename Enum> friend bool operator==(Enum value, TransformFeedbackPrimitivesWritten);

/// Non-equality comparison with any @p Enum type having the TransformFeedbackPrimitivesWritten value.
/** Instances of the @c smart_enums::TransformFeedbackPrimitivesWritten type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c TransformFeedbackPrimitivesWritten value.
 */
template <typename Enum> friend bool operator!=(Enum value, TransformFeedbackPrimitivesWritten);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c TransformFeedebackVarying value.
/**
 *  @see @ref oglplus::ProgramInterface "ProgramInterface"
 *
 *  @glsymbols
 *  @gldefref{TRANSFORM_FEEDEBACK_VARYING}
 *
 *  @ingroup smart_enums
 */
struct TransformFeedebackVarying {

/// Conversion to any @p Enum type having the TransformFeedebackVarying value.
/** Instances of the @ref oglplus::smart_enums::TransformFeedebackVarying "TransformFeedebackVarying"
 *  type are convertible to instances of any enumeration type having
 *  the @c TransformFeedebackVarying value.
 */
template <typename Enum, Enum = Enum::TransformFeedebackVarying> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the TransformFeedebackVarying value.
/** Instances of the @c smart_enums::TransformFeedebackVarying type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c TransformFeedebackVarying value.
 */
template <typename Enum> friend bool operator==(Enum value, TransformFeedebackVarying);

/// Non-equality comparison with any @p Enum type having the TransformFeedebackVarying value.
/** Instances of the @c smart_enums::TransformFeedebackVarying type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c TransformFeedebackVarying value.
 */
template <typename Enum> friend bool operator!=(Enum value, TransformFeedebackVarying);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Translate2D value.
/**
 *  @see @ref oglplus::PathNVTransformType "PathNVTransformType"
 *
 *  @glsymbols
 *  @gldefref{TRANSLATE_2D_NV}
 *
 *  @ingroup smart_enums
 */
struct Translate2D {

/// Conversion to any @p Enum type having the Translate2D value.
/** Instances of the @ref oglplus::smart_enums::Translate2D "Translate2D"
 *  type are convertible to instances of any enumeration type having
 *  the @c Translate2D value.
 */
template <typename Enum, Enum = Enum::Translate2D> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Translate2D value.
/** Instances of the @c smart_enums::Translate2D type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Translate2D value.
 */
template <typename Enum> friend bool operator==(Enum value, Translate2D);

/// Non-equality comparison with any @p Enum type having the Translate2D value.
/** Instances of the @c smart_enums::Translate2D type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Translate2D value.
 */
template <typename Enum> friend bool operator!=(Enum value, Translate2D);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Translate3D value.
/**
 *  @see @ref oglplus::PathNVTransformType "PathNVTransformType"
 *
 *  @glsymbols
 *  @gldefref{TRANSLATE_3D_NV}
 *
 *  @ingroup smart_enums
 */
struct Translate3D {

/// Conversion to any @p Enum type having the Translate3D value.
/** Instances of the @ref oglplus::smart_enums::Translate3D "Translate3D"
 *  type are convertible to instances of any enumeration type having
 *  the @c Translate3D value.
 */
template <typename Enum, Enum = Enum::Translate3D> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Translate3D value.
/** Instances of the @c smart_enums::Translate3D type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Translate3D value.
 */
template <typename Enum> friend bool operator==(Enum value, Translate3D);

/// Non-equality comparison with any @p Enum type having the Translate3D value.
/** Instances of the @c smart_enums::Translate3D type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Translate3D value.
 */
template <typename Enum> friend bool operator!=(Enum value, Translate3D);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c TranslateX value.
/**
 *  @see @ref oglplus::PathNVTransformType "PathNVTransformType"
 *
 *  @glsymbols
 *  @gldefref{TRANSLATE_X_NV}
 *
 *  @ingroup smart_enums
 */
struct TranslateX {

/// Conversion to any @p Enum type having the TranslateX value.
/** Instances of the @ref oglplus::smart_enums::TranslateX "TranslateX"
 *  type are convertible to instances of any enumeration type having
 *  the @c TranslateX value.
 */
template <typename Enum, Enum = Enum::TranslateX> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the TranslateX value.
/** Instances of the @c smart_enums::TranslateX type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c TranslateX value.
 */
template <typename Enum> friend bool operator==(Enum value, TranslateX);

/// Non-equality comparison with any @p Enum type having the TranslateX value.
/** Instances of the @c smart_enums::TranslateX type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c TranslateX value.
 */
template <typename Enum> friend bool operator!=(Enum value, TranslateX);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c TranslateY value.
/**
 *  @see @ref oglplus::PathNVTransformType "PathNVTransformType"
 *
 *  @glsymbols
 *  @gldefref{TRANSLATE_Y_NV}
 *
 *  @ingroup smart_enums
 */
struct TranslateY {

/// Conversion to any @p Enum type having the TranslateY value.
/** Instances of the @ref oglplus::smart_enums::TranslateY "TranslateY"
 *  type are convertible to instances of any enumeration type having
 *  the @c TranslateY value.
 */
template <typename Enum, Enum = Enum::TranslateY> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the TranslateY value.
/** Instances of the @c smart_enums::TranslateY type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c TranslateY value.
 */
template <typename Enum> friend bool operator==(Enum value, TranslateY);

/// Non-equality comparison with any @p Enum type having the TranslateY value.
/** Instances of the @c smart_enums::TranslateY type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c TranslateY value.
 */
template <typename Enum> friend bool operator!=(Enum value, TranslateY);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c TransposeAffine2D value.
/**
 *  @see @ref oglplus::PathNVTransformType "PathNVTransformType"
 *
 *  @glsymbols
 *  @gldefref{TRANSPOSE_AFFINE_2D_NV}
 *
 *  @ingroup smart_enums
 */
struct TransposeAffine2D {

/// Conversion to any @p Enum type having the TransposeAffine2D value.
/** Instances of the @ref oglplus::smart_enums::TransposeAffine2D "TransposeAffine2D"
 *  type are convertible to instances of any enumeration type having
 *  the @c TransposeAffine2D value.
 */
template <typename Enum, Enum = Enum::TransposeAffine2D> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the TransposeAffine2D value.
/** Instances of the @c smart_enums::TransposeAffine2D type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c TransposeAffine2D value.
 */
template <typename Enum> friend bool operator==(Enum value, TransposeAffine2D);

/// Non-equality comparison with any @p Enum type having the TransposeAffine2D value.
/** Instances of the @c smart_enums::TransposeAffine2D type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c TransposeAffine2D value.
 */
template <typename Enum> friend bool operator!=(Enum value, TransposeAffine2D);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c TransposeAffine3D value.
/**
 *  @see @ref oglplus::PathNVTransformType "PathNVTransformType"
 *
 *  @glsymbols
 *  @gldefref{TRANSPOSE_AFFINE_3D_NV}
 *
 *  @ingroup smart_enums
 */
struct TransposeAffine3D {

/// Conversion to any @p Enum type having the TransposeAffine3D value.
/** Instances of the @ref oglplus::smart_enums::TransposeAffine3D "TransposeAffine3D"
 *  type are convertible to instances of any enumeration type having
 *  the @c TransposeAffine3D value.
 */
template <typename Enum, Enum = Enum::TransposeAffine3D> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the TransposeAffine3D value.
/** Instances of the @c smart_enums::TransposeAffine3D type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c TransposeAffine3D value.
 */
template <typename Enum> friend bool operator==(Enum value, TransposeAffine3D);

/// Non-equality comparison with any @p Enum type having the TransposeAffine3D value.
/** Instances of the @c smart_enums::TransposeAffine3D type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c TransposeAffine3D value.
 */
template <typename Enum> friend bool operator!=(Enum value, TransposeAffine3D);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c TriangleFan value.
/**
 *  @see @ref oglplus::CompatibilityPrimitiveType "CompatibilityPrimitiveType"
 *  @see @ref oglplus::PrimitiveType "PrimitiveType"
 *
 *  @glsymbols
 *  @gldefref{TRIANGLE_FAN}
 *
 *  @ingroup smart_enums
 */
struct TriangleFan {

/// Conversion to any @p Enum type having the TriangleFan value.
/** Instances of the @ref oglplus::smart_enums::TriangleFan "TriangleFan"
 *  type are convertible to instances of any enumeration type having
 *  the @c TriangleFan value.
 */
template <typename Enum, Enum = Enum::TriangleFan> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the TriangleFan value.
/** Instances of the @c smart_enums::TriangleFan type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c TriangleFan value.
 */
template <typename Enum> friend bool operator==(Enum value, TriangleFan);

/// Non-equality comparison with any @p Enum type having the TriangleFan value.
/** Instances of the @c smart_enums::TriangleFan type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c TriangleFan value.
 */
template <typename Enum> friend bool operator!=(Enum value, TriangleFan);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Triangles value.
/**
 *  @see @ref oglplus::CompatibilityPrimitiveType "CompatibilityPrimitiveType"
 *  @see @ref oglplus::PrimitiveType "PrimitiveType"
 *  @see @ref oglplus::TessGenPrimitiveType "TessGenPrimitiveType"
 *  @see @ref oglplus::TransformFeedbackPrimitiveType "TransformFeedbackPrimitiveType"
 *
 *  @glsymbols
 *  @gldefref{TRIANGLES}
 *
 *  @ingroup smart_enums
 */
struct Triangles {

/// Conversion to any @p Enum type having the Triangles value.
/** Instances of the @ref oglplus::smart_enums::Triangles "Triangles"
 *  type are convertible to instances of any enumeration type having
 *  the @c Triangles value.
 */
template <typename Enum, Enum = Enum::Triangles> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Triangles value.
/** Instances of the @c smart_enums::Triangles type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Triangles value.
 */
template <typename Enum> friend bool operator==(Enum value, Triangles);

/// Non-equality comparison with any @p Enum type having the Triangles value.
/** Instances of the @c smart_enums::Triangles type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Triangles value.
 */
template <typename Enum> friend bool operator!=(Enum value, Triangles);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c TrianglesAdjacency value.
/**
 *  @see @ref oglplus::PrimitiveType "PrimitiveType"
 *
 *  @glsymbols
 *  @gldefref{TRIANGLES_ADJACENCY}
 *
 *  @ingroup smart_enums
 */
struct TrianglesAdjacency {

/// Conversion to any @p Enum type having the TrianglesAdjacency value.
/** Instances of the @ref oglplus::smart_enums::TrianglesAdjacency "TrianglesAdjacency"
 *  type are convertible to instances of any enumeration type having
 *  the @c TrianglesAdjacency value.
 */
template <typename Enum, Enum = Enum::TrianglesAdjacency> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the TrianglesAdjacency value.
/** Instances of the @c smart_enums::TrianglesAdjacency type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c TrianglesAdjacency value.
 */
template <typename Enum> friend bool operator==(Enum value, TrianglesAdjacency);

/// Non-equality comparison with any @p Enum type having the TrianglesAdjacency value.
/** Instances of the @c smart_enums::TrianglesAdjacency type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c TrianglesAdjacency value.
 */
template <typename Enum> friend bool operator!=(Enum value, TrianglesAdjacency);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c TriangleStrip value.
/**
 *  @see @ref oglplus::CompatibilityPrimitiveType "CompatibilityPrimitiveType"
 *  @see @ref oglplus::PrimitiveType "PrimitiveType"
 *
 *  @glsymbols
 *  @gldefref{TRIANGLE_STRIP}
 *
 *  @ingroup smart_enums
 */
struct TriangleStrip {

/// Conversion to any @p Enum type having the TriangleStrip value.
/** Instances of the @ref oglplus::smart_enums::TriangleStrip "TriangleStrip"
 *  type are convertible to instances of any enumeration type having
 *  the @c TriangleStrip value.
 */
template <typename Enum, Enum = Enum::TriangleStrip> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the TriangleStrip value.
/** Instances of the @c smart_enums::TriangleStrip type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c TriangleStrip value.
 */
template <typename Enum> friend bool operator==(Enum value, TriangleStrip);

/// Non-equality comparison with any @p Enum type having the TriangleStrip value.
/** Instances of the @c smart_enums::TriangleStrip type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c TriangleStrip value.
 */
template <typename Enum> friend bool operator!=(Enum value, TriangleStrip);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c TriangleStripAdjacency value.
/**
 *  @see @ref oglplus::PrimitiveType "PrimitiveType"
 *
 *  @glsymbols
 *  @gldefref{TRIANGLE_STRIP_ADJACENCY}
 *
 *  @ingroup smart_enums
 */
struct TriangleStripAdjacency {

/// Conversion to any @p Enum type having the TriangleStripAdjacency value.
/** Instances of the @ref oglplus::smart_enums::TriangleStripAdjacency "TriangleStripAdjacency"
 *  type are convertible to instances of any enumeration type having
 *  the @c TriangleStripAdjacency value.
 */
template <typename Enum, Enum = Enum::TriangleStripAdjacency> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the TriangleStripAdjacency value.
/** Instances of the @c smart_enums::TriangleStripAdjacency type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c TriangleStripAdjacency value.
 */
template <typename Enum> friend bool operator==(Enum value, TriangleStripAdjacency);

/// Non-equality comparison with any @p Enum type having the TriangleStripAdjacency value.
/** Instances of the @c smart_enums::TriangleStripAdjacency type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c TriangleStripAdjacency value.
 */
template <typename Enum> friend bool operator!=(Enum value, TriangleStripAdjacency);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Triangular value.
/**
 *  @see @ref oglplus::PathNVCapStyle "PathNVCapStyle"
 *
 *  @glsymbols
 *  @gldefref{TRIANGULAR_NV}
 *
 *  @ingroup smart_enums
 */
struct Triangular {

/// Conversion to any @p Enum type having the Triangular value.
/** Instances of the @ref oglplus::smart_enums::Triangular "Triangular"
 *  type are convertible to instances of any enumeration type having
 *  the @c Triangular value.
 */
template <typename Enum, Enum = Enum::Triangular> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Triangular value.
/** Instances of the @c smart_enums::Triangular type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Triangular value.
 */
template <typename Enum> friend bool operator==(Enum value, Triangular);

/// Non-equality comparison with any @p Enum type having the Triangular value.
/** Instances of the @c smart_enums::Triangular type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Triangular value.
 */
template <typename Enum> friend bool operator!=(Enum value, Triangular);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Undefined value.
/**
 *  @see @ref oglplus::FramebufferStatus "FramebufferStatus"
 *
 *  @glsymbols
 *  @gldefref{FRAMEBUFFER_UNDEFINED}
 *
 *  @ingroup smart_enums
 */
struct Undefined {

/// Conversion to any @p Enum type having the Undefined value.
/** Instances of the @ref oglplus::smart_enums::Undefined "Undefined"
 *  type are convertible to instances of any enumeration type having
 *  the @c Undefined value.
 */
template <typename Enum, Enum = Enum::Undefined> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Undefined value.
/** Instances of the @c smart_enums::Undefined type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Undefined value.
 */
template <typename Enum> friend bool operator==(Enum value, Undefined);

/// Non-equality comparison with any @p Enum type having the Undefined value.
/** Instances of the @c smart_enums::Undefined type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Undefined value.
 */
template <typename Enum> friend bool operator!=(Enum value, Undefined);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UndefinedBehavior value.
/**
 *  @see @ref oglplus::DebugOutputARBType "DebugOutputARBType"
 *  @see @ref oglplus::DebugOutputType "DebugOutputType"
 *  @see @ref oglplus::DebugType "DebugType"
 *
 *  @glsymbols
 *  @gldefref{DEBUG_TYPE_UNDEFINED_BEHAVIOR}
 *  @gldefref{DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB}
 *
 *  @ingroup smart_enums
 */
struct UndefinedBehavior {

/// Conversion to any @p Enum type having the UndefinedBehavior value.
/** Instances of the @ref oglplus::smart_enums::UndefinedBehavior "UndefinedBehavior"
 *  type are convertible to instances of any enumeration type having
 *  the @c UndefinedBehavior value.
 */
template <typename Enum, Enum = Enum::UndefinedBehavior> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UndefinedBehavior value.
/** Instances of the @c smart_enums::UndefinedBehavior type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UndefinedBehavior value.
 */
template <typename Enum> friend bool operator==(Enum value, UndefinedBehavior);

/// Non-equality comparison with any @p Enum type having the UndefinedBehavior value.
/** Instances of the @c smart_enums::UndefinedBehavior type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UndefinedBehavior value.
 */
template <typename Enum> friend bool operator!=(Enum value, UndefinedBehavior);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Uniform value.
/**
 *  @see @ref oglplus::BufferIndexedTarget "BufferIndexedTarget"
 *  @see @ref oglplus::BufferTarget "BufferTarget"
 *  @see @ref oglplus::MemoryBarrierBit "MemoryBarrierBit"
 *  @see @ref oglplus::ProgramInterface "ProgramInterface"
 *
 *  @glsymbols
 *  @gldefref{UNIFORM}
 *  @gldefref{UNIFORM_BARRIER_BIT}
 *  @gldefref{UNIFORM_BUFFER}
 *
 *  @ingroup smart_enums
 */
struct Uniform {

/// Conversion to any @p Enum type having the Uniform value.
/** Instances of the @ref oglplus::smart_enums::Uniform "Uniform"
 *  type are convertible to instances of any enumeration type having
 *  the @c Uniform value.
 */
template <typename Enum, Enum = Enum::Uniform> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Uniform value.
/** Instances of the @c smart_enums::Uniform type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Uniform value.
 */
template <typename Enum> friend bool operator==(Enum value, Uniform);

/// Non-equality comparison with any @p Enum type having the Uniform value.
/** Instances of the @c smart_enums::Uniform type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Uniform value.
 */
template <typename Enum> friend bool operator!=(Enum value, Uniform);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UniformBlock value.
/**
 *  @see @ref oglplus::ProgramInterface "ProgramInterface"
 *
 *  @glsymbols
 *  @gldefref{UNIFORM_BLOCK}
 *
 *  @ingroup smart_enums
 */
struct UniformBlock {

/// Conversion to any @p Enum type having the UniformBlock value.
/** Instances of the @ref oglplus::smart_enums::UniformBlock "UniformBlock"
 *  type are convertible to instances of any enumeration type having
 *  the @c UniformBlock value.
 */
template <typename Enum, Enum = Enum::UniformBlock> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UniformBlock value.
/** Instances of the @c smart_enums::UniformBlock type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UniformBlock value.
 */
template <typename Enum> friend bool operator==(Enum value, UniformBlock);

/// Non-equality comparison with any @p Enum type having the UniformBlock value.
/** Instances of the @c smart_enums::UniformBlock type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UniformBlock value.
 */
template <typename Enum> friend bool operator!=(Enum value, UniformBlock);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnknownContextReset value.
/**
 *  @see @ref oglplus::GraphicsResetStatus "GraphicsResetStatus"
 *
 *  @glsymbols
 *  @gldefref{UNKNOWN_CONTEXT_RESET_ARB}
 *
 *  @ingroup smart_enums
 */
struct UnknownContextReset {

/// Conversion to any @p Enum type having the UnknownContextReset value.
/** Instances of the @ref oglplus::smart_enums::UnknownContextReset "UnknownContextReset"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnknownContextReset value.
 */
template <typename Enum, Enum = Enum::UnknownContextReset> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnknownContextReset value.
/** Instances of the @c smart_enums::UnknownContextReset type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnknownContextReset value.
 */
template <typename Enum> friend bool operator==(Enum value, UnknownContextReset);

/// Non-equality comparison with any @p Enum type having the UnknownContextReset value.
/** Instances of the @c smart_enums::UnknownContextReset type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnknownContextReset value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnknownContextReset);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnpackAlignment value.
/**
 *  @see @ref oglplus::PixelStorageMode "PixelStorageMode"
 *
 *  @glsymbols
 *  @gldefref{UNPACK_ALIGNMENT}
 *
 *  @ingroup smart_enums
 */
struct UnpackAlignment {

/// Conversion to any @p Enum type having the UnpackAlignment value.
/** Instances of the @ref oglplus::smart_enums::UnpackAlignment "UnpackAlignment"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnpackAlignment value.
 */
template <typename Enum, Enum = Enum::UnpackAlignment> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnpackAlignment value.
/** Instances of the @c smart_enums::UnpackAlignment type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnpackAlignment value.
 */
template <typename Enum> friend bool operator==(Enum value, UnpackAlignment);

/// Non-equality comparison with any @p Enum type having the UnpackAlignment value.
/** Instances of the @c smart_enums::UnpackAlignment type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnpackAlignment value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnpackAlignment);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnpackCompressedBlockDepth value.
/**
 *  @see @ref oglplus::PixelStorageMode "PixelStorageMode"
 *
 *  @glsymbols
 *  @gldefref{UNPACK_COMPRESSED_BLOCK_DEPTH}
 *
 *  @ingroup smart_enums
 */
struct UnpackCompressedBlockDepth {

/// Conversion to any @p Enum type having the UnpackCompressedBlockDepth value.
/** Instances of the @ref oglplus::smart_enums::UnpackCompressedBlockDepth "UnpackCompressedBlockDepth"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnpackCompressedBlockDepth value.
 */
template <typename Enum, Enum = Enum::UnpackCompressedBlockDepth> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnpackCompressedBlockDepth value.
/** Instances of the @c smart_enums::UnpackCompressedBlockDepth type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnpackCompressedBlockDepth value.
 */
template <typename Enum> friend bool operator==(Enum value, UnpackCompressedBlockDepth);

/// Non-equality comparison with any @p Enum type having the UnpackCompressedBlockDepth value.
/** Instances of the @c smart_enums::UnpackCompressedBlockDepth type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnpackCompressedBlockDepth value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnpackCompressedBlockDepth);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnpackCompressedBlockHeight value.
/**
 *  @see @ref oglplus::PixelStorageMode "PixelStorageMode"
 *
 *  @glsymbols
 *  @gldefref{UNPACK_COMPRESSED_BLOCK_HEIGHT}
 *
 *  @ingroup smart_enums
 */
struct UnpackCompressedBlockHeight {

/// Conversion to any @p Enum type having the UnpackCompressedBlockHeight value.
/** Instances of the @ref oglplus::smart_enums::UnpackCompressedBlockHeight "UnpackCompressedBlockHeight"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnpackCompressedBlockHeight value.
 */
template <typename Enum, Enum = Enum::UnpackCompressedBlockHeight> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnpackCompressedBlockHeight value.
/** Instances of the @c smart_enums::UnpackCompressedBlockHeight type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnpackCompressedBlockHeight value.
 */
template <typename Enum> friend bool operator==(Enum value, UnpackCompressedBlockHeight);

/// Non-equality comparison with any @p Enum type having the UnpackCompressedBlockHeight value.
/** Instances of the @c smart_enums::UnpackCompressedBlockHeight type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnpackCompressedBlockHeight value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnpackCompressedBlockHeight);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnpackCompressedBlockSize value.
/**
 *  @see @ref oglplus::PixelStorageMode "PixelStorageMode"
 *
 *  @glsymbols
 *  @gldefref{UNPACK_COMPRESSED_BLOCK_SIZE}
 *
 *  @ingroup smart_enums
 */
struct UnpackCompressedBlockSize {

/// Conversion to any @p Enum type having the UnpackCompressedBlockSize value.
/** Instances of the @ref oglplus::smart_enums::UnpackCompressedBlockSize "UnpackCompressedBlockSize"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnpackCompressedBlockSize value.
 */
template <typename Enum, Enum = Enum::UnpackCompressedBlockSize> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnpackCompressedBlockSize value.
/** Instances of the @c smart_enums::UnpackCompressedBlockSize type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnpackCompressedBlockSize value.
 */
template <typename Enum> friend bool operator==(Enum value, UnpackCompressedBlockSize);

/// Non-equality comparison with any @p Enum type having the UnpackCompressedBlockSize value.
/** Instances of the @c smart_enums::UnpackCompressedBlockSize type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnpackCompressedBlockSize value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnpackCompressedBlockSize);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnpackCompressedBlockWidth value.
/**
 *  @see @ref oglplus::PixelStorageMode "PixelStorageMode"
 *
 *  @glsymbols
 *  @gldefref{UNPACK_COMPRESSED_BLOCK_WIDTH}
 *
 *  @ingroup smart_enums
 */
struct UnpackCompressedBlockWidth {

/// Conversion to any @p Enum type having the UnpackCompressedBlockWidth value.
/** Instances of the @ref oglplus::smart_enums::UnpackCompressedBlockWidth "UnpackCompressedBlockWidth"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnpackCompressedBlockWidth value.
 */
template <typename Enum, Enum = Enum::UnpackCompressedBlockWidth> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnpackCompressedBlockWidth value.
/** Instances of the @c smart_enums::UnpackCompressedBlockWidth type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnpackCompressedBlockWidth value.
 */
template <typename Enum> friend bool operator==(Enum value, UnpackCompressedBlockWidth);

/// Non-equality comparison with any @p Enum type having the UnpackCompressedBlockWidth value.
/** Instances of the @c smart_enums::UnpackCompressedBlockWidth type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnpackCompressedBlockWidth value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnpackCompressedBlockWidth);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnpackImageHeight value.
/**
 *  @see @ref oglplus::PixelStorageMode "PixelStorageMode"
 *
 *  @glsymbols
 *  @gldefref{UNPACK_IMAGE_HEIGHT}
 *
 *  @ingroup smart_enums
 */
struct UnpackImageHeight {

/// Conversion to any @p Enum type having the UnpackImageHeight value.
/** Instances of the @ref oglplus::smart_enums::UnpackImageHeight "UnpackImageHeight"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnpackImageHeight value.
 */
template <typename Enum, Enum = Enum::UnpackImageHeight> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnpackImageHeight value.
/** Instances of the @c smart_enums::UnpackImageHeight type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnpackImageHeight value.
 */
template <typename Enum> friend bool operator==(Enum value, UnpackImageHeight);

/// Non-equality comparison with any @p Enum type having the UnpackImageHeight value.
/** Instances of the @c smart_enums::UnpackImageHeight type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnpackImageHeight value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnpackImageHeight);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnpackLsbFirst value.
/**
 *  @see @ref oglplus::PixelStorageMode "PixelStorageMode"
 *
 *  @glsymbols
 *  @gldefref{UNPACK_LSB_FIRST}
 *
 *  @ingroup smart_enums
 */
struct UnpackLsbFirst {

/// Conversion to any @p Enum type having the UnpackLsbFirst value.
/** Instances of the @ref oglplus::smart_enums::UnpackLsbFirst "UnpackLsbFirst"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnpackLsbFirst value.
 */
template <typename Enum, Enum = Enum::UnpackLsbFirst> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnpackLsbFirst value.
/** Instances of the @c smart_enums::UnpackLsbFirst type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnpackLsbFirst value.
 */
template <typename Enum> friend bool operator==(Enum value, UnpackLsbFirst);

/// Non-equality comparison with any @p Enum type having the UnpackLsbFirst value.
/** Instances of the @c smart_enums::UnpackLsbFirst type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnpackLsbFirst value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnpackLsbFirst);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnpackRowLength value.
/**
 *  @see @ref oglplus::PixelStorageMode "PixelStorageMode"
 *
 *  @glsymbols
 *  @gldefref{UNPACK_ROW_LENGTH}
 *
 *  @ingroup smart_enums
 */
struct UnpackRowLength {

/// Conversion to any @p Enum type having the UnpackRowLength value.
/** Instances of the @ref oglplus::smart_enums::UnpackRowLength "UnpackRowLength"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnpackRowLength value.
 */
template <typename Enum, Enum = Enum::UnpackRowLength> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnpackRowLength value.
/** Instances of the @c smart_enums::UnpackRowLength type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnpackRowLength value.
 */
template <typename Enum> friend bool operator==(Enum value, UnpackRowLength);

/// Non-equality comparison with any @p Enum type having the UnpackRowLength value.
/** Instances of the @c smart_enums::UnpackRowLength type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnpackRowLength value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnpackRowLength);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnpackSkipImages value.
/**
 *  @see @ref oglplus::PixelStorageMode "PixelStorageMode"
 *
 *  @glsymbols
 *  @gldefref{UNPACK_SKIP_IMAGES}
 *
 *  @ingroup smart_enums
 */
struct UnpackSkipImages {

/// Conversion to any @p Enum type having the UnpackSkipImages value.
/** Instances of the @ref oglplus::smart_enums::UnpackSkipImages "UnpackSkipImages"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnpackSkipImages value.
 */
template <typename Enum, Enum = Enum::UnpackSkipImages> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnpackSkipImages value.
/** Instances of the @c smart_enums::UnpackSkipImages type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnpackSkipImages value.
 */
template <typename Enum> friend bool operator==(Enum value, UnpackSkipImages);

/// Non-equality comparison with any @p Enum type having the UnpackSkipImages value.
/** Instances of the @c smart_enums::UnpackSkipImages type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnpackSkipImages value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnpackSkipImages);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnpackSkipPixels value.
/**
 *  @see @ref oglplus::PixelStorageMode "PixelStorageMode"
 *
 *  @glsymbols
 *  @gldefref{UNPACK_SKIP_PIXELS}
 *
 *  @ingroup smart_enums
 */
struct UnpackSkipPixels {

/// Conversion to any @p Enum type having the UnpackSkipPixels value.
/** Instances of the @ref oglplus::smart_enums::UnpackSkipPixels "UnpackSkipPixels"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnpackSkipPixels value.
 */
template <typename Enum, Enum = Enum::UnpackSkipPixels> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnpackSkipPixels value.
/** Instances of the @c smart_enums::UnpackSkipPixels type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnpackSkipPixels value.
 */
template <typename Enum> friend bool operator==(Enum value, UnpackSkipPixels);

/// Non-equality comparison with any @p Enum type having the UnpackSkipPixels value.
/** Instances of the @c smart_enums::UnpackSkipPixels type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnpackSkipPixels value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnpackSkipPixels);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnpackSkipRows value.
/**
 *  @see @ref oglplus::PixelStorageMode "PixelStorageMode"
 *
 *  @glsymbols
 *  @gldefref{UNPACK_SKIP_ROWS}
 *
 *  @ingroup smart_enums
 */
struct UnpackSkipRows {

/// Conversion to any @p Enum type having the UnpackSkipRows value.
/** Instances of the @ref oglplus::smart_enums::UnpackSkipRows "UnpackSkipRows"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnpackSkipRows value.
 */
template <typename Enum, Enum = Enum::UnpackSkipRows> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnpackSkipRows value.
/** Instances of the @c smart_enums::UnpackSkipRows type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnpackSkipRows value.
 */
template <typename Enum> friend bool operator==(Enum value, UnpackSkipRows);

/// Non-equality comparison with any @p Enum type having the UnpackSkipRows value.
/** Instances of the @c smart_enums::UnpackSkipRows type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnpackSkipRows value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnpackSkipRows);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnpackSwapBytes value.
/**
 *  @see @ref oglplus::PixelStorageMode "PixelStorageMode"
 *
 *  @glsymbols
 *  @gldefref{UNPACK_SWAP_BYTES}
 *
 *  @ingroup smart_enums
 */
struct UnpackSwapBytes {

/// Conversion to any @p Enum type having the UnpackSwapBytes value.
/** Instances of the @ref oglplus::smart_enums::UnpackSwapBytes "UnpackSwapBytes"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnpackSwapBytes value.
 */
template <typename Enum, Enum = Enum::UnpackSwapBytes> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnpackSwapBytes value.
/** Instances of the @c smart_enums::UnpackSwapBytes type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnpackSwapBytes value.
 */
template <typename Enum> friend bool operator==(Enum value, UnpackSwapBytes);

/// Non-equality comparison with any @p Enum type having the UnpackSwapBytes value.
/** Instances of the @c smart_enums::UnpackSwapBytes type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnpackSwapBytes value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnpackSwapBytes);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Unsignaled value.
/**
 *  @see @ref oglplus::SyncStatus "SyncStatus"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNALED}
 *
 *  @ingroup smart_enums
 */
struct Unsignaled {

/// Conversion to any @p Enum type having the Unsignaled value.
/** Instances of the @ref oglplus::smart_enums::Unsignaled "Unsignaled"
 *  type are convertible to instances of any enumeration type having
 *  the @c Unsignaled value.
 */
template <typename Enum, Enum = Enum::Unsignaled> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Unsignaled value.
/** Instances of the @c smart_enums::Unsignaled type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Unsignaled value.
 */
template <typename Enum> friend bool operator==(Enum value, Unsignaled);

/// Non-equality comparison with any @p Enum type having the Unsignaled value.
/** Instances of the @c smart_enums::Unsignaled type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Unsignaled value.
 */
template <typename Enum> friend bool operator!=(Enum value, Unsignaled);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedByte value.
/**
 *  @see @ref oglplus::DataType "DataType"
 *  @see @ref oglplus::PixelDataType "PixelDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_BYTE}
 *
 *  @ingroup smart_enums
 */
struct UnsignedByte {

/// Conversion to any @p Enum type having the UnsignedByte value.
/** Instances of the @ref oglplus::smart_enums::UnsignedByte "UnsignedByte"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedByte value.
 */
template <typename Enum, Enum = Enum::UnsignedByte> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedByte value.
/** Instances of the @c smart_enums::UnsignedByte type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedByte value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedByte);

/// Non-equality comparison with any @p Enum type having the UnsignedByte value.
/** Instances of the @c smart_enums::UnsignedByte type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedByte value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedByte);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedByte_2_3_3_Rev value.
/**
 *  @see @ref oglplus::PixelDataType "PixelDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_BYTE_2_3_3_REV}
 *
 *  @ingroup smart_enums
 */
struct UnsignedByte_2_3_3_Rev {

/// Conversion to any @p Enum type having the UnsignedByte_2_3_3_Rev value.
/** Instances of the @ref oglplus::smart_enums::UnsignedByte_2_3_3_Rev "UnsignedByte_2_3_3_Rev"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedByte_2_3_3_Rev value.
 */
template <typename Enum, Enum = Enum::UnsignedByte_2_3_3_Rev> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedByte_2_3_3_Rev value.
/** Instances of the @c smart_enums::UnsignedByte_2_3_3_Rev type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedByte_2_3_3_Rev value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedByte_2_3_3_Rev);

/// Non-equality comparison with any @p Enum type having the UnsignedByte_2_3_3_Rev value.
/** Instances of the @c smart_enums::UnsignedByte_2_3_3_Rev type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedByte_2_3_3_Rev value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedByte_2_3_3_Rev);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedByte_3_3_2 value.
/**
 *  @see @ref oglplus::PixelDataType "PixelDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_BYTE_3_3_2}
 *
 *  @ingroup smart_enums
 */
struct UnsignedByte_3_3_2 {

/// Conversion to any @p Enum type having the UnsignedByte_3_3_2 value.
/** Instances of the @ref oglplus::smart_enums::UnsignedByte_3_3_2 "UnsignedByte_3_3_2"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedByte_3_3_2 value.
 */
template <typename Enum, Enum = Enum::UnsignedByte_3_3_2> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedByte_3_3_2 value.
/** Instances of the @c smart_enums::UnsignedByte_3_3_2 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedByte_3_3_2 value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedByte_3_3_2);

/// Non-equality comparison with any @p Enum type having the UnsignedByte_3_3_2 value.
/** Instances of the @c smart_enums::UnsignedByte_3_3_2 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedByte_3_3_2 value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedByte_3_3_2);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedInt value.
/**
 *  @see @ref oglplus::DataType "DataType"
 *  @see @ref oglplus::PerfMonitorAMDType "PerfMonitorAMDType"
 *  @see @ref oglplus::PixelDataType "PixelDataType"
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_INT}
 *
 *  @ingroup smart_enums
 */
struct UnsignedInt {

/// Conversion to any @p Enum type having the UnsignedInt value.
/** Instances of the @ref oglplus::smart_enums::UnsignedInt "UnsignedInt"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedInt value.
 */
template <typename Enum, Enum = Enum::UnsignedInt> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedInt value.
/** Instances of the @c smart_enums::UnsignedInt type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedInt value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedInt);

/// Non-equality comparison with any @p Enum type having the UnsignedInt value.
/** Instances of the @c smart_enums::UnsignedInt type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedInt value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedInt);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedInt_10_10_10_2 value.
/**
 *  @see @ref oglplus::PixelDataType "PixelDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_INT_10_10_10_2}
 *
 *  @ingroup smart_enums
 */
struct UnsignedInt_10_10_10_2 {

/// Conversion to any @p Enum type having the UnsignedInt_10_10_10_2 value.
/** Instances of the @ref oglplus::smart_enums::UnsignedInt_10_10_10_2 "UnsignedInt_10_10_10_2"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedInt_10_10_10_2 value.
 */
template <typename Enum, Enum = Enum::UnsignedInt_10_10_10_2> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedInt_10_10_10_2 value.
/** Instances of the @c smart_enums::UnsignedInt_10_10_10_2 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedInt_10_10_10_2 value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedInt_10_10_10_2);

/// Non-equality comparison with any @p Enum type having the UnsignedInt_10_10_10_2 value.
/** Instances of the @c smart_enums::UnsignedInt_10_10_10_2 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedInt_10_10_10_2 value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedInt_10_10_10_2);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedInt_10f_11f_11f_Rev value.
/**
 *  @see @ref oglplus::PixelDataType "PixelDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_INT_10F_11F_11F_REV}
 *
 *  @ingroup smart_enums
 */
struct UnsignedInt_10f_11f_11f_Rev {

/// Conversion to any @p Enum type having the UnsignedInt_10f_11f_11f_Rev value.
/** Instances of the @ref oglplus::smart_enums::UnsignedInt_10f_11f_11f_Rev "UnsignedInt_10f_11f_11f_Rev"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedInt_10f_11f_11f_Rev value.
 */
template <typename Enum, Enum = Enum::UnsignedInt_10f_11f_11f_Rev> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedInt_10f_11f_11f_Rev value.
/** Instances of the @c smart_enums::UnsignedInt_10f_11f_11f_Rev type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedInt_10f_11f_11f_Rev value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedInt_10f_11f_11f_Rev);

/// Non-equality comparison with any @p Enum type having the UnsignedInt_10f_11f_11f_Rev value.
/** Instances of the @c smart_enums::UnsignedInt_10f_11f_11f_Rev type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedInt_10f_11f_11f_Rev value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedInt_10f_11f_11f_Rev);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedInt_2_10_10_10_Rev value.
/**
 *  @see @ref oglplus::PixelDataType "PixelDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_INT_2_10_10_10_REV}
 *
 *  @ingroup smart_enums
 */
struct UnsignedInt_2_10_10_10_Rev {

/// Conversion to any @p Enum type having the UnsignedInt_2_10_10_10_Rev value.
/** Instances of the @ref oglplus::smart_enums::UnsignedInt_2_10_10_10_Rev "UnsignedInt_2_10_10_10_Rev"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedInt_2_10_10_10_Rev value.
 */
template <typename Enum, Enum = Enum::UnsignedInt_2_10_10_10_Rev> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedInt_2_10_10_10_Rev value.
/** Instances of the @c smart_enums::UnsignedInt_2_10_10_10_Rev type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedInt_2_10_10_10_Rev value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedInt_2_10_10_10_Rev);

/// Non-equality comparison with any @p Enum type having the UnsignedInt_2_10_10_10_Rev value.
/** Instances of the @c smart_enums::UnsignedInt_2_10_10_10_Rev type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedInt_2_10_10_10_Rev value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedInt_2_10_10_10_Rev);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedInt_24_8 value.
/**
 *  @see @ref oglplus::PixelDataType "PixelDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_INT_24_8}
 *
 *  @ingroup smart_enums
 */
struct UnsignedInt_24_8 {

/// Conversion to any @p Enum type having the UnsignedInt_24_8 value.
/** Instances of the @ref oglplus::smart_enums::UnsignedInt_24_8 "UnsignedInt_24_8"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedInt_24_8 value.
 */
template <typename Enum, Enum = Enum::UnsignedInt_24_8> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedInt_24_8 value.
/** Instances of the @c smart_enums::UnsignedInt_24_8 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedInt_24_8 value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedInt_24_8);

/// Non-equality comparison with any @p Enum type having the UnsignedInt_24_8 value.
/** Instances of the @c smart_enums::UnsignedInt_24_8 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedInt_24_8 value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedInt_24_8);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedInt_5_9_9_9_Rev value.
/**
 *  @see @ref oglplus::PixelDataType "PixelDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_INT_5_9_9_9_REV}
 *
 *  @ingroup smart_enums
 */
struct UnsignedInt_5_9_9_9_Rev {

/// Conversion to any @p Enum type having the UnsignedInt_5_9_9_9_Rev value.
/** Instances of the @ref oglplus::smart_enums::UnsignedInt_5_9_9_9_Rev "UnsignedInt_5_9_9_9_Rev"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedInt_5_9_9_9_Rev value.
 */
template <typename Enum, Enum = Enum::UnsignedInt_5_9_9_9_Rev> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedInt_5_9_9_9_Rev value.
/** Instances of the @c smart_enums::UnsignedInt_5_9_9_9_Rev type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedInt_5_9_9_9_Rev value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedInt_5_9_9_9_Rev);

/// Non-equality comparison with any @p Enum type having the UnsignedInt_5_9_9_9_Rev value.
/** Instances of the @c smart_enums::UnsignedInt_5_9_9_9_Rev type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedInt_5_9_9_9_Rev value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedInt_5_9_9_9_Rev);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedInt64 value.
/**
 *  @see @ref oglplus::PerfMonitorAMDType "PerfMonitorAMDType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_INT64_AMD}
 *
 *  @ingroup smart_enums
 */
struct UnsignedInt64 {

/// Conversion to any @p Enum type having the UnsignedInt64 value.
/** Instances of the @ref oglplus::smart_enums::UnsignedInt64 "UnsignedInt64"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedInt64 value.
 */
template <typename Enum, Enum = Enum::UnsignedInt64> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedInt64 value.
/** Instances of the @c smart_enums::UnsignedInt64 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedInt64 value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedInt64);

/// Non-equality comparison with any @p Enum type having the UnsignedInt64 value.
/** Instances of the @c smart_enums::UnsignedInt64 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedInt64 value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedInt64);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedInt_8_8_8_8 value.
/**
 *  @see @ref oglplus::PixelDataType "PixelDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_INT_8_8_8_8}
 *
 *  @ingroup smart_enums
 */
struct UnsignedInt_8_8_8_8 {

/// Conversion to any @p Enum type having the UnsignedInt_8_8_8_8 value.
/** Instances of the @ref oglplus::smart_enums::UnsignedInt_8_8_8_8 "UnsignedInt_8_8_8_8"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedInt_8_8_8_8 value.
 */
template <typename Enum, Enum = Enum::UnsignedInt_8_8_8_8> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedInt_8_8_8_8 value.
/** Instances of the @c smart_enums::UnsignedInt_8_8_8_8 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedInt_8_8_8_8 value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedInt_8_8_8_8);

/// Non-equality comparison with any @p Enum type having the UnsignedInt_8_8_8_8 value.
/** Instances of the @c smart_enums::UnsignedInt_8_8_8_8 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedInt_8_8_8_8 value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedInt_8_8_8_8);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedInt_8_8_8_8_Rev value.
/**
 *  @see @ref oglplus::PixelDataType "PixelDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_INT_8_8_8_8_REV}
 *
 *  @ingroup smart_enums
 */
struct UnsignedInt_8_8_8_8_Rev {

/// Conversion to any @p Enum type having the UnsignedInt_8_8_8_8_Rev value.
/** Instances of the @ref oglplus::smart_enums::UnsignedInt_8_8_8_8_Rev "UnsignedInt_8_8_8_8_Rev"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedInt_8_8_8_8_Rev value.
 */
template <typename Enum, Enum = Enum::UnsignedInt_8_8_8_8_Rev> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedInt_8_8_8_8_Rev value.
/** Instances of the @c smart_enums::UnsignedInt_8_8_8_8_Rev type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedInt_8_8_8_8_Rev value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedInt_8_8_8_8_Rev);

/// Non-equality comparison with any @p Enum type having the UnsignedInt_8_8_8_8_Rev value.
/** Instances of the @c smart_enums::UnsignedInt_8_8_8_8_Rev type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedInt_8_8_8_8_Rev value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedInt_8_8_8_8_Rev);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedIntAtomicCounter value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_INT_ATOMIC_COUNTER}
 *
 *  @ingroup smart_enums
 */
struct UnsignedIntAtomicCounter {

/// Conversion to any @p Enum type having the UnsignedIntAtomicCounter value.
/** Instances of the @ref oglplus::smart_enums::UnsignedIntAtomicCounter "UnsignedIntAtomicCounter"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedIntAtomicCounter value.
 */
template <typename Enum, Enum = Enum::UnsignedIntAtomicCounter> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedIntAtomicCounter value.
/** Instances of the @c smart_enums::UnsignedIntAtomicCounter type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedIntAtomicCounter value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedIntAtomicCounter);

/// Non-equality comparison with any @p Enum type having the UnsignedIntAtomicCounter value.
/** Instances of the @c smart_enums::UnsignedIntAtomicCounter type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedIntAtomicCounter value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedIntAtomicCounter);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedIntImage1D value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_INT_IMAGE_1D}
 *
 *  @ingroup smart_enums
 */
struct UnsignedIntImage1D {

/// Conversion to any @p Enum type having the UnsignedIntImage1D value.
/** Instances of the @ref oglplus::smart_enums::UnsignedIntImage1D "UnsignedIntImage1D"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedIntImage1D value.
 */
template <typename Enum, Enum = Enum::UnsignedIntImage1D> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedIntImage1D value.
/** Instances of the @c smart_enums::UnsignedIntImage1D type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedIntImage1D value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedIntImage1D);

/// Non-equality comparison with any @p Enum type having the UnsignedIntImage1D value.
/** Instances of the @c smart_enums::UnsignedIntImage1D type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedIntImage1D value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedIntImage1D);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedIntImage1DArray value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_INT_IMAGE_1D_ARRAY}
 *
 *  @ingroup smart_enums
 */
struct UnsignedIntImage1DArray {

/// Conversion to any @p Enum type having the UnsignedIntImage1DArray value.
/** Instances of the @ref oglplus::smart_enums::UnsignedIntImage1DArray "UnsignedIntImage1DArray"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedIntImage1DArray value.
 */
template <typename Enum, Enum = Enum::UnsignedIntImage1DArray> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedIntImage1DArray value.
/** Instances of the @c smart_enums::UnsignedIntImage1DArray type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedIntImage1DArray value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedIntImage1DArray);

/// Non-equality comparison with any @p Enum type having the UnsignedIntImage1DArray value.
/** Instances of the @c smart_enums::UnsignedIntImage1DArray type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedIntImage1DArray value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedIntImage1DArray);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedIntImage2D value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_INT_IMAGE_2D}
 *
 *  @ingroup smart_enums
 */
struct UnsignedIntImage2D {

/// Conversion to any @p Enum type having the UnsignedIntImage2D value.
/** Instances of the @ref oglplus::smart_enums::UnsignedIntImage2D "UnsignedIntImage2D"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedIntImage2D value.
 */
template <typename Enum, Enum = Enum::UnsignedIntImage2D> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedIntImage2D value.
/** Instances of the @c smart_enums::UnsignedIntImage2D type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedIntImage2D value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedIntImage2D);

/// Non-equality comparison with any @p Enum type having the UnsignedIntImage2D value.
/** Instances of the @c smart_enums::UnsignedIntImage2D type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedIntImage2D value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedIntImage2D);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedIntImage2DArray value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_INT_IMAGE_2D_ARRAY}
 *
 *  @ingroup smart_enums
 */
struct UnsignedIntImage2DArray {

/// Conversion to any @p Enum type having the UnsignedIntImage2DArray value.
/** Instances of the @ref oglplus::smart_enums::UnsignedIntImage2DArray "UnsignedIntImage2DArray"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedIntImage2DArray value.
 */
template <typename Enum, Enum = Enum::UnsignedIntImage2DArray> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedIntImage2DArray value.
/** Instances of the @c smart_enums::UnsignedIntImage2DArray type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedIntImage2DArray value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedIntImage2DArray);

/// Non-equality comparison with any @p Enum type having the UnsignedIntImage2DArray value.
/** Instances of the @c smart_enums::UnsignedIntImage2DArray type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedIntImage2DArray value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedIntImage2DArray);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedIntImage2DMultisample value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_INT_IMAGE_2D_MULTISAMPLE}
 *
 *  @ingroup smart_enums
 */
struct UnsignedIntImage2DMultisample {

/// Conversion to any @p Enum type having the UnsignedIntImage2DMultisample value.
/** Instances of the @ref oglplus::smart_enums::UnsignedIntImage2DMultisample "UnsignedIntImage2DMultisample"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedIntImage2DMultisample value.
 */
template <typename Enum, Enum = Enum::UnsignedIntImage2DMultisample> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedIntImage2DMultisample value.
/** Instances of the @c smart_enums::UnsignedIntImage2DMultisample type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedIntImage2DMultisample value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedIntImage2DMultisample);

/// Non-equality comparison with any @p Enum type having the UnsignedIntImage2DMultisample value.
/** Instances of the @c smart_enums::UnsignedIntImage2DMultisample type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedIntImage2DMultisample value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedIntImage2DMultisample);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedIntImage2DMultisampleArray value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY}
 *
 *  @ingroup smart_enums
 */
struct UnsignedIntImage2DMultisampleArray {

/// Conversion to any @p Enum type having the UnsignedIntImage2DMultisampleArray value.
/** Instances of the @ref oglplus::smart_enums::UnsignedIntImage2DMultisampleArray "UnsignedIntImage2DMultisampleArray"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedIntImage2DMultisampleArray value.
 */
template <typename Enum, Enum = Enum::UnsignedIntImage2DMultisampleArray> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedIntImage2DMultisampleArray value.
/** Instances of the @c smart_enums::UnsignedIntImage2DMultisampleArray type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedIntImage2DMultisampleArray value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedIntImage2DMultisampleArray);

/// Non-equality comparison with any @p Enum type having the UnsignedIntImage2DMultisampleArray value.
/** Instances of the @c smart_enums::UnsignedIntImage2DMultisampleArray type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedIntImage2DMultisampleArray value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedIntImage2DMultisampleArray);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedIntImage2DRect value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_INT_IMAGE_2D_RECT}
 *
 *  @ingroup smart_enums
 */
struct UnsignedIntImage2DRect {

/// Conversion to any @p Enum type having the UnsignedIntImage2DRect value.
/** Instances of the @ref oglplus::smart_enums::UnsignedIntImage2DRect "UnsignedIntImage2DRect"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedIntImage2DRect value.
 */
template <typename Enum, Enum = Enum::UnsignedIntImage2DRect> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedIntImage2DRect value.
/** Instances of the @c smart_enums::UnsignedIntImage2DRect type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedIntImage2DRect value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedIntImage2DRect);

/// Non-equality comparison with any @p Enum type having the UnsignedIntImage2DRect value.
/** Instances of the @c smart_enums::UnsignedIntImage2DRect type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedIntImage2DRect value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedIntImage2DRect);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedIntImage3D value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_INT_IMAGE_3D}
 *
 *  @ingroup smart_enums
 */
struct UnsignedIntImage3D {

/// Conversion to any @p Enum type having the UnsignedIntImage3D value.
/** Instances of the @ref oglplus::smart_enums::UnsignedIntImage3D "UnsignedIntImage3D"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedIntImage3D value.
 */
template <typename Enum, Enum = Enum::UnsignedIntImage3D> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedIntImage3D value.
/** Instances of the @c smart_enums::UnsignedIntImage3D type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedIntImage3D value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedIntImage3D);

/// Non-equality comparison with any @p Enum type having the UnsignedIntImage3D value.
/** Instances of the @c smart_enums::UnsignedIntImage3D type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedIntImage3D value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedIntImage3D);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedIntImageBuffer value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_INT_IMAGE_BUFFER}
 *
 *  @ingroup smart_enums
 */
struct UnsignedIntImageBuffer {

/// Conversion to any @p Enum type having the UnsignedIntImageBuffer value.
/** Instances of the @ref oglplus::smart_enums::UnsignedIntImageBuffer "UnsignedIntImageBuffer"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedIntImageBuffer value.
 */
template <typename Enum, Enum = Enum::UnsignedIntImageBuffer> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedIntImageBuffer value.
/** Instances of the @c smart_enums::UnsignedIntImageBuffer type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedIntImageBuffer value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedIntImageBuffer);

/// Non-equality comparison with any @p Enum type having the UnsignedIntImageBuffer value.
/** Instances of the @c smart_enums::UnsignedIntImageBuffer type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedIntImageBuffer value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedIntImageBuffer);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedIntImageCube value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_INT_IMAGE_CUBE}
 *
 *  @ingroup smart_enums
 */
struct UnsignedIntImageCube {

/// Conversion to any @p Enum type having the UnsignedIntImageCube value.
/** Instances of the @ref oglplus::smart_enums::UnsignedIntImageCube "UnsignedIntImageCube"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedIntImageCube value.
 */
template <typename Enum, Enum = Enum::UnsignedIntImageCube> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedIntImageCube value.
/** Instances of the @c smart_enums::UnsignedIntImageCube type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedIntImageCube value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedIntImageCube);

/// Non-equality comparison with any @p Enum type having the UnsignedIntImageCube value.
/** Instances of the @c smart_enums::UnsignedIntImageCube type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedIntImageCube value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedIntImageCube);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedIntSampler1D value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_INT_SAMPLER_1D}
 *
 *  @ingroup smart_enums
 */
struct UnsignedIntSampler1D {

/// Conversion to any @p Enum type having the UnsignedIntSampler1D value.
/** Instances of the @ref oglplus::smart_enums::UnsignedIntSampler1D "UnsignedIntSampler1D"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedIntSampler1D value.
 */
template <typename Enum, Enum = Enum::UnsignedIntSampler1D> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedIntSampler1D value.
/** Instances of the @c smart_enums::UnsignedIntSampler1D type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedIntSampler1D value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedIntSampler1D);

/// Non-equality comparison with any @p Enum type having the UnsignedIntSampler1D value.
/** Instances of the @c smart_enums::UnsignedIntSampler1D type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedIntSampler1D value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedIntSampler1D);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedIntSampler1DArray value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_INT_SAMPLER_1D_ARRAY}
 *
 *  @ingroup smart_enums
 */
struct UnsignedIntSampler1DArray {

/// Conversion to any @p Enum type having the UnsignedIntSampler1DArray value.
/** Instances of the @ref oglplus::smart_enums::UnsignedIntSampler1DArray "UnsignedIntSampler1DArray"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedIntSampler1DArray value.
 */
template <typename Enum, Enum = Enum::UnsignedIntSampler1DArray> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedIntSampler1DArray value.
/** Instances of the @c smart_enums::UnsignedIntSampler1DArray type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedIntSampler1DArray value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedIntSampler1DArray);

/// Non-equality comparison with any @p Enum type having the UnsignedIntSampler1DArray value.
/** Instances of the @c smart_enums::UnsignedIntSampler1DArray type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedIntSampler1DArray value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedIntSampler1DArray);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedIntSampler2D value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_INT_SAMPLER_2D}
 *
 *  @ingroup smart_enums
 */
struct UnsignedIntSampler2D {

/// Conversion to any @p Enum type having the UnsignedIntSampler2D value.
/** Instances of the @ref oglplus::smart_enums::UnsignedIntSampler2D "UnsignedIntSampler2D"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedIntSampler2D value.
 */
template <typename Enum, Enum = Enum::UnsignedIntSampler2D> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedIntSampler2D value.
/** Instances of the @c smart_enums::UnsignedIntSampler2D type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedIntSampler2D value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedIntSampler2D);

/// Non-equality comparison with any @p Enum type having the UnsignedIntSampler2D value.
/** Instances of the @c smart_enums::UnsignedIntSampler2D type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedIntSampler2D value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedIntSampler2D);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedIntSampler2DArray value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_INT_SAMPLER_2D_ARRAY}
 *
 *  @ingroup smart_enums
 */
struct UnsignedIntSampler2DArray {

/// Conversion to any @p Enum type having the UnsignedIntSampler2DArray value.
/** Instances of the @ref oglplus::smart_enums::UnsignedIntSampler2DArray "UnsignedIntSampler2DArray"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedIntSampler2DArray value.
 */
template <typename Enum, Enum = Enum::UnsignedIntSampler2DArray> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedIntSampler2DArray value.
/** Instances of the @c smart_enums::UnsignedIntSampler2DArray type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedIntSampler2DArray value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedIntSampler2DArray);

/// Non-equality comparison with any @p Enum type having the UnsignedIntSampler2DArray value.
/** Instances of the @c smart_enums::UnsignedIntSampler2DArray type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedIntSampler2DArray value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedIntSampler2DArray);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedIntSampler2DMultisample value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE}
 *
 *  @ingroup smart_enums
 */
struct UnsignedIntSampler2DMultisample {

/// Conversion to any @p Enum type having the UnsignedIntSampler2DMultisample value.
/** Instances of the @ref oglplus::smart_enums::UnsignedIntSampler2DMultisample "UnsignedIntSampler2DMultisample"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedIntSampler2DMultisample value.
 */
template <typename Enum, Enum = Enum::UnsignedIntSampler2DMultisample> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedIntSampler2DMultisample value.
/** Instances of the @c smart_enums::UnsignedIntSampler2DMultisample type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedIntSampler2DMultisample value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedIntSampler2DMultisample);

/// Non-equality comparison with any @p Enum type having the UnsignedIntSampler2DMultisample value.
/** Instances of the @c smart_enums::UnsignedIntSampler2DMultisample type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedIntSampler2DMultisample value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedIntSampler2DMultisample);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedIntSampler2DMultisampleArray value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY}
 *
 *  @ingroup smart_enums
 */
struct UnsignedIntSampler2DMultisampleArray {

/// Conversion to any @p Enum type having the UnsignedIntSampler2DMultisampleArray value.
/** Instances of the @ref oglplus::smart_enums::UnsignedIntSampler2DMultisampleArray "UnsignedIntSampler2DMultisampleArray"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedIntSampler2DMultisampleArray value.
 */
template <typename Enum, Enum = Enum::UnsignedIntSampler2DMultisampleArray> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedIntSampler2DMultisampleArray value.
/** Instances of the @c smart_enums::UnsignedIntSampler2DMultisampleArray type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedIntSampler2DMultisampleArray value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedIntSampler2DMultisampleArray);

/// Non-equality comparison with any @p Enum type having the UnsignedIntSampler2DMultisampleArray value.
/** Instances of the @c smart_enums::UnsignedIntSampler2DMultisampleArray type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedIntSampler2DMultisampleArray value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedIntSampler2DMultisampleArray);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedIntSampler2DRect value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_INT_SAMPLER_2D_RECT}
 *
 *  @ingroup smart_enums
 */
struct UnsignedIntSampler2DRect {

/// Conversion to any @p Enum type having the UnsignedIntSampler2DRect value.
/** Instances of the @ref oglplus::smart_enums::UnsignedIntSampler2DRect "UnsignedIntSampler2DRect"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedIntSampler2DRect value.
 */
template <typename Enum, Enum = Enum::UnsignedIntSampler2DRect> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedIntSampler2DRect value.
/** Instances of the @c smart_enums::UnsignedIntSampler2DRect type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedIntSampler2DRect value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedIntSampler2DRect);

/// Non-equality comparison with any @p Enum type having the UnsignedIntSampler2DRect value.
/** Instances of the @c smart_enums::UnsignedIntSampler2DRect type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedIntSampler2DRect value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedIntSampler2DRect);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedIntSampler3D value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_INT_SAMPLER_3D}
 *
 *  @ingroup smart_enums
 */
struct UnsignedIntSampler3D {

/// Conversion to any @p Enum type having the UnsignedIntSampler3D value.
/** Instances of the @ref oglplus::smart_enums::UnsignedIntSampler3D "UnsignedIntSampler3D"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedIntSampler3D value.
 */
template <typename Enum, Enum = Enum::UnsignedIntSampler3D> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedIntSampler3D value.
/** Instances of the @c smart_enums::UnsignedIntSampler3D type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedIntSampler3D value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedIntSampler3D);

/// Non-equality comparison with any @p Enum type having the UnsignedIntSampler3D value.
/** Instances of the @c smart_enums::UnsignedIntSampler3D type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedIntSampler3D value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedIntSampler3D);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedIntSamplerBuffer value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_INT_SAMPLER_BUFFER}
 *
 *  @ingroup smart_enums
 */
struct UnsignedIntSamplerBuffer {

/// Conversion to any @p Enum type having the UnsignedIntSamplerBuffer value.
/** Instances of the @ref oglplus::smart_enums::UnsignedIntSamplerBuffer "UnsignedIntSamplerBuffer"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedIntSamplerBuffer value.
 */
template <typename Enum, Enum = Enum::UnsignedIntSamplerBuffer> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedIntSamplerBuffer value.
/** Instances of the @c smart_enums::UnsignedIntSamplerBuffer type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedIntSamplerBuffer value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedIntSamplerBuffer);

/// Non-equality comparison with any @p Enum type having the UnsignedIntSamplerBuffer value.
/** Instances of the @c smart_enums::UnsignedIntSamplerBuffer type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedIntSamplerBuffer value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedIntSamplerBuffer);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedIntSamplerCube value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_INT_SAMPLER_CUBE}
 *
 *  @ingroup smart_enums
 */
struct UnsignedIntSamplerCube {

/// Conversion to any @p Enum type having the UnsignedIntSamplerCube value.
/** Instances of the @ref oglplus::smart_enums::UnsignedIntSamplerCube "UnsignedIntSamplerCube"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedIntSamplerCube value.
 */
template <typename Enum, Enum = Enum::UnsignedIntSamplerCube> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedIntSamplerCube value.
/** Instances of the @c smart_enums::UnsignedIntSamplerCube type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedIntSamplerCube value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedIntSamplerCube);

/// Non-equality comparison with any @p Enum type having the UnsignedIntSamplerCube value.
/** Instances of the @c smart_enums::UnsignedIntSamplerCube type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedIntSamplerCube value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedIntSamplerCube);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedIntSamplerCubeMapArray value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY}
 *
 *  @ingroup smart_enums
 */
struct UnsignedIntSamplerCubeMapArray {

/// Conversion to any @p Enum type having the UnsignedIntSamplerCubeMapArray value.
/** Instances of the @ref oglplus::smart_enums::UnsignedIntSamplerCubeMapArray "UnsignedIntSamplerCubeMapArray"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedIntSamplerCubeMapArray value.
 */
template <typename Enum, Enum = Enum::UnsignedIntSamplerCubeMapArray> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedIntSamplerCubeMapArray value.
/** Instances of the @c smart_enums::UnsignedIntSamplerCubeMapArray type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedIntSamplerCubeMapArray value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedIntSamplerCubeMapArray);

/// Non-equality comparison with any @p Enum type having the UnsignedIntSamplerCubeMapArray value.
/** Instances of the @c smart_enums::UnsignedIntSamplerCubeMapArray type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedIntSamplerCubeMapArray value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedIntSamplerCubeMapArray);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedIntVec2 value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_INT_VEC2}
 *
 *  @ingroup smart_enums
 */
struct UnsignedIntVec2 {

/// Conversion to any @p Enum type having the UnsignedIntVec2 value.
/** Instances of the @ref oglplus::smart_enums::UnsignedIntVec2 "UnsignedIntVec2"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedIntVec2 value.
 */
template <typename Enum, Enum = Enum::UnsignedIntVec2> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedIntVec2 value.
/** Instances of the @c smart_enums::UnsignedIntVec2 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedIntVec2 value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedIntVec2);

/// Non-equality comparison with any @p Enum type having the UnsignedIntVec2 value.
/** Instances of the @c smart_enums::UnsignedIntVec2 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedIntVec2 value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedIntVec2);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedIntVec3 value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_INT_VEC3}
 *
 *  @ingroup smart_enums
 */
struct UnsignedIntVec3 {

/// Conversion to any @p Enum type having the UnsignedIntVec3 value.
/** Instances of the @ref oglplus::smart_enums::UnsignedIntVec3 "UnsignedIntVec3"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedIntVec3 value.
 */
template <typename Enum, Enum = Enum::UnsignedIntVec3> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedIntVec3 value.
/** Instances of the @c smart_enums::UnsignedIntVec3 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedIntVec3 value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedIntVec3);

/// Non-equality comparison with any @p Enum type having the UnsignedIntVec3 value.
/** Instances of the @c smart_enums::UnsignedIntVec3 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedIntVec3 value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedIntVec3);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedIntVec4 value.
/**
 *  @see @ref oglplus::SLDataType "SLDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_INT_VEC4}
 *
 *  @ingroup smart_enums
 */
struct UnsignedIntVec4 {

/// Conversion to any @p Enum type having the UnsignedIntVec4 value.
/** Instances of the @ref oglplus::smart_enums::UnsignedIntVec4 "UnsignedIntVec4"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedIntVec4 value.
 */
template <typename Enum, Enum = Enum::UnsignedIntVec4> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedIntVec4 value.
/** Instances of the @c smart_enums::UnsignedIntVec4 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedIntVec4 value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedIntVec4);

/// Non-equality comparison with any @p Enum type having the UnsignedIntVec4 value.
/** Instances of the @c smart_enums::UnsignedIntVec4 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedIntVec4 value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedIntVec4);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedShort value.
/**
 *  @see @ref oglplus::DataType "DataType"
 *  @see @ref oglplus::PixelDataType "PixelDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_SHORT}
 *
 *  @ingroup smart_enums
 */
struct UnsignedShort {

/// Conversion to any @p Enum type having the UnsignedShort value.
/** Instances of the @ref oglplus::smart_enums::UnsignedShort "UnsignedShort"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedShort value.
 */
template <typename Enum, Enum = Enum::UnsignedShort> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedShort value.
/** Instances of the @c smart_enums::UnsignedShort type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedShort value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedShort);

/// Non-equality comparison with any @p Enum type having the UnsignedShort value.
/** Instances of the @c smart_enums::UnsignedShort type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedShort value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedShort);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedShort_1_5_5_5_Rev value.
/**
 *  @see @ref oglplus::PixelDataType "PixelDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_SHORT_1_5_5_5_REV}
 *
 *  @ingroup smart_enums
 */
struct UnsignedShort_1_5_5_5_Rev {

/// Conversion to any @p Enum type having the UnsignedShort_1_5_5_5_Rev value.
/** Instances of the @ref oglplus::smart_enums::UnsignedShort_1_5_5_5_Rev "UnsignedShort_1_5_5_5_Rev"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedShort_1_5_5_5_Rev value.
 */
template <typename Enum, Enum = Enum::UnsignedShort_1_5_5_5_Rev> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedShort_1_5_5_5_Rev value.
/** Instances of the @c smart_enums::UnsignedShort_1_5_5_5_Rev type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedShort_1_5_5_5_Rev value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedShort_1_5_5_5_Rev);

/// Non-equality comparison with any @p Enum type having the UnsignedShort_1_5_5_5_Rev value.
/** Instances of the @c smart_enums::UnsignedShort_1_5_5_5_Rev type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedShort_1_5_5_5_Rev value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedShort_1_5_5_5_Rev);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedShort_4_4_4_4 value.
/**
 *  @see @ref oglplus::PixelDataType "PixelDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_SHORT_4_4_4_4}
 *
 *  @ingroup smart_enums
 */
struct UnsignedShort_4_4_4_4 {

/// Conversion to any @p Enum type having the UnsignedShort_4_4_4_4 value.
/** Instances of the @ref oglplus::smart_enums::UnsignedShort_4_4_4_4 "UnsignedShort_4_4_4_4"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedShort_4_4_4_4 value.
 */
template <typename Enum, Enum = Enum::UnsignedShort_4_4_4_4> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedShort_4_4_4_4 value.
/** Instances of the @c smart_enums::UnsignedShort_4_4_4_4 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedShort_4_4_4_4 value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedShort_4_4_4_4);

/// Non-equality comparison with any @p Enum type having the UnsignedShort_4_4_4_4 value.
/** Instances of the @c smart_enums::UnsignedShort_4_4_4_4 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedShort_4_4_4_4 value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedShort_4_4_4_4);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedShort_4_4_4_4_Rev value.
/**
 *  @see @ref oglplus::PixelDataType "PixelDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_SHORT_4_4_4_4_REV}
 *
 *  @ingroup smart_enums
 */
struct UnsignedShort_4_4_4_4_Rev {

/// Conversion to any @p Enum type having the UnsignedShort_4_4_4_4_Rev value.
/** Instances of the @ref oglplus::smart_enums::UnsignedShort_4_4_4_4_Rev "UnsignedShort_4_4_4_4_Rev"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedShort_4_4_4_4_Rev value.
 */
template <typename Enum, Enum = Enum::UnsignedShort_4_4_4_4_Rev> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedShort_4_4_4_4_Rev value.
/** Instances of the @c smart_enums::UnsignedShort_4_4_4_4_Rev type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedShort_4_4_4_4_Rev value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedShort_4_4_4_4_Rev);

/// Non-equality comparison with any @p Enum type having the UnsignedShort_4_4_4_4_Rev value.
/** Instances of the @c smart_enums::UnsignedShort_4_4_4_4_Rev type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedShort_4_4_4_4_Rev value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedShort_4_4_4_4_Rev);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedShort_5_5_5_1 value.
/**
 *  @see @ref oglplus::PixelDataType "PixelDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_SHORT_5_5_5_1}
 *
 *  @ingroup smart_enums
 */
struct UnsignedShort_5_5_5_1 {

/// Conversion to any @p Enum type having the UnsignedShort_5_5_5_1 value.
/** Instances of the @ref oglplus::smart_enums::UnsignedShort_5_5_5_1 "UnsignedShort_5_5_5_1"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedShort_5_5_5_1 value.
 */
template <typename Enum, Enum = Enum::UnsignedShort_5_5_5_1> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedShort_5_5_5_1 value.
/** Instances of the @c smart_enums::UnsignedShort_5_5_5_1 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedShort_5_5_5_1 value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedShort_5_5_5_1);

/// Non-equality comparison with any @p Enum type having the UnsignedShort_5_5_5_1 value.
/** Instances of the @c smart_enums::UnsignedShort_5_5_5_1 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedShort_5_5_5_1 value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedShort_5_5_5_1);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedShort_5_6_5 value.
/**
 *  @see @ref oglplus::PixelDataType "PixelDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_SHORT_5_6_5}
 *
 *  @ingroup smart_enums
 */
struct UnsignedShort_5_6_5 {

/// Conversion to any @p Enum type having the UnsignedShort_5_6_5 value.
/** Instances of the @ref oglplus::smart_enums::UnsignedShort_5_6_5 "UnsignedShort_5_6_5"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedShort_5_6_5 value.
 */
template <typename Enum, Enum = Enum::UnsignedShort_5_6_5> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedShort_5_6_5 value.
/** Instances of the @c smart_enums::UnsignedShort_5_6_5 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedShort_5_6_5 value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedShort_5_6_5);

/// Non-equality comparison with any @p Enum type having the UnsignedShort_5_6_5 value.
/** Instances of the @c smart_enums::UnsignedShort_5_6_5 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedShort_5_6_5 value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedShort_5_6_5);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UnsignedShort_5_6_5_Rev value.
/**
 *  @see @ref oglplus::PixelDataType "PixelDataType"
 *
 *  @glsymbols
 *  @gldefref{UNSIGNED_SHORT_5_6_5_REV}
 *
 *  @ingroup smart_enums
 */
struct UnsignedShort_5_6_5_Rev {

/// Conversion to any @p Enum type having the UnsignedShort_5_6_5_Rev value.
/** Instances of the @ref oglplus::smart_enums::UnsignedShort_5_6_5_Rev "UnsignedShort_5_6_5_Rev"
 *  type are convertible to instances of any enumeration type having
 *  the @c UnsignedShort_5_6_5_Rev value.
 */
template <typename Enum, Enum = Enum::UnsignedShort_5_6_5_Rev> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UnsignedShort_5_6_5_Rev value.
/** Instances of the @c smart_enums::UnsignedShort_5_6_5_Rev type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UnsignedShort_5_6_5_Rev value.
 */
template <typename Enum> friend bool operator==(Enum value, UnsignedShort_5_6_5_Rev);

/// Non-equality comparison with any @p Enum type having the UnsignedShort_5_6_5_Rev value.
/** Instances of the @c smart_enums::UnsignedShort_5_6_5_Rev type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UnsignedShort_5_6_5_Rev value.
 */
template <typename Enum> friend bool operator!=(Enum value, UnsignedShort_5_6_5_Rev);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Unsupported value.
/**
 *  @see @ref oglplus::FramebufferStatus "FramebufferStatus"
 *
 *  @glsymbols
 *  @gldefref{FRAMEBUFFER_UNSUPPORTED}
 *
 *  @ingroup smart_enums
 */
struct Unsupported {

/// Conversion to any @p Enum type having the Unsupported value.
/** Instances of the @ref oglplus::smart_enums::Unsupported "Unsupported"
 *  type are convertible to instances of any enumeration type having
 *  the @c Unsupported value.
 */
template <typename Enum, Enum = Enum::Unsupported> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Unsupported value.
/** Instances of the @c smart_enums::Unsupported type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Unsupported value.
 */
template <typename Enum> friend bool operator==(Enum value, Unsupported);

/// Non-equality comparison with any @p Enum type having the Unsupported value.
/** Instances of the @c smart_enums::Unsupported type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Unsupported value.
 */
template <typename Enum> friend bool operator!=(Enum value, Unsupported);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Unsynchronized value.
/**
 *  @see @ref oglplus::BufferMapAccess "BufferMapAccess"
 *
 *  @glsymbols
 *  @gldefref{MAP_UNSYNCHRONIZED_BIT}
 *
 *  @ingroup smart_enums
 */
struct Unsynchronized {

/// Conversion to any @p Enum type having the Unsynchronized value.
/** Instances of the @ref oglplus::smart_enums::Unsynchronized "Unsynchronized"
 *  type are convertible to instances of any enumeration type having
 *  the @c Unsynchronized value.
 */
template <typename Enum, Enum = Enum::Unsynchronized> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Unsynchronized value.
/** Instances of the @c smart_enums::Unsynchronized type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Unsynchronized value.
 */
template <typename Enum> friend bool operator==(Enum value, Unsynchronized);

/// Non-equality comparison with any @p Enum type having the Unsynchronized value.
/** Instances of the @c smart_enums::Unsynchronized type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Unsynchronized value.
 */
template <typename Enum> friend bool operator!=(Enum value, Unsynchronized);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Use value.
/**
 *  @see @ref oglplus::PathNVMissingGlyph "PathNVMissingGlyph"
 *
 *  @glsymbols
 *  @gldefref{USE_MISSING_GLYPH_NV}
 *
 *  @ingroup smart_enums
 */
struct Use {

/// Conversion to any @p Enum type having the Use value.
/** Instances of the @ref oglplus::smart_enums::Use "Use"
 *  type are convertible to instances of any enumeration type having
 *  the @c Use value.
 */
template <typename Enum, Enum = Enum::Use> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Use value.
/** Instances of the @c smart_enums::Use type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Use value.
 */
template <typename Enum> friend bool operator==(Enum value, Use);

/// Non-equality comparison with any @p Enum type having the Use value.
/** Instances of the @c smart_enums::Use type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Use value.
 */
template <typename Enum> friend bool operator!=(Enum value, Use);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UTF16 value.
/**
 *  @see @ref oglplus::PathNVTextEncoding "PathNVTextEncoding"
 *
 *  @glsymbols
 *  @gldefref{UTF16_NV}
 *
 *  @ingroup smart_enums
 */
struct UTF16 {

/// Conversion to any @p Enum type having the UTF16 value.
/** Instances of the @ref oglplus::smart_enums::UTF16 "UTF16"
 *  type are convertible to instances of any enumeration type having
 *  the @c UTF16 value.
 */
template <typename Enum, Enum = Enum::UTF16> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UTF16 value.
/** Instances of the @c smart_enums::UTF16 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UTF16 value.
 */
template <typename Enum> friend bool operator==(Enum value, UTF16);

/// Non-equality comparison with any @p Enum type having the UTF16 value.
/** Instances of the @c smart_enums::UTF16 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UTF16 value.
 */
template <typename Enum> friend bool operator!=(Enum value, UTF16);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c UTF8 value.
/**
 *  @see @ref oglplus::PathNVTextEncoding "PathNVTextEncoding"
 *
 *  @glsymbols
 *  @gldefref{UTF8_NV}
 *
 *  @ingroup smart_enums
 */
struct UTF8 {

/// Conversion to any @p Enum type having the UTF8 value.
/** Instances of the @ref oglplus::smart_enums::UTF8 "UTF8"
 *  type are convertible to instances of any enumeration type having
 *  the @c UTF8 value.
 */
template <typename Enum, Enum = Enum::UTF8> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the UTF8 value.
/** Instances of the @c smart_enums::UTF8 type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c UTF8 value.
 */
template <typename Enum> friend bool operator==(Enum value, UTF8);

/// Non-equality comparison with any @p Enum type having the UTF8 value.
/** Instances of the @c smart_enums::UTF8 type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c UTF8 value.
 */
template <typename Enum> friend bool operator!=(Enum value, UTF8);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Vendor value.
/**
 *  @see @ref oglplus::StringQuery "StringQuery"
 *
 *  @glsymbols
 *  @gldefref{VENDOR}
 *
 *  @ingroup smart_enums
 */
struct Vendor {

/// Conversion to any @p Enum type having the Vendor value.
/** Instances of the @ref oglplus::smart_enums::Vendor "Vendor"
 *  type are convertible to instances of any enumeration type having
 *  the @c Vendor value.
 */
template <typename Enum, Enum = Enum::Vendor> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Vendor value.
/** Instances of the @c smart_enums::Vendor type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Vendor value.
 */
template <typename Enum> friend bool operator==(Enum value, Vendor);

/// Non-equality comparison with any @p Enum type having the Vendor value.
/** Instances of the @c smart_enums::Vendor type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Vendor value.
 */
template <typename Enum> friend bool operator!=(Enum value, Vendor);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Version value.
/**
 *  @see @ref oglplus::StringQuery "StringQuery"
 *
 *  @glsymbols
 *  @gldefref{VERSION}
 *
 *  @ingroup smart_enums
 */
struct Version {

/// Conversion to any @p Enum type having the Version value.
/** Instances of the @ref oglplus::smart_enums::Version "Version"
 *  type are convertible to instances of any enumeration type having
 *  the @c Version value.
 */
template <typename Enum, Enum = Enum::Version> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Version value.
/** Instances of the @c smart_enums::Version type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Version value.
 */
template <typename Enum> friend bool operator==(Enum value, Version);

/// Non-equality comparison with any @p Enum type having the Version value.
/** Instances of the @c smart_enums::Version type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Version value.
 */
template <typename Enum> friend bool operator!=(Enum value, Version);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Vertex value.
/**
 *  @see @ref oglplus::ShaderType "ShaderType"
 *
 *  @glsymbols
 *  @gldefref{VERTEX_SHADER}
 *
 *  @ingroup smart_enums
 */
struct Vertex {

/// Conversion to any @p Enum type having the Vertex value.
/** Instances of the @ref oglplus::smart_enums::Vertex "Vertex"
 *  type are convertible to instances of any enumeration type having
 *  the @c Vertex value.
 */
template <typename Enum, Enum = Enum::Vertex> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Vertex value.
/** Instances of the @c smart_enums::Vertex type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Vertex value.
 */
template <typename Enum> friend bool operator==(Enum value, Vertex);

/// Non-equality comparison with any @p Enum type having the Vertex value.
/** Instances of the @c smart_enums::Vertex type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Vertex value.
 */
template <typename Enum> friend bool operator!=(Enum value, Vertex);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c VertexArray value.
/**
 *  @see @ref oglplus::CompatibilityClientAttributeGroup "CompatibilityClientAttributeGroup"
 *  @see @ref oglplus::ObjectType "ObjectType"
 *
 *  @glsymbols
 *  @gldefref{CLIENT_VERTEX_ARRAY_BIT}
 *  @gldefref{VERTEX_ARRAY}
 *
 *  @ingroup smart_enums
 */
struct VertexArray {

/// Conversion to any @p Enum type having the VertexArray value.
/** Instances of the @ref oglplus::smart_enums::VertexArray "VertexArray"
 *  type are convertible to instances of any enumeration type having
 *  the @c VertexArray value.
 */
template <typename Enum, Enum = Enum::VertexArray> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the VertexArray value.
/** Instances of the @c smart_enums::VertexArray type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c VertexArray value.
 */
template <typename Enum> friend bool operator==(Enum value, VertexArray);

/// Non-equality comparison with any @p Enum type having the VertexArray value.
/** Instances of the @c smart_enums::VertexArray type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c VertexArray value.
 */
template <typename Enum> friend bool operator!=(Enum value, VertexArray);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c VertexAttribArray value.
/**
 *  @see @ref oglplus::MemoryBarrierBit "MemoryBarrierBit"
 *
 *  @glsymbols
 *  @gldefref{VERTEX_ATTRIB_ARRAY_BARRIER_BIT}
 *
 *  @ingroup smart_enums
 */
struct VertexAttribArray {

/// Conversion to any @p Enum type having the VertexAttribArray value.
/** Instances of the @ref oglplus::smart_enums::VertexAttribArray "VertexAttribArray"
 *  type are convertible to instances of any enumeration type having
 *  the @c VertexAttribArray value.
 */
template <typename Enum, Enum = Enum::VertexAttribArray> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the VertexAttribArray value.
/** Instances of the @c smart_enums::VertexAttribArray type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c VertexAttribArray value.
 */
template <typename Enum> friend bool operator==(Enum value, VertexAttribArray);

/// Non-equality comparison with any @p Enum type having the VertexAttribArray value.
/** Instances of the @c smart_enums::VertexAttribArray type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c VertexAttribArray value.
 */
template <typename Enum> friend bool operator!=(Enum value, VertexAttribArray);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c VertexShader value.
/**
 *  @see @ref oglplus::ProgramPipelineStage "ProgramPipelineStage"
 *
 *  @glsymbols
 *  @gldefref{VERTEX_SHADER_BIT}
 *
 *  @ingroup smart_enums
 */
struct VertexShader {

/// Conversion to any @p Enum type having the VertexShader value.
/** Instances of the @ref oglplus::smart_enums::VertexShader "VertexShader"
 *  type are convertible to instances of any enumeration type having
 *  the @c VertexShader value.
 */
template <typename Enum, Enum = Enum::VertexShader> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the VertexShader value.
/** Instances of the @c smart_enums::VertexShader type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c VertexShader value.
 */
template <typename Enum> friend bool operator==(Enum value, VertexShader);

/// Non-equality comparison with any @p Enum type having the VertexShader value.
/** Instances of the @c smart_enums::VertexShader type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c VertexShader value.
 */
template <typename Enum> friend bool operator!=(Enum value, VertexShader);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c VertexSubroutine value.
/**
 *  @see @ref oglplus::ProgramInterface "ProgramInterface"
 *
 *  @glsymbols
 *  @gldefref{VERTEX_SUBROUTINE}
 *
 *  @ingroup smart_enums
 */
struct VertexSubroutine {

/// Conversion to any @p Enum type having the VertexSubroutine value.
/** Instances of the @ref oglplus::smart_enums::VertexSubroutine "VertexSubroutine"
 *  type are convertible to instances of any enumeration type having
 *  the @c VertexSubroutine value.
 */
template <typename Enum, Enum = Enum::VertexSubroutine> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the VertexSubroutine value.
/** Instances of the @c smart_enums::VertexSubroutine type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c VertexSubroutine value.
 */
template <typename Enum> friend bool operator==(Enum value, VertexSubroutine);

/// Non-equality comparison with any @p Enum type having the VertexSubroutine value.
/** Instances of the @c smart_enums::VertexSubroutine type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c VertexSubroutine value.
 */
template <typename Enum> friend bool operator!=(Enum value, VertexSubroutine);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c VertexSubroutineUniform value.
/**
 *  @see @ref oglplus::ProgramInterface "ProgramInterface"
 *
 *  @glsymbols
 *  @gldefref{VERTEX_SUBROUTINE_UNIFORM}
 *
 *  @ingroup smart_enums
 */
struct VertexSubroutineUniform {

/// Conversion to any @p Enum type having the VertexSubroutineUniform value.
/** Instances of the @ref oglplus::smart_enums::VertexSubroutineUniform "VertexSubroutineUniform"
 *  type are convertible to instances of any enumeration type having
 *  the @c VertexSubroutineUniform value.
 */
template <typename Enum, Enum = Enum::VertexSubroutineUniform> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the VertexSubroutineUniform value.
/** Instances of the @c smart_enums::VertexSubroutineUniform type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c VertexSubroutineUniform value.
 */
template <typename Enum> friend bool operator==(Enum value, VertexSubroutineUniform);

/// Non-equality comparison with any @p Enum type having the VertexSubroutineUniform value.
/** Instances of the @c smart_enums::VertexSubroutineUniform type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c VertexSubroutineUniform value.
 */
template <typename Enum> friend bool operator!=(Enum value, VertexSubroutineUniform);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c VerticalLineTo value.
/**
 *  @see @ref oglplus::PathNVCommand "PathNVCommand"
 *
 *  @glsymbols
 *  @gldefref{VERTICAL_LINE_TO_NV}
 *
 *  @ingroup smart_enums
 */
struct VerticalLineTo {

/// Conversion to any @p Enum type having the VerticalLineTo value.
/** Instances of the @ref oglplus::smart_enums::VerticalLineTo "VerticalLineTo"
 *  type are convertible to instances of any enumeration type having
 *  the @c VerticalLineTo value.
 */
template <typename Enum, Enum = Enum::VerticalLineTo> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the VerticalLineTo value.
/** Instances of the @c smart_enums::VerticalLineTo type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c VerticalLineTo value.
 */
template <typename Enum> friend bool operator==(Enum value, VerticalLineTo);

/// Non-equality comparison with any @p Enum type having the VerticalLineTo value.
/** Instances of the @c smart_enums::VerticalLineTo type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c VerticalLineTo value.
 */
template <typename Enum> friend bool operator!=(Enum value, VerticalLineTo);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Viewport value.
/**
 *  @see @ref oglplus::CompatibilityAttributeGroup "CompatibilityAttributeGroup"
 *
 *  @glsymbols
 *  @gldefref{VIEWPORT_BIT}
 *
 *  @ingroup smart_enums
 */
struct Viewport {

/// Conversion to any @p Enum type having the Viewport value.
/** Instances of the @ref oglplus::smart_enums::Viewport "Viewport"
 *  type are convertible to instances of any enumeration type having
 *  the @c Viewport value.
 */
template <typename Enum, Enum = Enum::Viewport> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Viewport value.
/** Instances of the @c smart_enums::Viewport type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Viewport value.
 */
template <typename Enum> friend bool operator==(Enum value, Viewport);

/// Non-equality comparison with any @p Enum type having the Viewport value.
/** Instances of the @c smart_enums::Viewport type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Viewport value.
 */
template <typename Enum> friend bool operator!=(Enum value, Viewport);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c WaitFailed value.
/**
 *  @see @ref oglplus::SyncWaitResult "SyncWaitResult"
 *
 *  @glsymbols
 *  @gldefref{WAIT_FAILED}
 *
 *  @ingroup smart_enums
 */
struct WaitFailed {

/// Conversion to any @p Enum type having the WaitFailed value.
/** Instances of the @ref oglplus::smart_enums::WaitFailed "WaitFailed"
 *  type are convertible to instances of any enumeration type having
 *  the @c WaitFailed value.
 */
template <typename Enum, Enum = Enum::WaitFailed> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the WaitFailed value.
/** Instances of the @c smart_enums::WaitFailed type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c WaitFailed value.
 */
template <typename Enum> friend bool operator==(Enum value, WaitFailed);

/// Non-equality comparison with any @p Enum type having the WaitFailed value.
/** Instances of the @c smart_enums::WaitFailed type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c WaitFailed value.
 */
template <typename Enum> friend bool operator!=(Enum value, WaitFailed);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c WindowSystem value.
/**
 *  @see @ref oglplus::DebugOutputARBSource "DebugOutputARBSource"
 *  @see @ref oglplus::DebugOutputSource "DebugOutputSource"
 *  @see @ref oglplus::DebugSource "DebugSource"
 *
 *  @glsymbols
 *  @gldefref{DEBUG_SOURCE_WINDOW_SYSTEM}
 *  @gldefref{DEBUG_SOURCE_WINDOW_SYSTEM_ARB}
 *
 *  @ingroup smart_enums
 */
struct WindowSystem {

/// Conversion to any @p Enum type having the WindowSystem value.
/** Instances of the @ref oglplus::smart_enums::WindowSystem "WindowSystem"
 *  type are convertible to instances of any enumeration type having
 *  the @c WindowSystem value.
 */
template <typename Enum, Enum = Enum::WindowSystem> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the WindowSystem value.
/** Instances of the @c smart_enums::WindowSystem type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c WindowSystem value.
 */
template <typename Enum> friend bool operator==(Enum value, WindowSystem);

/// Non-equality comparison with any @p Enum type having the WindowSystem value.
/** Instances of the @c smart_enums::WindowSystem type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c WindowSystem value.
 */
template <typename Enum> friend bool operator!=(Enum value, WindowSystem);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Write value.
/**
 *  @see @ref oglplus::BufferMapAccess "BufferMapAccess"
 *
 *  @glsymbols
 *  @gldefref{MAP_WRITE_BIT}
 *
 *  @ingroup smart_enums
 */
struct Write {

/// Conversion to any @p Enum type having the Write value.
/** Instances of the @ref oglplus::smart_enums::Write "Write"
 *  type are convertible to instances of any enumeration type having
 *  the @c Write value.
 */
template <typename Enum, Enum = Enum::Write> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Write value.
/** Instances of the @c smart_enums::Write type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Write value.
 */
template <typename Enum> friend bool operator==(Enum value, Write);

/// Non-equality comparison with any @p Enum type having the Write value.
/** Instances of the @c smart_enums::Write type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Write value.
 */
template <typename Enum> friend bool operator!=(Enum value, Write);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c WriteOnly value.
/**
 *  @see @ref oglplus::AccessSpecifier "AccessSpecifier"
 *
 *  @glsymbols
 *  @gldefref{WRITE_ONLY}
 *
 *  @ingroup smart_enums
 */
struct WriteOnly {

/// Conversion to any @p Enum type having the WriteOnly value.
/** Instances of the @ref oglplus::smart_enums::WriteOnly "WriteOnly"
 *  type are convertible to instances of any enumeration type having
 *  the @c WriteOnly value.
 */
template <typename Enum, Enum = Enum::WriteOnly> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the WriteOnly value.
/** Instances of the @c smart_enums::WriteOnly type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c WriteOnly value.
 */
template <typename Enum> friend bool operator==(Enum value, WriteOnly);

/// Non-equality comparison with any @p Enum type having the WriteOnly value.
/** Instances of the @c smart_enums::WriteOnly type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c WriteOnly value.
 */
template <typename Enum> friend bool operator!=(Enum value, WriteOnly);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Xor value.
/**
 *  @see @ref oglplus::ColorLogicOperation "ColorLogicOperation"
 *
 *  @glsymbols
 *  @gldefref{XOR}
 *
 *  @ingroup smart_enums
 */
struct Xor {

/// Conversion to any @p Enum type having the Xor value.
/** Instances of the @ref oglplus::smart_enums::Xor "Xor"
 *  type are convertible to instances of any enumeration type having
 *  the @c Xor value.
 */
template <typename Enum, Enum = Enum::Xor> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Xor value.
/** Instances of the @c smart_enums::Xor type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Xor value.
 */
template <typename Enum> friend bool operator==(Enum value, Xor);

/// Non-equality comparison with any @p Enum type having the Xor value.
/** Instances of the @c smart_enums::Xor type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Xor value.
 */
template <typename Enum> friend bool operator!=(Enum value, Xor);
};

/// @ref oglplus_smart_enums "Smart enum" for enumerations with the @c Zero value.
/**
 *  @see @ref oglplus::BlendFunction "BlendFunction"
 *  @see @ref oglplus::StencilOperation "StencilOperation"
 *  @see @ref oglplus::TextureSwizzle "TextureSwizzle"
 *
 *  @glsymbols
 *  @gldefref{ZERO}
 *
 *  @ingroup smart_enums
 */
struct Zero {

/// Conversion to any @p Enum type having the Zero value.
/** Instances of the @ref oglplus::smart_enums::Zero "Zero"
 *  type are convertible to instances of any enumeration type having
 *  the @c Zero value.
 */
template <typename Enum, Enum = Enum::Zero> operator Enum (void) const;

/// Equality comparison with any @p Enum type having the Zero value.
/** Instances of the @c smart_enums::Zero type can be compared
 *  for equality to instances of any enumeration type having
 *  the @c Zero value.
 */
template <typename Enum> friend bool operator==(Enum value, Zero);

/// Non-equality comparison with any @p Enum type having the Zero value.
/** Instances of the @c smart_enums::Zero type can be compared
 *  for non-equality to instances of any enumeration type having
 *  the @c Zero value.
 */
template <typename Enum> friend bool operator!=(Enum value, Zero);
};

